{"address":"0xfD6dBc7De22Eb28B8997275320f5F1ab89370788","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_user","type":"address"},{"indexed":true,"internalType":"bool","name":"_isValid","type":"bool"}],"name":"KYCed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_newPrice","type":"uint256"}],"name":"PriceLimit","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorizedOperators","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"checkKyc","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"kycUsers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"perpetualAltruism","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"priceLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"},{"internalType":"bool","name":"_kyc","type":"bool"}],"name":"setKyc","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_operating","type":"bool"}],"name":"setOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newPrice","type":"uint256"}],"name":"setPriceLimit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Guillaume Gonnaud 2020","details":"Price feed is in ETH and NOT an oracle because it's a KYC price feed (We have to verify transaction above a certain GBP amount)","methods":{"checkKyc(address,uint256)":{"details":"Anyone can check","params":{"_amount":"The amount of the bid","_user":"The address of the user"}},"constructor":{"details":"This contract is meant to be used in a delegatecall and hence its memory state is irrelevant"},"init()":{"details":"Callable only once after deployment"},"setKyc(address,bool)":{"details":"Only callable by Perpetual Altruism/Other operators","params":{"_kyc":"Is the user allowed to bid for any amount ?","_user":"The address of the user"}},"setOperator(address,bool)":{"details":"Only callable by Perpetual Altruism/Other operators","params":{"_operating":"If the operator is allowed to operate","_operator":"The address of the operator"}},"setPriceLimit(uint256)":{"details":"Only callable by Perpetual Altruism/Other operators","params":{"_newPrice":"The new price limit"}}},"title":"Cryptograph KYC Logic Contract"},"userdoc":{"methods":{"checkKyc(address,uint256)":{"notice":"Check if a user is allowed to transact this amount"},"constructor":"Generic constructor, empty","init()":{"notice":"Init function of the KYC contract"},"setKyc(address,bool)":{"notice":"Used to allow other wallets to manage the KYC"},"setOperator(address,bool)":{"notice":"Used to allow other wallets to manage the KYC"},"setPriceLimit(uint256)":{"notice":"Used to set a price limit above which wallets need to be KYCed"}},"notice":"Provides the logic code for the KYC of bidders"}},"settings":{"compilationTarget":{"browser/CryptographKYCLogicV1.sol":"CryptographKYCLogicV1"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/CryptographKYCLogicV1.sol":{"keccak256":"0x3203f2288cf17d101095da9fbe755ec7ad247751ba5e61901e6b1c5176525b7a","urls":["bzz-raw://a2b74f0a0b483ca126e6ce93184ed0227a105413c6ec1a3fbc7b6f9f8c37dae8","dweb:/ipfs/QmXrgush6YEKpDrNoJcpQ9ZRg9Ar2pASHCHcKWRDo6CP2N"]},"browser/CryptographKYCV1.sol":{"keccak256":"0x5bed2569c70ebfb1967db23bda24aef441b88572719db6ed12451477b659954a","urls":["bzz-raw://3c47e22ed0e374c1729d49a32b329f3ece9d93202105b5abade02bde150473fe","dweb:/ipfs/QmbiPLcLJwyr7YvgeVME66A3fzPngrNhANapmdMpTgksZa"]},"browser/VCProxy.sol":{"keccak256":"0xd25f66b377fe7b5d7c919112348c1260182cbcb1c7a543ace05142d20c47d506","urls":["bzz-raw://f21fd6ba7b0af19771c141993f7dbd1c8aecfdbdc1a6e586496351c3484d3709","dweb:/ipfs/QmS1hzBkyJYqThGcX6jxtzYVRxfv5oU8syt5Cp7HVF8SsZ"]}},"version":1},"version":1,"checkPoints":[]}