{"address":"0x54f725689F18759E996f6358b8Edcef864698C43","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"src","type":"address"},{"indexed":true,"internalType":"address","name":"dst","type":"address"},{"indexed":false,"internalType":"uint256","name":"amt","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"newDenorm","type":"uint256"}],"name":"LOG_DENORM_UPDATED","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"desiredDenorm","type":"uint256"}],"name":"LOG_DESIRED_DENORM_SET","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenAmountOut","type":"uint256"}],"name":"LOG_EXIT","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenAmountIn","type":"uint256"}],"name":"LOG_JOIN","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"maxPoolTokens","type":"uint256"}],"name":"LOG_MAX_TOKENS_UPDATED","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"minimumBalance","type":"uint256"}],"name":"LOG_MINIMUM_BALANCE_UPDATED","type":"event"},{"anonymous":false,"inputs":[],"name":"LOG_PUBLIC_SWAP_ENABLED","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenAmountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokenAmountOut","type":"uint256"}],"name":"LOG_SWAP","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"swapFee","type":"uint256"}],"name":"LOG_SWAP_FEE_UPDATED","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"desiredDenorm","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minimumBalance","type":"uint256"}],"name":"LOG_TOKEN_ADDED","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"LOG_TOKEN_READY","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"LOG_TOKEN_REMOVED","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"src","type":"address"},{"indexed":true,"internalType":"address","name":"dst","type":"address"},{"indexed":false,"internalType":"uint256","name":"amt","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"VERSION_NUMBER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"whom","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"}],"name":"configure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"poolAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"}],"name":"exitPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"tokenAmountOut","type":"uint256"},{"internalType":"uint256","name":"maxPoolAmountIn","type":"uint256"}],"name":"exitswapExternAmountOut","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"poolAmountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}],"name":"exitswapPoolAmountIn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"extrapolatePoolValueFromToken","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flashBorrow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getController","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentDesiredTokens","outputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentTokens","outputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getDenormalizedWeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxPoolTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getMinimumBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"}],"name":"getSpotPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSwapFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTokenRecord","outputs":[{"components":[{"internalType":"bool","name":"bound","type":"bool"},{"internalType":"bool","name":"ready","type":"bool"},{"internalType":"uint40","name":"lastDenormUpdate","type":"uint40"},{"internalType":"uint96","name":"denorm","type":"uint96"},{"internalType":"uint96","name":"desiredDenorm","type":"uint96"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"uint256","name":"balance","type":"uint256"}],"internalType":"struct IIndexPool.Record","name":"record","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalDenormalizedWeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getUsedBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"gulp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"increaseApproval","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint96[]","name":"denorms","type":"uint96[]"},{"internalType":"address","name":"tokenProvider","type":"address"},{"internalType":"address","name":"unbindHandler","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"t","type":"address"}],"name":"isBound","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPublicSwap","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"poolAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"}],"name":"joinPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"tokenAmountIn","type":"uint256"},{"internalType":"uint256","name":"minPoolAmountOut","type":"uint256"}],"name":"joinswapExternAmountIn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"poolAmountOut","type":"uint256"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"}],"name":"joinswapPoolAmountOut","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint96[]","name":"desiredDenorms","type":"uint96[]"},{"internalType":"uint256[]","name":"minimumBalances","type":"uint256[]"}],"name":"reindexTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint96[]","name":"desiredDenorms","type":"uint96[]"}],"name":"reweighTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"maxPoolTokens","type":"uint256"}],"name":"setMaxPoolTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"minimumBalance","type":"uint256"}],"name":"setMinimumBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"swapFee","type":"uint256"}],"name":"setSwapFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"tokenAmountIn","type":"uint256"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"uint256","name":"maxPrice","type":"uint256"}],"name":"swapExactAmountIn","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"tokenAmountOut","type":"uint256"},{"internalType":"uint256","name":"maxPrice","type":"uint256"}],"name":"swapExactAmountOut","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"LOG_DENORM_UPDATED(address,uint256)":{"details":"Emitted when a token's weight updates. "},"LOG_DESIRED_DENORM_SET(address,uint256)":{"details":"Emitted when a token's desired weight is set. "},"LOG_EXIT(address,address,uint256)":{"details":"Emitted when pool tokens are burned for underlying. "},"LOG_JOIN(address,address,uint256)":{"details":"Emitted when underlying tokens are deposited for pool tokens. "},"LOG_MAX_TOKENS_UPDATED(uint256)":{"details":"Emitted when the maximum tokens value is updated. "},"LOG_MINIMUM_BALANCE_UPDATED(address,uint256)":{"details":"Emitted when a token's minimum balance is updated. "},"LOG_PUBLIC_SWAP_ENABLED()":{"details":"Emitted when public trades are enabled. "},"LOG_SWAP(address,address,address,uint256,uint256)":{"details":"Emitted when tokens are swapped. "},"LOG_SWAP_FEE_UPDATED(uint256)":{"details":"Emitted when the swap fee is updated. "},"LOG_TOKEN_ADDED(address,uint256,uint256)":{"details":"Emitted when a token is unbound from the pool. "},"LOG_TOKEN_READY(address)":{"details":"Emitted when a token reaches its minimum balance. "},"LOG_TOKEN_REMOVED(address)":{"details":"Emitted when a token is unbound from the pool. "}},"kind":"dev","methods":{"configure(address,string,string)":{"details":"Sets the controller address and the token name & symbol. Note: This saves on storage costs for multi-step pool deployment.","params":{"controller":"Controller of the pool","name":"Name of the pool token","symbol":"Symbol of the pool token"}},"exitPool(uint256,uint256[])":{"details":"Burns `poolAmountIn` pool tokens in exchange for the amounts of each underlying token's balance proportional to the ratio of tokens burned to total pool supply. The amount of each token transferred to the caller must be greater than or equal to the associated minimum output amount from the `minAmountsOut` array.","params":{"minAmountsOut":"Minimum amount of each token to receive, in the same order as the pool's _tokens list.","poolAmountIn":"Exact amount of pool tokens to burn"}},"exitswapExternAmountOut(address,uint256,uint256)":{"details":"Burn up to `maxPoolAmountIn` for exactly `tokenAmountOut` of `tokenOut`. Returns the number of pool tokens burned. The pool implicitly burns the tokens for all underlying tokens and swaps them to the desired output token. A swap fee is charged against the output tokens.","params":{"maxPoolAmountIn":"Maximum amount of pool tokens to burn","tokenAmountOut":"Exact amount of `tokenOut` to receive","tokenOut":"Token to receive"},"returns":{"_0":"poolAmountIn - Amount of pool tokens burned"}},"exitswapPoolAmountIn(address,uint256,uint256)":{"details":"Burns `poolAmountIn` pool tokens in exchange for at least `minAmountOut` of `tokenOut`. Returns the number of tokens sent to the caller. The pool implicitly burns the tokens for all underlying tokens and swaps them to the desired output token. A swap fee is charged against the output tokens.","params":{"minAmountOut":"Minimum amount of `tokenOut` to receive","poolAmountIn":"Exact amount of pool tokens to burn","tokenOut":"Token to receive"},"returns":{"_0":"tokenAmountOut - Amount of `tokenOut` received"}},"extrapolatePoolValueFromToken()":{"details":"Finds the first token which is both initialized and has a desired weight above 0, then returns the address of that token and the extrapolated value of the pool in terms of that token. The value is extrapolated by multiplying the token's balance by the reciprocal of its normalized weight.","returns":{"_0":"(token, extrapolatedValue)"}},"flashBorrow(address,address,uint256,bytes)":{"details":"Execute a flash loan, transferring `amount` of `token` to `recipient`. `amount` must be repaid with `swapFee` interest by the end of the transaction.","params":{"amount":"Amount to borrow","data":"Data to send to the recipient in `receiveFlashLoan` call","recipient":"Must implement the IFlashLoanRecipient interface","token":"Token to borrow"}},"getBalance(address)":{"details":"Returns the stored balance of a bound token."},"getController()":{"details":"Returns the controller address."},"getCurrentDesiredTokens()":{"details":"Returns the list of tokens which have a desired weight above 0. Tokens with a desired weight of 0 are set to be phased out of the pool."},"getCurrentTokens()":{"details":"Get all bound tokens."},"getDenormalizedWeight(address)":{"details":"Returns the denormalized weight of a bound token."},"getMinimumBalance(address)":{"details":"Get the minimum balance of an uninitialized token. Note: Throws if the token is initialized."},"getNumTokens()":{"details":"Get the number of tokens bound to the pool."},"getSpotPrice(address,address)":{"details":"Returns the spot price for `tokenOut` in terms of `tokenIn`."},"getTokenRecord(address)":{"details":"Returns the record for a token bound to the pool."},"getTotalDenormalizedWeight()":{"details":"Get the total denormalized weight of the pool."},"getUsedBalance(address)":{"details":"Returns the balance of a token which is used in price calculations. If the token is initialized, this is the stored balance; if not, this is the minimum balance."},"gulp(address)":{"details":"Absorb any tokens that have been sent to the pool. If the token is not bound, it will be sent to the unbound token handler."},"initialize(address[],uint256[],uint96[],address,address)":{"details":"Sets up the initial assets for the pool. Note: `tokenProvider` must have approved the pool to transfer the corresponding `balances` of `tokens`.","params":{"balances":"Initial balances to transfer","denorms":"Initial denormalized weights for the tokens","tokenProvider":"Address to transfer the balances from","tokens":"Underlying tokens to initialize the pool with"}},"isBound(address)":{"details":"Check if a token is bound to the pool."},"isPublicSwap()":{"details":"Check if swapping tokens and joining the pool is allowed."},"joinPool(uint256,uint256[])":{"details":"Mint new pool tokens by providing the proportional amount of each underlying token's balance relative to the proportion of pool tokens minted. For any underlying tokens which are not initialized, the caller must provide the proportional share of the minimum balance for the token rather than the actual balance.","params":{"maxAmountsIn":"Maximum amount of each token to pay in the same order as the pool's _tokens list.","poolAmountOut":"Amount of pool tokens to mint"}},"joinswapExternAmountIn(address,uint256,uint256)":{"details":"Pay `tokenAmountIn` of `tokenIn` to mint at least `minPoolAmountOut` pool tokens. The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other underlying tokens. Thus a swap fee is charged against the input tokens.","params":{"minPoolAmountOut":"Minimum amount of pool tokens to mint","tokenAmountIn":"Exact amount of `tokenIn` to pay","tokenIn":"Token to send the pool"},"returns":{"_0":"poolAmountOut - Amount of pool tokens minted"}},"joinswapPoolAmountOut(address,uint256,uint256)":{"details":"Pay up to `maxAmountIn` of `tokenIn` to mint exactly `poolAmountOut`. The pool implicitly swaps `(1- weightTokenIn) * tokenAmountIn` to the other underlying tokens. Thus a swap fee is charged against the input tokens.","params":{"maxAmountIn":"Maximum amount of `tokenIn` to pay","poolAmountOut":"Exact amount of pool tokens to mint","tokenIn":"Token to send the pool"},"returns":{"_0":"tokenAmountIn - Amount of `tokenIn` paid"}},"reindexTokens(address[],uint96[],uint256[])":{"details":"Update the underlying assets held by the pool and their associated weights. Tokens which are not currently bound will be gradually added as they are swapped in to reach the provided minimum balances, which must be an amount of tokens worth the minimum weight of the total pool value. If a currently bound token is not received in this call, the token's desired weight will be set to 0."},"reweighTokens(address[],uint96[])":{"details":"Sets the desired weights for the pool tokens, which will be adjusted over time as they are swapped. Note: This does not check for duplicate tokens or that the total of the desired weights is equal to the target total weight (25). Those assumptions should be met in the controller. Further, the provided tokens should only include the tokens which are not set for removal."},"setMaxPoolTokens(uint256)":{"details":"Sets the maximum number of pool tokens that can be minted. This value will be used in the alpha to limit the maximum damage that can be caused by a catastrophic error. It can be gradually increased as the pool continues to not be exploited. If it is set to 0, the limit will be removed."},"setMinimumBalance(address,uint256)":{"details":"Updates the minimum balance for an uninitialized token. This becomes useful if a token's external price significantly rises after being bound, since the pool can not send a token out until it reaches the minimum balance."},"setSwapFee(uint256)":{"details":"Set the swap fee. Note: Swap fee must be between 0.0001% and 10%"},"swapExactAmountIn(address,uint256,address,uint256,uint256)":{"details":"Execute a token swap with a specified amount of input tokens and a minimum amount of output tokens. Note: Will revert if `tokenOut` is uninitialized.","params":{"maxPrice":"Maximum ratio of input to output tokens","minAmountOut":"Minimum amount of `tokenOut` to receive","tokenAmountIn":"Exact amount of `tokenIn` to swap in","tokenIn":"Token to swap in","tokenOut":"Token to swap out"},"returns":{"_0":"(tokenAmountOut, spotPriceAfter)"}},"swapExactAmountOut(address,uint256,address,uint256,uint256)":{"details":"Trades at most `maxAmountIn` of `tokenIn` for exactly `tokenAmountOut` of `tokenOut`. Returns the actual input amount and the new spot price after the swap, which can not exceed `maxPrice`.","params":{"maxAmountIn":"Maximum amount of `tokenIn` to pay","maxPrice":"Maximum ratio of input to output tokens","tokenAmountOut":"Exact amount of `tokenOut` to receive","tokenIn":"Token to swap in","tokenOut":"Token to swap out"},"returns":{"_0":"(tokenAmountIn, spotPriceAfter)"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"temp-contracts/balancer/IndexPool.sol":"IndexPool"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"temp-contracts/balancer/BConst.sol":{"keccak256":"0xe13406d33bfeed85c015085931beac4e6ec934abd0747cce6b363df0db3d9093","license":"GPL-3.0","urls":["bzz-raw://fefcff529e1285ef5d3d327811a519b1ab48b410440ff49134f86268963e3087","dweb:/ipfs/QmZw9BMC7QLS5LHEoiCY4XBjke1mkLYZYyJw8doZYMexv7"]},"temp-contracts/balancer/BMath.sol":{"keccak256":"0x3977bd3d74e453ac086351caff8632be550b31a4ba8fb9006a3d4b2706a46372","license":"GPL-3.0","urls":["bzz-raw://8291d6a31be11495261debe3f7c796f6bf56ef8c6e119db601da89478d6b7d02","dweb:/ipfs/QmVdBeMt5rhX2C3fqdwavP2H1yTAFviQiQEDtYJ9XWz1HW"]},"temp-contracts/balancer/BNum.sol":{"keccak256":"0xba11f0262201ac91b35267a66b016bc41dda4e8532f066601c87d0ad5a8e41ee","license":"GPL-3.0","urls":["bzz-raw://d7caa6283970bebbf59048adc3f0a5a2844dc689d37c61dba070cd6df80a9e78","dweb:/ipfs/QmeTzpgy4rGb8QgReemYbApNS2QWSQJP13WVrbc6P31Xk8"]},"temp-contracts/balancer/BToken.sol":{"keccak256":"0xca7903de5cb67c295d93a9613b05ce9d564d4e9b880aec220a115cba7cc3ef62","license":"GPL-3.0","urls":["bzz-raw://f93501b0a23f5ed165280e2c361b155b45fe6c0fd13e280bc9f519bdfa9877ca","dweb:/ipfs/QmdxCp5eGu65n4tsQ3D317DcgGuJY1Rb17aba7n7wpqB8D"]},"temp-contracts/balancer/IndexPool.sol":{"keccak256":"0xce6c971161e6e45d910946c5919e4a5016e3bbd8537c0011b6d95f2beec6efb1","license":"GPL-3.0","urls":["bzz-raw://0ed92d206ec8a695f794bfab0798239da71f38d89f51fa24a6af482fd6774063","dweb:/ipfs/QmPcSD3Fe7VW1nQJeY3hjqngTaoYsLaVq8YSUViBLQy5sU"]},"temp-contracts/interfaces/IFlashLoanRecipient.sol":{"keccak256":"0xfb2bd666d15c2c4d68b703b296848821f455c6a30b6c570b17726e0bd9569855","license":"GPL-3.0","urls":["bzz-raw://b56e4c6df7c9fddcf618820cfbd24b782be7b85c279b8f43db62d2a7eca30bb3","dweb:/ipfs/QmYY1nLEixtrC3jLftm8nDYHtUnB6o66eG2CkbNzVLUgZe"]},"temp-contracts/interfaces/IIndexPool.sol":{"keccak256":"0x5ce6544e5a8fc71fb8197cd12ffc64bc8ea6a00ef356c97ad87b3fa858d86fdc","license":"GPL-3.0","urls":["bzz-raw://6ea19344b741ef9120772e8b66a5d5feac496b549f95ba5f0ecb47ff182549cf","dweb:/ipfs/QmSY8JxwqMLt6K8Vc6cnnfFPPxe5bbJtojntfZBHAgbVzt"]}},"version":1},"version":1,"checkPoints":[]}