{"address":"0x46aD1f26BA96e619447451fFB93E7f0a4b6674CE","name":"","metadata":{"compiler":{"version":"0.5.17+commit.d19bba13"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"internalType":"bytes32","name":"_msgHash","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ecrecovery","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"_msgHash","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"address","name":"_signer","type":"address"}],"name":"ecverify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"message","type":"string"}],"name":"getMsgHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Amit","details":"Singature Verifier ","methods":{"ecrecovery(bytes32,uint8,bytes32,bytes32)":{"details":"Function to Recover signer address from a message by using his signature","params":{"_msgHash":"bytes32 message, the hash is the signed message. What is recovered is the signer address.","r":"signature section","s":"Signtaure salt      ","v":"singnature type 27/28, 0/1"}},"ecverify(bytes32,uint8,bytes32,bytes32,address)":{"details":"function to verify the signature with given input signer","params":{"_msgHash":"hashed messages","_signer":"is the address the user who signed the message","r":"signature section","s":"Signtaure salt","v":"singnature type 27/28, 0/1"}}},"title":"ECVerify"},"userdoc":{"methods":{"ecrecovery(bytes32,uint8,bytes32,bytes32)":{"notice":"The signature format is a compact form of: {bytes32 r}{bytes32 s}{uint8 v}  Compact means, uint8 is not padded to 32 bytes. "}}}},"settings":{"compilationTarget":{"browser/ECVerify.sol":"ECVerify"},"evmVersion":"istanbul","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/ECVerify.sol":{"keccak256":"0xfc2215ccacb7a75da3c3548811cdbe108fe959047d6638298989f85c5e171a09","urls":["bzz-raw://5c807a652bedf18c6d2e95829c1f44cc120222fb6249594c6d43800390c21471","dweb:/ipfs/QmWFFLewBZ6g4GLAb7gzKvLBDCXoa48iQDf4VJMcPxqp9r"]}},"version":1},"version":1,"checkPoints":[]}