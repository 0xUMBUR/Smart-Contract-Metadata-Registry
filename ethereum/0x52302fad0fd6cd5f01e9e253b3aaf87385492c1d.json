{"address":"0x52302fAd0Fd6cD5f01E9e253B3aAF87385492c1D","name":"","metadata":{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"address","name":"fromDelegate","type":"address"},{"indexed":true,"internalType":"address","name":"toDelegate","type":"address"}],"name":"DelegateChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":false,"internalType":"uint256","name":"previousBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"}],"name":"DelegateVotesChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DELEGATION_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DOMAIN_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"rawAmount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint32","name":"","type":"uint32"}],"name":"checkpoints","outputs":[{"internalType":"uint32","name":"fromBlock","type":"uint32"},{"internalType":"uint256","name":"votes","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"}],"name":"delegate","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"delegatee","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"delegateBySig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"delegates","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getCurrentVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"getPriorVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"lockToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lockedTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"numCheckpoints","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"rawAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"superAdmin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"rawAmount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"src","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"rawAmount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"unlockToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"params":{"account":"The address of the account holding the funds","spender":"The address of the account spending the funds"},"returns":{"_0":"The number of tokens approved"}},"approve(address,uint256)":{"details":"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)","params":{"rawAmount":"The number of tokens that are approved (2^256-1 means infinite)","spender":"The address of the account which may transfer tokens"},"returns":{"_0":"Whether or not the approval succeeded"}},"balanceOf(address)":{"params":{"account":"The address of the account to get the balance of"},"returns":{"_0":"The number of tokens held"}},"burnToken(address,uint256)":{"details":"balance should be greater than amount. function will revert will balance is less than amount.","params":{"amount":"number of tokens to burn.","holder":"the addrress of token holder."},"returns":{"_0":"true when burnToken succeeded."}},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"delegate(address)":{"params":{"delegatee":"The address to delegate votes to"}},"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":{"params":{"delegatee":"The address to delegate votes to","expiry":"The time at which to expire the signature","nonce":"The contract state required to match the signature","r":"Half of the ECDSA signature pair","s":"Half of the ECDSA signature pair","v":"The recovery byte of the signature"}},"getCurrentVotes(address)":{"params":{"account":"The address to get votes balance"},"returns":{"_0":"The number of current votes for `account`"}},"getPriorVotes(address,uint256)":{"details":"Block number must be a finalized block or else this function will revert to prevent misinformation.","params":{"account":"The address of the account to check","blockNumber":"The block number to get the vote balance at"},"returns":{"_0":"The number of votes the account had as of the given block"}},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"lockToken(address,uint256)":{"details":"balance should be greater than amount. function will revert will balance is less than amount.","params":{"amount":"number of tokens to burn.","holder":"the addrress of token holder."},"returns":{"_0":"true when lockToken succeeded."}},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"params":{"deadline":"The time at which to expire the signature","owner":"The address to approve from","r":"Half of the ECDSA signature pair","rawAmount":"The number of tokens that are approved (2^256-1 means infinite)","s":"Half of the ECDSA signature pair","spender":"The address to be approved","v":"The recovery byte of the signature"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transfer(address,uint256)":{"params":{"dst":"The address of the destination account","rawAmount":"The number of tokens to transfer"},"returns":{"_0":"Whether or not the transfer succeeded"}},"transferFrom(address,address,uint256)":{"params":{"dst":"The address of the destination account","rawAmount":"The number of tokens to transfer","src":"The address of the source account"},"returns":{"_0":"Whether or not the transfer succeeded"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unlockToken(address,uint256)":{"details":"locked balance should be greater than amount. function will revert will locked balance is less than amount.","params":{"amount":"number of tokens to burn.","holder":"the addrress of token holder."},"returns":{"_0":"true when unLockToken succeeded."}}},"version":1},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"The standard EIP-20 approval event"},"DelegateChanged(address,address,address)":{"notice":"An event thats emitted when an account changes its delegate"},"DelegateVotesChanged(address,uint256,uint256)":{"notice":"An event thats emitted when a delegate account's vote balance changes"},"Transfer(address,address,uint256)":{"notice":"The standard EIP-20 transfer event"}},"kind":"user","methods":{"DELEGATION_TYPEHASH()":{"notice":"The EIP-712 typehash for the delegation struct used by the contract"},"DOMAIN_TYPEHASH()":{"notice":"The EIP-712 typehash for the contract's domain"},"PERMIT_TYPEHASH()":{"notice":"The EIP-712 typehash for the permit struct used by the contract"},"allowance(address,address)":{"notice":"Get the number of tokens `spender` is approved to spend on behalf of `account`"},"approve(address,uint256)":{"notice":"Approve `spender` to transfer up to `amount` from `src`"},"balanceOf(address)":{"notice":"Get the number of tokens held by the `account`"},"burnToken(address,uint256)":{"notice":"burn the token of any token holder."},"checkpoints(address,uint32)":{"notice":"A record of votes checkpoints for each account, by index"},"constructor":{"notice":"Construct a new UFARM token"},"decimals()":{"notice":"EIP-20 token decimals for this token"},"delegate(address)":{"notice":"Delegate votes from `msg.sender` to `delegatee`"},"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Delegates votes from signatory to `delegatee`"},"delegates(address)":{"notice":"A record of each accounts delegate"},"getCurrentVotes(address)":{"notice":"Gets the current votes balance for `account`"},"getPriorVotes(address,uint256)":{"notice":"Determine the prior number of votes for an account as of a block number"},"lockToken(address,uint256)":{"notice":"lock the token of any token holder."},"name()":{"notice":"EIP-20 token name for this token"},"nonces(address)":{"notice":"A record of states for signing / validating signatures"},"numCheckpoints(address)":{"notice":"The number of checkpoints for each account"},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Triggers an approval from owner to spends"},"symbol()":{"notice":"EIP-20 token symbol for this token"},"totalSupply()":{"notice":"Total number of tokens in circulation"},"transfer(address,uint256)":{"notice":"Transfer `amount` tokens from `msg.sender` to `dst`"},"transferFrom(address,address,uint256)":{"notice":"Transfer `amount` tokens from `src` to `dst`"},"unlockToken(address,uint256)":{"notice":"unLock the token of any token holder."}},"version":1}},"settings":{"compilationTarget":{"contracts/UnifarmToken.sol":"UnifarmToken"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/UnifarmToken.sol":{"keccak256":"0xa0900d30292f0ccc6be9dcf5962a14b804f5b59ec95d28bbe388ab9e02ee8cb1","license":"MIT","urls":["bzz-raw://e3562900229cb5ad4403b0efe33006017e23deb2cc7591ede5553db9508a6882","dweb:/ipfs/QmVf6voDRrnDsKXJEqewTTWeSmzZnE3kAiAzuZvdai9uwB"]},"contracts/access/Context.sol":{"keccak256":"0x5d46366ff0d5b986bebf5ee0acc82f6ccd9a2ea05b174824fb7fb64097c13fba","license":"MIT","urls":["bzz-raw://e09798c2ccee3832771d63fe97b7a0d57298ec7bff759acbe0bea9c16875e5b2","dweb:/ipfs/Qme8pi2PH1VZsdRqxoHkqqhYU9e1cYHwEzrqhLxRioE6Hc"]},"contracts/access/Ownable.sol":{"keccak256":"0x97502562b26142568d51374a7e27dcfa5320e575880d5b3a8a3f398e5ca09a6d","license":"MIT","urls":["bzz-raw://97d1399e320a25c9429e6c510f76658d4550e150160a369d4bb906757aaa5f57","dweb:/ipfs/Qma38EmGQVLaG5ZL73F8QRce5q1qbuTSdzChuZXc4WeLgm"]},"contracts/interfaces/IERC20.sol":{"keccak256":"0x948218495ec7cb17610fcfa6d31f2fc4b97c9d62a48215dfeecff9377b457d34","license":"MIT","urls":["bzz-raw://d3213638ae8feb6f03745c11c6e4890541fb6fe7f49e2a4e44c641b6111a45ac","dweb:/ipfs/QmSW3RKn3nXeJLnhU5dNuoNMxQJCsNSyCKeatwCsKVfn7N"]},"contracts/libraries/SafeMath.sol":{"keccak256":"0xcf763c5f2369ee8c214b7af53bc3b746bb6348cdfc76291cb208b85eb42a0905","license":"MIT","urls":["bzz-raw://4b5a85eee391566b89ceccc3a0658eca771d759f39c2ae850cded7b53d6336da","dweb:/ipfs/QmfVdcu1aCDfKn7ZGdBXPrkx34wqhYTTzDYKsBi4jdG4Wh"]},"contracts/security/Pausable.sol":{"keccak256":"0x9e227bf4f6cc934150acd20eb6d44f59f5e168c85571bcab9bf4153bb460d855","license":"MIT","urls":["bzz-raw://863c6a46da4438ebd783a9d581fdf519e8380b3715222fa3c1ce1d22ed53a3c1","dweb:/ipfs/Qmf9sXb5LtGjhavkCU2pxn5fZMWPZwvFJosehvuQ55dWou"]}},"version":1},"version":1,"checkPoints":[]}