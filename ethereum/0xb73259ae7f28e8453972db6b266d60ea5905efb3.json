{"address":"0xB73259ae7F28E8453972db6B266D60ea5905efb3","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_curve","type":"address"},{"internalType":"address","name":"_transiton","type":"address"},{"internalType":"uint256[3]","name":"_curveParameters","type":"uint256[3]"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_sybol","type":"string"},{"internalType":"address","name":"_underlyingCollateral","type":"address"},{"internalType":"uint256","name":"_tokenThreshold","type":"uint256"},{"internalType":"uint256","name":"_minimumTokenThreshold","type":"uint256"},{"internalType":"uint256","name":"_thresholdTimeout","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"a","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"b","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokens","type":"uint256"}],"name":"buy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"c","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"collateralInstance","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"curveInstance","outputs":[{"internalType":"contract I_Curve","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokens","type":"uint256"}],"name":"getBuyCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCollateralInstance","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurve","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokens","type":"uint256"}],"name":"getSellAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenStatus","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTransitionThresholds","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"marketTransfterInstance","outputs":[{"internalType":"contract I_MarketTransition","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumTokenThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokens","type":"uint256"}],"name":"sell","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"setTransition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"thresholdTimeout","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transitionCompleated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"transitionConditionsMet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Veronica Coutts @vonnie610 (twitter) @VeronicaLC (GitLab) ","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"buy(uint256)":{"details":"This function will be blocked after the market has transitioned        to uniswap.","params":{"_tokens":": The number of tokens to buy."}},"constructor":{"params":{"_curve":": The address of the curve implementation. ","_curveParameters":": The curve \"settings\" that will be used in the         curve instance in order to determine the prices of the token.         For more information please see the curve contract docs. ","_minimumTokenThreshold":": This minimum token threshold is a safty        catch for it the threshold is not met before expiry, this min        threshold can still force the market into uniswap. If you only        want to move acress at your threshold, simply set this vaule         to be the same as the threshold. ","_name":": The name of the token.","_sybol":": The symbol for the token.","_thresholdTimeout":": Once this timeout is reached the curve will         check against the min threshold for transition. When this         timeout is reached, the curve will operate as normal.","_tokenThreshold":": The transition threshold for the token in         tokens. As the value of the tokens is determanistic (with the         bonding curve enforcing a price) the threshold for when the         token can move to the free market can be expressed in tokens.","_transiton":": The address of the transition implementation.","_underlyingCollateral":": The addresss of the underlying collateral        for the tokens. I.e the currency for the price of the token.         Recomended to use a stable coin such as DAI to ensure a stable        price for your token. "}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getBuyCost(uint256)":{"details":"This function uses the curve library in order to determine the         price of the token. ","params":{"_tokens":": The number of tokens someone would like to buy."},"returns":{"_0":"uint256: The cost (in collateral) for the number of tokens."}},"getCurve()":{"details":"The variables returned are used in the curves calculations.         Below is the current version of the equation being used:        a/3(x_1^3 - x_0^3) + b/2(x_1^2 - x_0^2) + c(x_1 - x_0)","returns":{"_0":"uint256: a","_1":"uint256: b","_2":"uint256: c"}},"getSellAmount(uint256)":{"details":"This function uses the curve library in order to determine the         price of the token. ","params":{"_tokens":": The number of tokens someone would like to sell."},"returns":{"_0":"uint256: The reward (in collateral) for the number of tokens."}},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"sell(uint256)":{"details":"This function will be blocked after the market has transitioned        to uniswap.","params":{"_tokens":": The number fo tokens to sell."}},"setTransition()":{"details":"Can only be called by the market transition contract."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},"title":"Token"},"userdoc":{"methods":{"buy(uint256)":{"notice":"This function will check if the buy will push the token over its        threshold, thus moving the token to uniswap. If the buy will         push the supply in excess of the threshold, only the tokens         needed to reach the threshold will be bought. "},"getCurve()":{"notice":"This function returns the variables that determine the behaviour        of the curve. "},"getTransitionThresholds()":{"notice":"Returns the transition information for this token. "},"sell(uint256)":{"notice":"This function checks if the threshold has been reached, but         most importantly in the context of a sell is checking if the         token has reached its expiring time. "},"setTransition()":{"notice":"Allows the market transition contract to set the transitioned         state of this token to true. "}},"notice":"This token contract enables an IBCO (Initial Bonding Curve Offering)        as a mechanism to launch a token into the open market without having        to raise the funds in a traditional manner.        This product is a beta. Use at your own risk."}},"settings":{"compilationTarget":{"BondingCurveFactory_flat.sol":"Token"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"BondingCurveFactory_flat.sol":{"keccak256":"0x71421f42853506418ef1ed8463545cd0b4d98f24b8b9910020943541cbd2890a","urls":["bzz-raw://f2c11f1993b0762070e897886cdfa25de780df51623afeaa2870385901cefd39","dweb:/ipfs/QmYHzaRMZsKYd4UWodgXy8XopzFBmcNYejHhrusFubbQgn"]}},"version":1},"version":1,"checkPoints":[]}