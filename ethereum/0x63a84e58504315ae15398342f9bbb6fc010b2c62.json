{"address":"0x63a84e58504315aE15398342f9Bbb6Fc010B2C62","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"capitalProvider","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"DepositMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"payer","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"name":"InterestCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"payer","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PrincipalCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"creditline","type":"address"},{"indexed":false,"internalType":"int256","name":"amount","type":"int256"}],"name":"PrincipalWrittendown","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ReserveFundsCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"capitalProvider","type":"address"},{"indexed":false,"internalType":"uint256","name":"userAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"reserveAmount","type":"uint256"}],"name":"WithdrawalMade","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable__init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"__PauserPausable__init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"assets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"collectInterestRepayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"collectPrincipalRepayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"config","outputs":[{"internalType":"contract GoldfinchConfig","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"creditlineAddress","type":"address"},{"internalType":"int256","name":"writedownDelta","type":"int256"}],"name":"distributeLosses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"contract GoldfinchConfig","name":"_config","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sharePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Goldfinch","kind":"dev","methods":{"collectInterestRepayment(address,uint256)":{"params":{"amount":"the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.","from":"The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`."}},"collectPrincipalRepayment(address,uint256)":{"params":{"amount":"the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.","from":"The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`."}},"deposit(uint256)":{"params":{"amount":"The amount of USDC to deposit"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"initialize(address,address)":{"params":{"_config":"The address of the GoldfinchConfig contract","owner":"The address of who should have the \"OWNER_ROLE\" of this contract"}},"pause()":{"details":"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"transferFrom(address,address,uint256)":{"params":{"amount":"the amount of USDC to move to the Pool Requirements:  - The caller must be the Credit Desk. Not even the owner can call this function.","from":"The address to take the USDC from. Implicitly, the Pool  must be authorized to move USDC on behalf of `from`.","to":"The address that the USDC should be moved to"}},"unpause()":{"details":"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"},"withdraw(uint256)":{"params":{"amount":"The amount of USDC to withdraw"}}},"title":"Goldfinch's Pool contract","version":1},"userdoc":{"kind":"user","methods":{"collectInterestRepayment(address,uint256)":{"notice":"Collects `amount` USDC in interest from `from` and sends it to the Pool.  This also increases the share price accordingly. A portion is sent to the Goldfinch Reserve address"},"collectPrincipalRepayment(address,uint256)":{"notice":"Collects `amount` USDC in principal from `from` and sends it to the Pool.  The key difference from `collectInterestPayment` is that this does not change the sharePrice.  The reason it does not is because the principal is already baked in. ie. we implicitly assume all principal  will be returned to the Pool. But if borrowers are late with payments, we have a writedown schedule that adjusts  the sharePrice downwards to reflect the lowered confidence in that borrower."},"deposit(uint256)":{"notice":"Deposits `amount` USDC from msg.sender into the Pool, and returns you the equivalent value of FIDU tokens"},"initialize(address,address)":{"notice":"Run only once, on initialization"},"transferFrom(address,address,uint256)":{"notice":"Moves `amount` USDC from `from`, to `to`."},"withdraw(uint256)":{"notice":"Withdraws `amount` USDC from the Pool to msg.sender, and burns the equivalent value of FIDU tokens"}},"notice":"Main entry point for LP's (a.k.a. capital providers)  Handles key logic for depositing and withdrawing funds from the Pool","version":1}},"settings":{"compilationTarget":{"contracts/protocol/Pool.sol":"Pool"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol":{"keccak256":"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e","urls":["bzz-raw://1332ee1d2b096456bf2e5795b5871d0fed47be6a31c9a2f2cef9206a299565ea","dweb:/ipfs/Qmdu1847Y4UL3gTjbLUManMGfxYEoyGPSodM3Br89SKzwx"]},"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol":{"keccak256":"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721","urls":["bzz-raw://5cf7c208583d4d046d75bd99f5507412ab01cce9dd9f802ce9768a416d93ea2f","dweb:/ipfs/QmcQS1BBMPpVEkXP3qzwSjxHNrqDek8YeR7xbVWDC9ApC7"]},"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol":{"keccak256":"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86","urls":["bzz-raw://944779923ae00addaad98671de2303268765d53f1b0d66076280585edd084862","dweb:/ipfs/QmRtRFCkvsWD3c6WBpAh3wgMZKXBaFfRAvB76TsVFiUdEw"]},"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol":{"keccak256":"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296","urls":["bzz-raw://e7e8b526a6839e5ba14f0d23a830387fec47f7043ce01d42c9f285b709a9d080","dweb:/ipfs/QmXmhhFmX5gcAvVzNiDPAGA35iHMPNaYtQkACswRHBVTNw"]},"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad","urls":["bzz-raw://0055fa88138cd1c3c6440370f8580f85857f8fe9dec41c99af9eafbeb8d9c3ce","dweb:/ipfs/QmX1xDh8vwGLLCH8ti45eXjQ7Wcxv1FEGTR3jkFnd5Nv6F"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol":{"keccak256":"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b","urls":["bzz-raw://4f089d954b3ecaa26949412fe63e9a184b056562c6c13dd4a0529a5d9a2e685a","dweb:/ipfs/QmVK5iCNAMcEJQxT59bsC5E53JQASDQPU6khHox3d5ZXCn"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol":{"keccak256":"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1","urls":["bzz-raw://b020d65f592c1715bc3d5799ad835cd975ef7d314f340f27603fb99ad86a0427","dweb:/ipfs/QmQoGZmzE5aDTMGJM4BW77eraerfTSV9Rs8wykpQ42i1in"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol":{"keccak256":"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006","urls":["bzz-raw://a737c60474c063efc28e5922b6a1d073588c010eb67f883273d3ec29d8e52d6b","dweb:/ipfs/QmWCeqeZhR45S1mcjPRYEMy1DCHMy9sXDfwYLPycFRh2Nk"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882","urls":["bzz-raw://5916e664a17b3fdbdc311579705bad74f433769c340346c371db2ecfa8427d24","dweb:/ipfs/QmYNLuiPo4iRPWFJriVgqPELRUrFBFLpp5YnMMmqQ8zhBh"]},"contracts/interfaces/ICreditDesk.sol":{"keccak256":"0x4668d0e985bd546f80531fe38df829fe25b9e3a3252e0af009dcfc55c877dfbd","license":"MIT","urls":["bzz-raw://e81418a578ef88168511d304fad5d858cd082047d3e656fc804dfb180750568f","dweb:/ipfs/QmPuzDWuEZExtvnXXV8ADrHxGopDbv4d9hpK8Cu5nMCmWT"]},"contracts/interfaces/IERC20withDec.sol":{"keccak256":"0x7b5fb02e023b6006a5199992f242caf23f64240c91e625f1390d6ca421b59531","license":"MIT","urls":["bzz-raw://63dcca43b583209eb4a57c80a1d167f6c96fe3262eff955983d4fcdbfd66a62d","dweb:/ipfs/QmVHcjcFF1dZDvKUnrtDuFrJvBLosCMqXpnfQP7YuBVH46"]},"contracts/interfaces/IFidu.sol":{"keccak256":"0xafc7c4d5c4ec31e980c47b67e39dd175d68f4e9b89d82e8271f20ca45b256313","license":"MIT","urls":["bzz-raw://09f6f83d364c1f7b7ad9755777f1b7369f764bb4118688336fa67826ea7d4d2d","dweb:/ipfs/QmUdA8TvkysY96VNPZUFkh3QZXuxgrhUEm1He7cJC8Fvb3"]},"contracts/interfaces/IPool.sol":{"keccak256":"0x37a612665b8b4f11d14e64c724a12902819747c658879cec7adc11e89794c842","license":"MIT","urls":["bzz-raw://49af533c9875406f9ce64b438a216496a2d85e8b22c7221283a7765a3d3edaad","dweb:/ipfs/QmYUZJY3Nmq9aGS4sQ65TtF2iuwSpPKaG2DtGFKZRCuAyr"]},"contracts/protocol/BaseUpgradeablePausable.sol":{"keccak256":"0x75912e247a681928fc8b9a0d1dbf1fedd838b6b236b6d4a1fe932837a40c8fd7","license":"MIT","urls":["bzz-raw://cf08e032ff5cc6db1dc1a689ac81b0bebe4ccfbc83ae311ac5b3e22b936d2b3d","dweb:/ipfs/QmfAcZBgUWzYusQDZGwFrL9cqtpRjUUkbWQXXjA48ABPYH"]},"contracts/protocol/ConfigHelper.sol":{"keccak256":"0xdcb1bd707974e93ca6dec1869641663d048c91ff232d71b977a198e2f7eccb33","license":"MIT","urls":["bzz-raw://69b383714d32be53aa4f4527a6730cb5256b13405733a99faf99caf26730d680","dweb:/ipfs/QmdMZQ7KesyruiV1A7cZbcqHPUcszjqU9VaXh1ZxFDKQBV"]},"contracts/protocol/ConfigOptions.sol":{"keccak256":"0x3a204634920422f9fe30ddf63512876a8941bab7789a0b18a369f05802c5faf4","license":"MIT","urls":["bzz-raw://bc78eecbc50817efc1f3cf08aa3e9f5c153e458bfb16860d0e230b717f72926d","dweb:/ipfs/QmUH9rcZ6DC1KTz7JjC6RduvrSfvALYuggpYMKTC2kk7RQ"]},"contracts/protocol/GoldfinchConfig.sol":{"keccak256":"0xcaa32f2ca21920172d14f22a949f96c2cc4a20870922bd0a03287c2916398504","license":"MIT","urls":["bzz-raw://fb1f24514f55892710c138d79d6274a7c87cf50c5ec430745b86b3c6a7a65422","dweb:/ipfs/QmdxhN2SZ4xMmu7ikdJ3VGegAnUJLHMN2v6iikPQXeVzeg"]},"contracts/protocol/PauserPausable.sol":{"keccak256":"0x07995096f020b640e9a5f6cd0ca4c688ae5ab12a64a2c010d2b0960eea436e8e","license":"MIT","urls":["bzz-raw://f346eb9d2085c107632d9e99d12ef236286dda272173785106abddb51af4048b","dweb:/ipfs/QmYBZmyadeLBNmd2xUyQWrR9e8iMo87bnvwgTPyv2mN9Qz"]},"contracts/protocol/Pool.sol":{"keccak256":"0x99747679666c49a7e0b4dad92d8e2892a6f6d21641024d50eb70a4c55f0d37c2","license":"MIT","urls":["bzz-raw://1bbef1cf9ff1396429275c595a78a156afe2de10c37089473fbcb34ed252ab28","dweb:/ipfs/QmRkhDC4pHzNVf2S5WyzD7HgUK2uFRihDWckie9fYEpkFp"]}},"version":1},"version":1,"checkPoints":[]}