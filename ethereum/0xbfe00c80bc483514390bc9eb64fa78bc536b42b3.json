{"address":"0xBfe00c80Bc483514390BC9Eb64fa78BC536b42B3","name":"","metadata":{"compiler":{"version":"0.7.5+commit.eb77ed08"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"string","name":"_suffix","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"messageId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"FailedMessageFixed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"nativeToken","type":"address"},{"indexed":true,"internalType":"address","name":"bridgedToken","type":"address"}],"name":"NewTokenRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":false,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"bool","name":"disabled","type":"bool"}],"name":"TokenBridgingDisabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"bool","name":"disabled","type":"bool"}],"name":"TokenExecutionDisabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":true,"internalType":"bytes32","name":"messageId","type":"bytes32"}],"name":"TokensBridged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":true,"internalType":"bytes32","name":"messageId","type":"bytes32"}],"name":"TokensBridgingInitiated","type":"event"},{"inputs":[],"name":"bridgeContract","outputs":[{"internalType":"contract IAMB","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_nativeToken","type":"address"}],"name":"bridgedTokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"string[]","name":"_tokenURIs","type":"string[]"}],"name":"deployAndHandleBridgedNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"bool","name":"_disable","type":"bool"}],"name":"disableTokenBridging","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"bool","name":"_disable","type":"bool"}],"name":"disableTokenExecution","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_messageId","type":"bytes32"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"fixFailedMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"fixMediatorBalanceERC1155","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"}],"name":"fixMediatorBalanceERC721","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwardingRulesManager","outputs":[{"internalType":"contract NFTForwardingRulesManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gasLimitManager","outputs":[{"internalType":"contract SelectorTokenGasLimitManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBridgeInterfacesVersion","outputs":[{"internalType":"uint64","name":"major","type":"uint64"},{"internalType":"uint64","name":"minor","type":"uint64"},{"internalType":"uint64","name":"patch","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getBridgeMode","outputs":[{"internalType":"bytes4","name":"_data","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"string[]","name":"_tokenURIs","type":"string[]"}],"name":"handleBridgedNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"handleNativeNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_bridgeContract","type":"address"},{"internalType":"address","name":"_mediatorContract","type":"address"},{"internalType":"address","name":"_gasLimitManager","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_imageERC721","type":"address"},{"internalType":"address","name":"_imageERC1155","type":"address"},{"internalType":"address","name":"_forwardingRulesManager","type":"address"}],"name":"initialize","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isBridgedTokenDeployAcknowledged","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isRegisteredAsNativeToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenBridgingAllowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenExecutionAllowed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mediatorContractOnOtherSide","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"mediatorOwns","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_messageId","type":"bytes32"}],"name":"messageFixed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"migrationTo3_0_0_deployed_tokens_fix","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_bridgedToken","type":"address"}],"name":"nativeTokenAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC721","name":"token","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"relayToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC721","name":"token","type":"address"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"relayToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_messageId","type":"bytes32"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"requestFailedMessageFix","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_bridgeContract","type":"address"}],"name":"setBridgeContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"}],"name":"setCustomMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_nativeToken","type":"address"},{"internalType":"address","name":"_bridgedToken","type":"address"}],"name":"setCustomTokenAddressPair","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_manager","type":"address"}],"name":"setForwardingRulesManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_manager","type":"address"}],"name":"setGasLimitManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_mediatorContract","type":"address"}],"name":"setMediatorContractOnOtherSide","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_image","type":"address"}],"name":"setTokenImageERC1155","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_image","type":"address"}],"name":"setTokenImageERC721","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenImageERC1155","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenImageERC721","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Home side implementation for multi-token ERC721 mediator intended to work on top of AMB bridge. It is designed to be used as an implementation contract of EternalStorageProxy contract.","kind":"dev","methods":{"bridgeContract()":{"details":"Get the AMB interface for the bridge contract address","returns":{"_0":"AMB interface for the bridge contract address"}},"bridgedTokenAddress(address)":{"details":"Retrieves address of the bridged token contract associated with a specific native token contract on the other side.","params":{"_nativeToken":"address of the native token contract on the other side."},"returns":{"_0":"address of the deployed bridged token contract."}},"deployAndHandleBridgedNFT(address,string,string,address,uint256[],uint256[],string[])":{"details":"Handles the bridged token for the first time, includes deployment of new ERC721TokenProxy contract.","params":{"_name":"name of the native token, name suffix will be appended, if empty, symbol will be used instead.","_recipient":"address that will receive the tokens.","_symbol":"symbol of the bridged token, if empty, name will be used instead.","_token":"address of the native ERC721 token on the other side.","_tokenIds":"unique ids of the bridged tokens.","_tokenURIs":"URIs for the bridged token instances.","_values":"amounts of bridged tokens. Should be empty list for ERC721."}},"disableTokenBridging(address,bool)":{"details":"Disabled bridging operations for the particular token.","params":{"_disable":"true for disabling.","_token":"address of the token contract, or address(0) for configuring the global restriction."}},"disableTokenExecution(address,bool)":{"details":"Disabled execution operations for the particular token.","params":{"_disable":"true for disabling.","_token":"address of the token contract, or address(0) for configuring the global restriction."}},"fixFailedMessage(bytes32,address,address,uint256[],uint256[])":{"details":"Handles the request to fix transferred assets which bridged message execution failed on the other network. Compares the reconstructed message checksum with the original one. Revert if message params were altered.","params":{"_messageId":"id of the message which execution failed on this side of the bridge.","_sender":"address of the tokens sender on this side of the bridge.","_token":"address of the bridged token on this side of the bridge.","_tokenIds":"ids of the sent tokens.","_values":"amounts of tokens sent."}},"fixMediatorBalanceERC1155(address,address,uint256[],uint256[])":{"details":"Allows to send to the other network some ERC1155 token that can be forced into the contract without the invocation of the required methods. Before calling this method, it must be carefully investigated how imbalance happened in order to avoid an attempt to steal the funds from a token with double addresses.","params":{"_receiver":"the address that will receive the token on the other network.","_token":"address of the token contract.","_tokenIds":"unique ids of the bridged tokens.","_values":"corresponding amounts of the bridged tokens."}},"fixMediatorBalanceERC721(address,address,uint256[])":{"details":"Allows to send to the other network some ERC721 token that can be forced into the contract without the invocation of the required methods. (e. g. regular transferFrom without a call to onERC721Received) Before calling this method, it must be carefully investigated how imbalance happened in order to avoid an attempt to steal the funds from a token with double addresses.","params":{"_receiver":"the address that will receive the token on the other network.","_token":"address of the token contract.","_tokenIds":"unique ids of the bridged tokens."}},"forwardingRulesManager()":{"details":"Retrieves an address of the forwarding rules manager contract.","returns":{"_0":"address of the forwarding rules manager contract."}},"gasLimitManager()":{"details":"Retrieves an address of the gas limit manager contract.","returns":{"_0":"address of the gas limit manager contract."}},"getBridgeInterfacesVersion()":{"details":"Tells the bridge interface version that this contract supports.","returns":{"major":"value of the version","minor":"value of the version","patch":"value of the version"}},"getBridgeMode()":{"details":"Tells the bridge mode that this contract supports.","returns":{"_data":"4 bytes representing the bridge mode"}},"handleBridgedNFT(address,address,uint256[],uint256[],string[])":{"details":"Handles the bridged token for the already registered token pair. Checks that the bridged token is inside the execution limits and invokes the Mint accordingly.","params":{"_recipient":"address that will receive the tokens.","_token":"address of the native ERC721 token on the other side.","_tokenIds":"unique ids of the bridged tokens.","_tokenURIs":"URIs for the bridged token instances.","_values":"amounts of bridged tokens. Should be empty list for ERC721."}},"handleNativeNFT(address,address,uint256[],uint256[])":{"details":"Handles the bridged token that are native to this chain. Checks that the bridged token is inside the execution limits and invokes the Unlock accordingly.","params":{"_recipient":"address that will receive the tokens.","_token":"address of the native ERC721 token contract.","_tokenIds":"unique ids of the bridged tokens.","_values":"amounts of bridged tokens. Should be empty list for ERC721."}},"initialize(address,address,address,address,address,address,address)":{"details":"Stores the initial parameters of the mediator.","params":{"_bridgeContract":"the address of the AMB bridge contract.","_forwardingRulesManager":"address of the NFTForwardingRulesManager contract that will be used for managing lane permissions.","_gasLimitManager":"the gas limit manager contract address.","_imageERC1155":"address of the ERC1155 token image.","_imageERC721":"address of the ERC721 token image.","_mediatorContract":"the address of the mediator contract on the other network.","_owner":"address of the owner of the mediator contract."}},"isBridgedTokenDeployAcknowledged(address)":{"details":"Checks if for a given native token, the deployment of its bridged alternative was already acknowledged.","params":{"_token":"address of native token contract."},"returns":{"_0":"true, if bridged token was already deployed."}},"isRegisteredAsNativeToken(address)":{"details":"Checks if a given token is a bridged token that is native to this side of the bridge.","params":{"_token":"address of token contract."},"returns":{"_0":"message id of the send message."}},"isTokenBridgingAllowed(address)":{"details":"Tells if the bridging operations for the particular token are allowed.","params":{"_token":"address of the token contract."},"returns":{"_0":"true, if bridging operations are allowed."}},"isTokenExecutionAllowed(address)":{"details":"Tells if the execution operations for the particular token are allowed.","params":{"_token":"address of the token contract."},"returns":{"_0":"true, if execution operations are allowed."}},"isTokenRegistered(address)":{"details":"Checks if specified token was already bridged at least once and it is registered in the Omnibridge.","params":{"_token":"address of the token contract."},"returns":{"_0":"true, if token was already bridged."}},"mediatorContractOnOtherSide()":{"details":"Tells the mediator contract address from the other network.","returns":{"_0":"the address of the mediator contract."}},"mediatorOwns(address,uint256)":{"details":"Tells amount of owned tokens recorded at this mediator. More strict than regular token.ownerOf()/token.balanceOf() checks, since does not take into account forced tokens.","params":{"_token":"address of token contract.","_tokenId":"id of the new owned token."},"returns":{"amount":"of owned tokens, 0 or 1 for ERC721 NFTs."}},"messageFixed(bytes32)":{"details":"Tells if a message sent to the AMB bridge has been fixed.","returns":{"_0":"bool indicating the status of the message."}},"nativeTokenAddress(address)":{"details":"Retrieves address of the native token contract associated with a specific bridged token contract.","params":{"_bridgedToken":"address of the created bridged token contract on this side."},"returns":{"_0":"address of the native token contract on the other side of the bridge."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"ERC1155 transfer callback function.","params":{"_data":"additional transfer data, can be used for passing alternative receiver address.","_from":"address of token sender.","_tokenIds":"unique ids of the received tokens.","_values":"amounts of received tokens."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"ERC1155 transfer callback function.","params":{"_data":"additional transfer data, can be used for passing alternative receiver address.","_from":"address of token sender.","_tokenId":"id of the transferred token.","_value":"amount of received tokens."}},"onERC721Received(address,address,uint256,bytes)":{"details":"ERC721 transfer callback function.","params":{"_data":"additional transfer data, can be used for passing alternative receiver address.","_from":"address of token sender.","_tokenId":"id of the transferred token."}},"owner()":{"details":"Tells the address of the owner","returns":{"_0":"the address of the owner"}},"relayToken(address,address,uint256)":{"details":"Initiate the bridge operation for some token from msg.sender. The user should first call Approve method of the ERC721 token.","params":{"_receiver":"address that will receive the token on the other network.","_tokenId":"id of the token to be transferred to the other network.","token":"bridged token contract address."}},"relayToken(address,uint256)":{"details":"Initiate the bridge operation for some token from msg.sender to msg.sender on the other side. The user should first call Approve method of the ERC721 token.","params":{"_tokenId":"id of token to be transferred to the other network.","token":"bridged token contract address."}},"requestFailedMessageFix(bytes32,address,address,uint256[],uint256[])":{"details":"Method to be called when a bridged message execution failed. It will generate a new message requesting to fix/roll back the transferred assets on the other network. It is important to specify parameters very carefully. Please, take exact values from the TokensBridgingInitiated event. Otherwise, execution will revert.","params":{"_messageId":"id of the message which execution failed.","_sender":"address of the tokens sender on the other side.","_token":"address of the bridged token on the other side of the bridge.","_tokenIds":"ids of the sent tokens.","_values":"amounts of tokens sent."}},"setBridgeContract(address)":{"details":"Sets the AMB bridge contract address. Only the owner can call this method.","params":{"_bridgeContract":"the address of the bridge contract."}},"setCustomMetadata(address,string,string)":{"details":"Sets the custom metadata for the given ERC721/ERC1155 token. Only owner can call this method. Useful when original NFT token does not implement neither name() nor symbol() methods.","params":{"_name":"custom name for the token contract.","_symbol":"custom symbol for the token contract.","_token":"address of the token contract."}},"setCustomTokenAddressPair(address,address)":{"details":"Allows to pre-set the bridged token contract for not-yet bridged token. Only the owner can call this method.","params":{"_bridgedToken":"address of the bridged token contract.","_nativeToken":"address of the token contract on the other side that was not yet bridged."}},"setForwardingRulesManager(address)":{"details":"Updates an address of the used forwarding rules manager contract.","params":{"_manager":"address of forwarding rules manager contract."}},"setGasLimitManager(address)":{"details":"Updates an address of the used gas limit manager contract.","params":{"_manager":"address of gas limit manager contract."}},"setMediatorContractOnOtherSide(address)":{"details":"Sets the mediator contract address from the other network. Only the owner can call this method.","params":{"_mediatorContract":"the address of the mediator contract."}},"setTokenImageERC1155(address)":{"details":"Updates address of the used ERC1155 token image. Only owner can call this method.","params":{"_image":"address of the new token image."}},"setTokenImageERC721(address)":{"details":"Updates address of the used ERC721 token image. Only owner can call this method.","params":{"_image":"address of the new token image."}},"tokenImageERC1155()":{"details":"Tells the address of the used ERC1155 token image.","returns":{"_0":"address of the used token image."}},"tokenImageERC721()":{"details":"Tells the address of the used ERC721 token image.","returns":{"_0":"address of the used token image."}},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"newOwner":"the address to transfer ownership to."}}},"title":"HomeNFTOmnibridge","version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/upgradeable_contracts/omnibridge_nft/HomeNFTOmnibridge.sol":"HomeNFTOmnibridge"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/introspection/ERC165.sol":{"keccak256":"0x234cdf2c3efd5f0dc17d32fe65d33c21674ca17de1e945eb60ac1076d7152d96","license":"MIT","urls":["bzz-raw://bd196df6ec4549923b4581fcb4be3d05237b5221067410d0bc34cb76d4174441","dweb:/ipfs/Qmf2vFVgbfpD4FvAhQXkprg9sKSX3TXKRdbQTSjJVEmzWj"]},"@openzeppelin/contracts/introspection/IERC165.sol":{"keccak256":"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d","license":"MIT","urls":["bzz-raw://e3d4e72409e392c7694b6405a0136cf073d8da016df33ef8f9ad195f724ebfea","dweb:/ipfs/QmPGcddKq6CgsiKnxUUif2q76wRqP3dmdQ6bKuHCLmb8Wa"]},"@openzeppelin/contracts/math/SafeMath.sol":{"keccak256":"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f","license":"MIT","urls":["bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f","dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K"]},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"keccak256":"0x5b7b15eedea8c0a311c094730c3f660ba531ce50430404b0f59f3f25f79e307e","license":"MIT","urls":["bzz-raw://83c4f17e2ac436bd7de8cb0b1b8e6564c0dda1b4ecc5988ff854fa11aa1f92ad","dweb:/ipfs/QmcHRWdW8nRRVivBPooyj9223G3RwXR3xY439BvrTJSWQN"]},"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol":{"keccak256":"0xa1bc35b195c04f37aee8b77a2a3b18ce52b37085b6da95d9f22420b85f1275e6","license":"MIT","urls":["bzz-raw://f190e6df96d299b5c19597c4cef2646e46fad5fb6ca555d6dc3b93fb4bd25311","dweb:/ipfs/QmWqeqS8ckrcktk382reUCPyCqRZebqEyuuKTD9KbTHgXn"]},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"keccak256":"0x93e4f65a89c3c888afbaa3ee18c3fa4f51c422419bbcd9cca47676a0f8e507ea","license":"MIT","urls":["bzz-raw://1a9c54b2935c810e14b17d6b5d7adeb0e1733d172823f02c30e1be8729715841","dweb:/ipfs/QmZGveXLQpqJQRjfeNws7mGSjxKpnfZCnKaXyH4soxDSkR"]},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"keccak256":"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82","license":"MIT","urls":["bzz-raw://930d2da1934886a1098753be4173dd89c45ca0b306a1930accd37e00b1af4aaf","dweb:/ipfs/QmVSXnvEV41d43k8cfpANHoTYMKgBDBL8iCbxkLfEtQZBe"]},"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol":{"keccak256":"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f","license":"MIT","urls":["bzz-raw://36374eaa68c0737bf7e1ae13d55327b4868fb0825e971ee729f4b8d355ededb4","dweb:/ipfs/QmYN9yuzz4P5SumiT6rgYgTEY8MhnPQapMwx2LHxRKju7r"]},"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol":{"keccak256":"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573","license":"MIT","urls":["bzz-raw://5cb07e4ff3352161510a0d1536fe93f3c62526358e073a8bab2a8abbb27d0da1","dweb:/ipfs/QmX7K1JjnWKT1JzZT92Qx5zNJQYbssE533TLFHP88hj2fb"]},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"keccak256":"0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f","license":"MIT","urls":["bzz-raw://a8a7fd1043372336ecccdbcbcf4962c6df8958dc9c7c7f8361fc2b3dd23570cc","dweb:/ipfs/QmYHKgZxnanBfu7Q8ZicVhDDuB7XRGxuwvmCjfQQ1E5j39"]},"@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3","license":"MIT","urls":["bzz-raw://f963d438177764b5f43f637c02311c951c0f0025d12fe1ac7e62e295bf416c41","dweb:/ipfs/QmcfVb9JsWrYeTwFUJsKVHpKB7EaWBKydAH9S4sKg2pzcK"]},"@openzeppelin/contracts/utils/Context.sol":{"keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT","urls":["bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f","dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"]},"@openzeppelin/contracts/utils/EnumerableMap.sol":{"keccak256":"0x2114555153edb5f273008b3d34205f511db9af06b88f752e4c280dd612c4c549","license":"MIT","urls":["bzz-raw://8779df50f4f716c6adaa5f61880c572abb2b37197d690d6aad32e52a32d5f382","dweb:/ipfs/QmVuZMGNFEo4gm1QB55gnCwCTc7XC5npkmgdfeJUgHbMiL"]},"@openzeppelin/contracts/utils/EnumerableSet.sol":{"keccak256":"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f","license":"MIT","urls":["bzz-raw://ccafc1afbcbf54559beea9c029d0b7656c56a185813c5fa74c4ea3eb4b608419","dweb:/ipfs/QmTKwdbenDfNwmwRVh8VKtA6mhFK2AyTFRoJF3BqLB81KM"]},"@openzeppelin/contracts/utils/Strings.sol":{"keccak256":"0x08e38e034333372aea8cb1b8846085b7fbab42c6b77a0af464d2c6827827c4f0","license":"MIT","urls":["bzz-raw://22746e9348187309fb4fbd3f79f6ad88787103eac10f24bd18f67257fafdd8ad","dweb:/ipfs/QmSLXfXg8b27Xstq58DFGvCpqgtTqpfrGbLMq19PtEKQJS"]},"contracts/interfaces/IAMB.sol":{"keccak256":"0xf4ba5d56a26d9a95865febfb3fd58581f82f27631b084bc28ce2e42c259f5e56","urls":["bzz-raw://6e47220ee1220bc637cb21289a3aad7d40a72172075bd1ef21055cdd378e8d15","dweb:/ipfs/QmRoBaFvs4QLrhqronsg5LnKboNVnejfXUVK814AgtGXza"]},"contracts/interfaces/IBurnableMintableERC1155Token.sol":{"keccak256":"0xef2bac4d4ec40674f837d63dca53511370f6dfd763652be740916940cf8ceaba","urls":["bzz-raw://a148abb554e47bdc633cab80efaee8d51cef0f3282acfe3599e6f1979cff7f75","dweb:/ipfs/QmeVUUozfYXxxCNCViU8XyzC7NHqALyVBE5nBrhV7VhkcG"]},"contracts/interfaces/IBurnableMintableERC721Token.sol":{"keccak256":"0x4effc6f846e29d8ee5b73e5bc763ff0e83a2e9ac271f6dc5eba84eba4d13fb62","urls":["bzz-raw://7168f16913d5966ef4261a741c2f1ba6d3aeb374701cb0f3cf3b3b0abf49db73","dweb:/ipfs/QmesgYHLUHobh7d6FEDHxyr98gVnX9bwAHkR65ifuJaKkk"]},"contracts/interfaces/IERC1155TokenReceiver.sol":{"keccak256":"0xb9dc6a39818ec78d6e77ce29634659010595a2371f2cc71ce427ca42a83e9fb1","urls":["bzz-raw://9165f411b10ebb84d94ea16a988439839ae41f7562ed48124d21eba000840c3f","dweb:/ipfs/QmdwCS3ewwA9qKaC6GX2tS8TtagL8VsKaZXE91w3zUHZRr"]},"contracts/interfaces/IOwnable.sol":{"keccak256":"0x1f2d202309e8395fff807f7d1268a03955e66aa7253722ea09f39ea2db570de4","urls":["bzz-raw://0de7173077bd87aff2c87fd26bbae70113c6897b96636593fc8cb50b07df9227","dweb:/ipfs/QmcZuuE12TaiJsfe7TGeQqghQBEpBN8im8djtS9mf1J9dk"]},"contracts/interfaces/IUpgradeabilityOwnerStorage.sol":{"keccak256":"0xf43326666f1abfec8a74b26eed4b56efea29a81865431a4ba4f38ec3f34dc67f","urls":["bzz-raw://e9e0deb3ba99bbc2476db4f41d81455b7bf1706cf5d0f8d1810000ac043e0815","dweb:/ipfs/QmTHAqNbxjpTVHPCpYESuvaDAHUoWDeCgQAJie7ZyrF6Eg"]},"contracts/libraries/Bytes.sol":{"keccak256":"0x3ff1032b3d97ed3ef682588efc9fc713f84807c8843249093e15591c4e0f5d4d","urls":["bzz-raw://90d15a7f529fd39ab6256dbff43e08a6408213e495d87ecbfd7bc6e6442a1976","dweb:/ipfs/QmeJbjNb8PdwGziJkfWbbu3VF9oRf4PXhWewUg6iqcoAGP"]},"contracts/tokens/ERC721BridgeToken.sol":{"keccak256":"0x1ca3fc632b457ad66ca2d167dd21fc0bd94026d5c82b5710f5f5126755945fdb","urls":["bzz-raw://4b3aed5c51a5ca0d71366edae8ef543f59c437ebf291b0bce947762e6541361d","dweb:/ipfs/QmXE4okmS63KuKSZrrh4wUphG2GfzQtsNR1gmjE8yAFtC2"]},"contracts/upgradeability/EternalStorage.sol":{"keccak256":"0x69e24ec05ae65648eada7ff65aba3e7d90d72ad186f6d5bb9f01c54b0fa00b41","urls":["bzz-raw://a7c173e5610184402d8a7af1ef21e468c5805e4736bba5da0e8be3e4e4a29d48","dweb:/ipfs/QmRakjK88qux7f6dg9Hpcw2PD3cMUPKTnj6YDC6yJ1caqE"]},"contracts/upgradeability/Proxy.sol":{"keccak256":"0x934223948bd9f0bdb87383879d1cbbee4b8f3061a40743e68e42b30ebac218cc","urls":["bzz-raw://a312fdb8150e214ab6f9a7e4612d970260042d7b08f261c6ea29cf3eeaaebc04","dweb:/ipfs/QmQTt7EF5CgxsKsaEfLQgzn6aY1Hkt7iGBq2mTdmjtHppK"]},"contracts/upgradeable_contracts/BasicAMBMediator.sol":{"keccak256":"0x45a41cda946e6960f9ca3ddea2ae2cd598fd9e0b1a78eb167191457a7becabdf","urls":["bzz-raw://1b38df61c3d533b6b045de538202fa419eb33715ce342942434215eb3e027c4c","dweb:/ipfs/QmQia9wT6SM3ozb6Witt5TqqfwbFZqKvYgRkWejYLmhwuu"]},"contracts/upgradeable_contracts/Initializable.sol":{"keccak256":"0x642a725cc71c4e5b50e47fe7cba2c6b67e5a28d4d2430ee105cf144aaa5d00b5","urls":["bzz-raw://7c26833c26d83a7c9ba2d2f24571e8558c239efb176f0f70ed26e172b29f488c","dweb:/ipfs/QmW2sN5CJzfszbWAc7RJrSBY9btSrGDEzzVUcaNCwHEhDt"]},"contracts/upgradeable_contracts/Ownable.sol":{"keccak256":"0x08aa50d15b510b1f750bbf25572b92fd59ff9117457042c19c1c40a097523e6f","urls":["bzz-raw://adafb21d0cba4d1d92fd0ba14d1301106981bf4dbe9def232aacedf5993fa890","dweb:/ipfs/QmeZwCYdU21kF4buego3GoSy1w2Bm8gjYtL7w5WPvoTXaV"]},"contracts/upgradeable_contracts/ReentrancyGuard.sol":{"keccak256":"0xa5f837c440d5af3ab20c6b80cab323676fc401da5620f1da60700ed1b19d2394","urls":["bzz-raw://f0bdcf2a4fd42aa446b32bb76a379a3482b5a64aa5d20ddb0e3551ee7e1ad781","dweb:/ipfs/QmcUiVSPFkM3qTvw3p6n8iUJCfkfdqQwCP9bJv3e5sj1iM"]},"contracts/upgradeable_contracts/Upgradeable.sol":{"keccak256":"0xc88ed9c8f2ad0405adfb505b2aad0d8fca63238fa9ec458194c3e8a03bea2174","urls":["bzz-raw://896c440e89e91606a5a6eacebf1a0af56320279fd5e221031ef197b164371b65","dweb:/ipfs/QmduLFJtJzytbopnrsAaMUBm36rtZCEShH7deitvX9H8HU"]},"contracts/upgradeable_contracts/VersionableBridge.sol":{"keccak256":"0x90d19e36575c6439d3c892dbb8d39bea66d8247e8ef00b14e84952c015b0b157","urls":["bzz-raw://80cded0f98436e42e71eaa8514de3f2f8960f459bdb400b4dc43eaadcaa68564","dweb:/ipfs/QmYP5GokVhHRFBVks8NNERoetBm8ysd3YKKy4UxzHQhJgA"]},"contracts/upgradeable_contracts/omnibridge_nft/BasicNFTOmnibridge.sol":{"keccak256":"0xf116b344f1edd8ef2898c5c6330de4b6f330598d435619e18da66326770574f5","urls":["bzz-raw://a2c66e16d4a406fa7e703c3cb64ba968fb6b6a43cf5d38bd3f094783e785ce30","dweb:/ipfs/QmQDsw813f2aWkL3oSULTe8SCa7GtCSbawFgNDvQjyHXJX"]},"contracts/upgradeable_contracts/omnibridge_nft/HomeNFTOmnibridge.sol":{"keccak256":"0xff357124c2a77798793ed4dba5980cb8a364e8a79b47d9019e8199d26c0893e7","urls":["bzz-raw://f8e7a0885f1129c14ddd62ed1ca1e17a81068b2c24df6fa4d48b03eb713f3e98","dweb:/ipfs/QmVDU79aXjiasQ2nGZWdPdRRSbcYXs4pDuHfhfYpYJU2HS"]},"contracts/upgradeable_contracts/omnibridge_nft/components/bridged/BridgedTokensRegistry.sol":{"keccak256":"0x97cf11029953bbd6b3ec2e2d9c9c58c5aa2ad2bd3e7eb3c4d3b3b466cf569301","urls":["bzz-raw://d81477a314501182f8babf749f6b3477357a0e790062d66f975d171847b59345","dweb:/ipfs/Qmdpcq1xCoNFNkaowwCBKx5RUXVaoA8aFxuqQ2pePTETbE"]},"contracts/upgradeable_contracts/omnibridge_nft/components/bridged/ERC1155TokenProxy.sol":{"keccak256":"0xf886f6cc50c1e0afb03f072c8590baab196895705372406fbbbbdb5742e72d55","urls":["bzz-raw://02178e3c5ee555ba3e66971e634c8b9432a0901b665571aa4e31ba78ebbc29d5","dweb:/ipfs/QmVXqTNJXWmsZdWFqFokzJbwnuTc54EgfmxmKiSB6uXBJt"]},"contracts/upgradeable_contracts/omnibridge_nft/components/bridged/ERC721TokenProxy.sol":{"keccak256":"0x79ab5f7babfaf3ebedfca46c22a8fe03c73d7684e4aeedd1243e9d1434a6afc5","urls":["bzz-raw://58336b202419a7de575f9cccd4c8047608e288dfe08403fd9bff6072a7b49991","dweb:/ipfs/QmZ5ULbfLCbYXoQtNvqpauRKasVs8JcCzgCGMnNM2Qd8F9"]},"contracts/upgradeable_contracts/omnibridge_nft/components/bridged/TokenImageStorage.sol":{"keccak256":"0xc4c20f23966560f4d6dd2e6c76a36e835cc680fa098dcc330ed6f6113f371f57","urls":["bzz-raw://415e89767bbf7fcfa2ffb762703a2fdba8dc1cdd6b0d8cfa34b57d77b6d6d5a5","dweb:/ipfs/QmPUXYLMqtUa1GnKS7gRaHfrTcNdiyHvAYQfi4iXZT9bz1"]},"contracts/upgradeable_contracts/omnibridge_nft/components/common/BaseRelayer.sol":{"keccak256":"0x3180d77f3f07a575527489415ccf49e025889e6ad5e3872eaf4c89a1308c79da","urls":["bzz-raw://2d5847d09dc5e35841175b8d53ef0b3d2b419710365c73eae898c646337b1b4f","dweb:/ipfs/QmPCXkdKe6d65RHoGXcvfow2oTGpWL4KCR8F4xLFa6x5Ey"]},"contracts/upgradeable_contracts/omnibridge_nft/components/common/BridgeOperationsStorage.sol":{"keccak256":"0x6a875a2d3b3b6fe79e74bac2c0835a1dd2797c27fc37faf769a0304671f561ce","urls":["bzz-raw://ccb62c626c33d27f1d5833ddf789d42c0b226fc881a104d83d55f00ed2d70605","dweb:/ipfs/QmRx4YMpXHYsoKBSgFNrE3QYp2exT7yFMFAQ4tG6mKMUjH"]},"contracts/upgradeable_contracts/omnibridge_nft/components/common/ERC1155Relayer.sol":{"keccak256":"0x0cd452dae6ade541056adf79114b02825634a9241de4e1a769bcc991763d8255","urls":["bzz-raw://c032e6de14daa2d5cb996b6069fce14719a78e744d42b67768d014af3aaec640","dweb:/ipfs/QmV7aVveAKtThxpwC4wXUriYyVaLfUfAf75UxhmfQXwRoh"]},"contracts/upgradeable_contracts/omnibridge_nft/components/common/ERC721Relayer.sol":{"keccak256":"0xf92a5c4aac77c1e54366bd0f079d466943435a2b2041d37e388c51dc497677ef","urls":["bzz-raw://4fc34c7b3a8a8fd45e78bbdb305862f4abbf235798f344b28dab0a1503b9f1f8","dweb:/ipfs/QmPQaWfnNQWiK1HEMDDzcMJtwv6QZKzAirAFNtjo7SRjs1"]},"contracts/upgradeable_contracts/omnibridge_nft/components/common/FailedMessagesProcessor.sol":{"keccak256":"0x62b7117cca9877874a574bca957ca46658253a8f186f908b39b8d9d928827e85","urls":["bzz-raw://6adac02b73195690726d209707e788d009227e516e05418fe930f29873396139","dweb:/ipfs/QmbGpEnbqZFECJ7Er9rCbhuGoVc1hhLFuKPGeNaV3ggECa"]},"contracts/upgradeable_contracts/omnibridge_nft/components/common/NFTBridgeLimits.sol":{"keccak256":"0x1d4bfdce8ad293fd048a8b20850dff5149b39e702a87b87be458a4956fbbce93","urls":["bzz-raw://ef9d71145a7c24ec7cd89f84f829efe8b937c9e68118aa98762930ae45ef54ad","dweb:/ipfs/QmPvCPigWrYfeT3PWtkrELWGdYAxtMoknxtbGHYggc7qrj"]},"contracts/upgradeable_contracts/omnibridge_nft/components/common/NFTOmnibridgeInfo.sol":{"keccak256":"0x396197fe126e1ef2d671529e6d15785447511c9fef338e301f79023fd60510a8","urls":["bzz-raw://d458250e7ab00bff4ca00b1fa1476f74507d587e8ff9d3c0711224073df23a29","dweb:/ipfs/QmVtFUV4KPXFpwYoJX6FQM14TGbYKdEQmmZtpYmBroqNJK"]},"contracts/upgradeable_contracts/omnibridge_nft/components/native/MetadataReader.sol":{"keccak256":"0x2f091d385c463a172abcdf7ba7dfd9c51277a3e23e50d44a48599caf1865b293","urls":["bzz-raw://712a42f335a3da3467e0f330866103e34d4c4e101d1c872c42a453e1d4462a59","dweb:/ipfs/QmQWbqxuFscCmHpbsS3hnNFyNtX1o9Fxmtb3zKnCAcXLvR"]},"contracts/upgradeable_contracts/omnibridge_nft/components/native/NFTMediatorBalanceStorage.sol":{"keccak256":"0xdff73e7f317d0d9e19416f25242128495a6ba65b17a3fb2fc18132ce3425b0b3","urls":["bzz-raw://a40fc7e5f1eef165b2689c9cce2892ebcf52bd9f331e8c5cadaa5c57bb231078","dweb:/ipfs/QmbeDFREXtSCN78H41SEhjwt2s4zfFMf99iC7ShCwMRC6f"]},"contracts/upgradeable_contracts/omnibridge_nft/components/native/NativeTokensRegistry.sol":{"keccak256":"0x9619120275e51954fed9438bdea5b34799f5c1b0a974dad566513d82383ef98c","urls":["bzz-raw://d86772cd87350690bbdddd5a22613b88efcd6cfd08b4df8a2fbaf72e0e438155","dweb:/ipfs/QmXTaHrYuqT9P7k3ANT8XSjEQzMg6uBnEvUcptvcx7mB69"]},"contracts/upgradeable_contracts/omnibridge_nft/modules/OmnibridgeModule.sol":{"keccak256":"0x20980494d3f5df864b73449ca6258ec6405afe407c16d3f9ab33c1f41ba42767","urls":["bzz-raw://f387adb51cb5a4d183b83330440a6ea60d97b1e173d6b946e8288c250bcfcd0d","dweb:/ipfs/QmRS5cjqNYdkLmaYXVx8qTqxS1pP4LaD5X8S2vHUp3qvy9"]},"contracts/upgradeable_contracts/omnibridge_nft/modules/VersionableModule.sol":{"keccak256":"0xd28455761f4b805e2a7ecacd52e925da13c9c33fe2507039eddba730da65dcaa","urls":["bzz-raw://78f192e4c5c20d4f0c12f08a9c00a2c54a0d03e82351517ddb0a2d8f9d3e9004","dweb:/ipfs/QmeXp66ZryGKZheV2fLT9yMVTDoBsptoimGMhNqEcFKXNN"]},"contracts/upgradeable_contracts/omnibridge_nft/modules/forwarding_rules/NFTForwardingRulesConnector.sol":{"keccak256":"0xba13a2bf38eed19af32eca05852b2e2a271a0ec9630765c0ba4db42d734874c4","urls":["bzz-raw://41ba8f9be4e9a12ec987fdf8ad6bb03b60ae822f2a75a740771f8d42894601bc","dweb:/ipfs/QmWvZYcjYeWeagFw9GKagn8FgeY4hxPTsK835ZiM5sJa8A"]},"contracts/upgradeable_contracts/omnibridge_nft/modules/forwarding_rules/NFTForwardingRulesManager.sol":{"keccak256":"0xa64bb7bbf81cf0cdbb1532d972d9216da386753531d808b66775976cbc751cad","urls":["bzz-raw://59975bd25b031abbf63c1245e890695ad6e668409c684ab10c28997a11e64fde","dweb:/ipfs/QmdB6EYyLQu51sCZ3x4wy2ixwWTHwTesTz4iskEeR1uLGF"]},"contracts/upgradeable_contracts/omnibridge_nft/modules/gas_limit/SelectorTokenGasLimitConnector.sol":{"keccak256":"0xb172e52a38fd44009856c9206d06f30ad0e2b41ca0a0854dddb43dc49dcf8f25","urls":["bzz-raw://bd603d02b6472345927479cd4417f19f6e5a8ec9e38bf6aefcded42b042d74f5","dweb:/ipfs/QmTBww5PZiLm2R6Vfj6MAHNj6KiaBorpVPde8t5PpnAdiM"]},"contracts/upgradeable_contracts/omnibridge_nft/modules/gas_limit/SelectorTokenGasLimitManager.sol":{"keccak256":"0x7daf28f4554b95d92e9a0436fddd156146790e30d88347c7752de485cb6a9255","urls":["bzz-raw://275b04c656fab06ac449a503f162fabfea3dcf2342955761dbd52d03c3639f96","dweb:/ipfs/QmdZqRFNenQeXvNEKeNoHHMLmSrdc2yG5E9ApBSrP143Bh"]}},"version":1},"version":1,"checkPoints":[]}