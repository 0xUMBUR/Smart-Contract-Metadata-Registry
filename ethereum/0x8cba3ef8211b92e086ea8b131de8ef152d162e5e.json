{"address":"0x8cbA3Ef8211B92E086Ea8B131DE8eF152D162e5e","name":"","metadata":{"compiler":{"version":"0.6.2+commit.bacdbe57"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newAdmin","type":"address"},{"indexed":false,"internalType":"int16","name":"adminRights","type":"int16"}],"name":"AdminRightsGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"noAdmin","type":"address"}],"name":"AdminRightsRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"newUri","type":"string"}],"name":"BaseTokenUriUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"adminRightsOf","outputs":[{"internalType":"int16","name":"","type":"int16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_total","type":"uint256"},{"internalType":"address","name":"_to","type":"address"}],"name":"batchMintTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"canMint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"canMintBurn","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"docType","type":"string"}],"name":"getIpfsHash","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"grantMinterBurnerRights","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"grantMinterRights","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_proxyRegistryAddress","type":"address"},{"internalType":"string","name":"baseURI","type":"string"},{"internalType":"address","name":"_owner","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"isMinter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"isMinterBurner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"mintTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"string","name":"docType","type":"string"},{"internalType":"string","name":"_hash","type":"string"}],"name":"mintWithIpfsHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"proxyRegistryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"docType","type":"string"}],"name":"removeIpfsHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"revokeAdminRights","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFromWithData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setBaseTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"docType","type":"string"},{"internalType":"string","name":"_hash","type":"string"}],"name":"setIpfsHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"tokensOf","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newCode","type":"address"}],"name":"updateCode","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Mathieu Lecoq september 3rd 2020 ","details":"Property all rights are reserved to EtherLand ltddeployed with compiler version 0.6.2","methods":{"adminRightsOf(address)":{"details":"know if an address has admin rights and its type of rights","params":{"_admin":"the address to find admin rights of"},"returns":{"_0":"int16 the admin right for _admin :      1 : address can only mint tokens       2 : address can mint AND burn tokens "}},"approve(address,uint256)":{"details":"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.","params":{"to":"address to be approved for the given token ID","tokenId":"uint256 ID of the token to be approved"}},"balanceOf(address)":{"details":"Gets the balance of the specified address","params":{"owner":"address to query the balance of"},"returns":{"_0":"uint256 representing the amount owned by the passed address"}},"baseTokenURI()":{"details":"Retrieve all NFTs base token uri "},"batchMintTo(uint256,address)":{"details":"Mint several tokens to an address.","params":{"_to":"default owner of the new created NFT (reverts if a zero address)","_total":"total number of NFT to mint (reverts if <= 0)"}},"burn(uint256)":{"details":"External Burn NFT method"},"canMint()":{"details":"canMint external ","returns":{"_0":"bool : truthy if msg.sender has admin rights to mint new tokens"}},"canMintBurn()":{"details":"canBurn external","returns":{"_0":"bool : truthy if msg.sender has admin rights to mint new tokens and burn existing tokens"}},"getApproved(uint256)":{"details":"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.","params":{"tokenId":"uint256 ID of the token to query the approval of"},"returns":{"_0":"address currently approved for the given token ID"}},"grantMinterBurnerRights(address)":{"details":"owner can grant admin access to allow any address to mint new tokens and to burn existing tokensRestricted to CONTRACT OWNER ONLY","params":{"_admin":": address to grant admin minter and burner rights to"}},"grantMinterRights(address)":{"details":"owner can grant admin access to allow any address to mint new tokensRestricted to CONTRACT OWNER ONLY","params":{"_admin":": address to grant admin minter rights to"}},"init(string,string,address,string,address)":{"details":"Logic code implementation contact constructorMUST be called by deployer only if contract has not been initialized before"},"isMinter(address)":{"details":"verifiy if an address can mint new tokens","params":{"_admin":": the address to verify minting rights of"},"returns":{"_0":"a boolean, truthy when _admin has rights to mint new tokens"}},"isMinterBurner(address)":{"details":"verifiy if an address has rights to mint and burn new tokens","params":{"_admin":": the address to verify minter-burner rights of"},"returns":{"_0":"a boolean, truthy when _admin has rights to mint and burn new tokens"}},"mintTo(address)":{"details":"Mints a token to an address.","params":{"_to":"address of the future owner of the token"}},"mintWithIpfsHash(address,string,string)":{"details":"Mint a new token with document hash corresponding to an IPFS CID","params":{"_hash":"string representing the hash of a document with type equals to `docType`","_to":"address of the future owner of the token","docType":"string representing the type of document that is stored to IPFS (can be \"pdf\" or any other token related document)"}},"name()":{"details":"Gets the token name","returns":{"_0":"string representing the token name"}},"ownerOf(uint256)":{"details":"Gets the owner of the specified token ID","params":{"tokenId":"uint256 ID of the token to query the owner of"},"returns":{"_0":"address currently marked as the owner of the given token ID"}},"renounceOwnership()":{"details":"Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore."},"revokeAdminRights(address)":{"details":"owner can revoke admin right of any admin addressRestricted to CONTRACT OWNER ONLY","params":{"_admin":": address to revoke admin access to"}},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"safeTransferFromWithData(address,address,uint256,bytes)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator","params":{"_data":"bytes data to send along with a safe transfer check","from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"setApprovalForAll(address,bool)":{"details":"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf","params":{"approved":"representing the status of the approval to be set","to":"operator address to set the approval"}},"setBaseTokenURI(string)":{"details":"Set the base token uri for all NFTs"},"supportsInterface(bytes4)":{"details":"implement supportsInterface(bytes4) using a lookup table"},"symbol()":{"details":"Gets the token symbol","returns":{"_0":"string representing the token symbol"}},"tokenByIndex(uint256)":{"details":"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens","params":{"index":"uint256 representing the index to be accessed of the tokens list"},"returns":{"_0":"uint256 token ID at the given index of the tokens list"}},"tokenOfOwnerByIndex(address,uint256)":{"details":"Gets the token ID at a given index of the tokens list of the requested owner","params":{"index":"uint256 representing the index to be accessed of the requested tokens list","owner":"address owning the tokens list to be accessed"},"returns":{"_0":"uint256 token ID at the given index of the tokens list owned by the requested address"}},"tokenURI(uint256)":{"details":"Retrieve the uri of a specific token ","params":{"_tokenId":"the id of the token to retrieve the uri of"},"returns":{"_0":"computed uri string pointing to a specific _tokenId"}},"tokensOf(address)":{"details":"@notice Non-Standard method to retrieve all NFTs that specific owner owns","returns":{"_0":"uint[] containing all NFTs that owner owns"}},"totalSupply()":{"details":"Gets the total amount of tokens stored by the contract","returns":{"_0":"uint256 representing the total amount of tokens"}},"transferFrom(address,address,uint256)":{"details":"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"newOwner":"The address to transfer ownership to."}},"updateCode(address)":{"details":"EIP-1822 featureRealize an update of the Etherland logic code calls the proxy contract to update stored logic code contract address at keccak256(\"PROXIABLE\")"}},"title":"Etherland NFT Assets"},"userdoc":{"methods":{"isApprovedForAll(address,address)":{"notice":"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."},"renounceOwnership()":{"notice":"Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}}}},"settings":{"compilationTarget":{"browser/ERC721.sol":"Etherland"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/ERC721.sol":{"keccak256":"0x69a9f736cb8f28df392a5e19d1d3313424fc36be6929ee6c6e0e306e5d992416","urls":["bzz-raw://d594c13eca56a426d86fbf0157d71f713e0cfd53b494c00fa66876583dff1d71","dweb:/ipfs/QmXBz5nzBGW1xprCqZ6876pb4K2RYgYjg4vsRd3hLc1Dwt"]}},"version":1},"version":1,"checkPoints":[]}