{"address":"0x0D5E41f858761537f2C7Ee8E25650F330C58161C","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_newCryptograph","type":"address"}],"name":"MintACryptograph","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"addressFromTokenId","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"approvedOperator","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"approvedTransferAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"auctionHouse","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOfVar","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"cryptographPositionInOwnershipArray","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getTransferFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"string","name":"_currencySymbol","type":"string"}],"name":"getTransferFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"index2665ToAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"indexCry","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"indexedOwnership","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_auctionHouse","type":"address"},{"internalType":"address","name":"_indexCry","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isACryptograph","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lastSoldFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"renatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenAddress","type":"address"}],"name":"tokenIdFromAddress","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupplyVar","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"address","name":"_cryptograph","type":"address"},{"internalType":"uint256","name":"_lastSoldFor","type":"uint256"}],"name":"transferACryptograph","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"transferFeePrepaid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"transferFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"triggerRenatus","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Guillaume Gonnaud 2020","methods":{"addressFromTokenId(uint256)":{"details":"literally just a typecast","params":{"_tokenId":"The identifier for an NFT"},"returns":{"_0":"The address of the Cryptograph that would be associated with this ID"}},"approve(address,uint256)":{"details":"The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner. After a successful call and if  `msg.value == getTransferFee(_tokenId)`, then a subsequent atomic call to  `getTransferFee(_tokenId)` would eval to 0. If the fee is not to be paid in ETH,  then token publishers MUST provide a way to pay the fee when calling this function,  and throw if the fee is not paid.  Any ETH sent to this function will be used to pay the transfer fee, and if the  ETH sent is twice (or more) the non-0 current transfer fee, the next transfer fee   will be prepaid as well.  ","params":{"_approved":"The new approved NFT controller","_tokenId":"The NFT to approve"}},"balanceOf(address)":{"details":"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.","params":{"_owner":"An address for whom to query the balance"},"returns":{"_0":"The number of NFTs owned by `_owner`, possibly zero"}},"constructor":{"details":"This contract is meant to be used in a delegatecall and hence its memory state is irrelevant"},"getApproved(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT.","params":{"_tokenId":"The NFT to find the approved address for"},"returns":{"_0":"The approved address for this NFT, or the zero address if there is none"}},"getTransferFee(uint256)":{"details":"If a call would returns 0, then any subsequent calls witht the same argument must also return 0 until the Transfer event has been emitted.","params":{"_tokenId":"The NFT to find the Transfer Fee amount for"},"returns":{"_0":"The amount of Wei that need to be sent along a call to a transfer function"}},"getTransferFee(uint256,string)":{"details":"If a call would returns 0, then any subsequent calls with the same arguments must also return 0 until the Transfer event has been emitted. If _currencySymbol == 'ETH', then this function must return the same result as if `getTransferFee(uint256 _tokenId)` was called.","params":{"_currencySymbol":"The currency in which the fee is to be paid","_tokenId":"The NFT to find the Transfer Fee amount for"},"returns":{"_0":"The amount of Wei that need to be sent along a call to a transfer function"}},"isApprovedForAll(address,address)":{"params":{"_operator":"The address that acts on behalf of the owner","_owner":"The address that owns the NFTs"},"returns":{"_0":"True if `_operator` is an approved operator for `_owner`, false otherwise"}},"ownerOf(uint256)":{"details":"NFTs assigned to zero address are considered invalid, and queries  about them do throw.","params":{"_tokenId":"The identifier for an NFT"},"returns":{"_0":"The address of the owner of the NFT"}},"renatus(uint256)":{"details":"only callable by approved operators or the owner","params":{"_tokenId":"The identifier for an NFT"}},"safeTransferFrom(address,address,uint256)":{"details":"This works identically to the other function with an extra data parameter,  except this function just sets data to \"\".","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `msg.value` < `getTransferFee(_tokenId)`.  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the  fee when calling this function or it's overloads, and throwing if said fee is not paid.  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.  When transfer is complete, this function checks if `_to` is a smart  contract (code size > 0). If so, it calls `onERC2665Received` on `_to`  and throws if the return value is not  `bytes4(keccak256(\"onERC2665Received(address,address,uint256,bytes)\"))`.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer","data":"Additional data with no specified format, sent in call to `_to`"}},"setApprovalForAll(address,bool)":{"details":"Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.","params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"supportsInterface(bytes4)":{"details":"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.","params":{"interfaceID":"The interface identifier, as specified in ERC-165"},"returns":{"_0":"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"}},"tokenByIndex(uint256)":{"details":"Throws if `_index` >= `totalSupply()`.","params":{"_index":"A counter less than `totalSupply()`"},"returns":{"_0":"The token identifier for the `_index`th NFT,  (sort order not specified)"}},"tokenIdFromAddress(address)":{"details":"literally just a typecast","params":{"_tokenAddress":"The address for a Cryptograph"},"returns":{"_0":"The tokenId of the Cryptograph that would be associated with this address"}},"tokenOfOwnerByIndex(address,uint256)":{"details":"Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.","params":{"_index":"A counter less than `balanceOf(_owner)`","_owner":"An address where we are interested in NFTs owned by them"},"returns":{"_0":"The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)"}},"tokenURI(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\"."},"transferACryptograph(address,address,address,uint256)":{"details":"Call the internal transfer function","params":{"_cryptograph":"The address of the cryptrograph","_from":"The address of the previous owner","_lastSoldFor":"The amount of the last cryptograph platform transaction for this cryptograph","_to":"The address of the new owner"}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. Throws if `msg.value` < `getTransferFee(_tokenId)`.  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the  fee when calling this function and throw if said fee is not paid.  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}},"triggerRenatus()":{"details":"only callable by the token itself"}},"title":"Cryptograph ERC2665 Mimic Smart Contract"},"userdoc":{"methods":{"addressFromTokenId(uint256)":{"notice":"Get the address of a Cryptograph from their tokenID"},"approve(address,uint256)":{"notice":"Change or reaffirm the approved address for an NFT"},"balanceOf(address)":{"notice":"Count all NFTs assigned to an owner"},"constructor":"Generic constructor, empty","getApproved(uint256)":{"notice":"Get the approved address for a single NFT"},"getTransferFee(uint256)":{"notice":"Query what is the transfer fee for a specific token"},"getTransferFee(uint256,string)":{"notice":"Query what is the transfer fee for a specific token if the fee is to be paid"},"isApprovedForAll(address,address)":{"notice":"Query if an address is an authorized operator for another address"},"ownerOf(uint256)":{"notice":"Find the owner of an NFT"},"renatus(uint256)":{"notice":"Extend the renatus timer for a cryptograph"},"safeTransferFrom(address,address,uint256)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"},"supportsInterface(bytes4)":{"notice":"Query if a contract implements an interface"},"tokenByIndex(uint256)":{"notice":"Enumerate valid NFTs"},"tokenIdFromAddress(address)":{"notice":"Get the tokenID of a Cryptograph from their address"},"tokenOfOwnerByIndex(address,uint256)":{"notice":"Enumerate NFTs assigned to an owner"},"tokenURI(uint256)":{"notice":"A distinct Uniform Resource Identifier (URI) for a given asset."},"totalSupply()":{"notice":"Count NFTs tracked by this contract"},"transferACryptograph(address,address,address,uint256)":{"notice":"Transfer a cryptograph in the ERC2665 proxy"},"transferFrom(address,address,uint256)":{"notice":"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"},"triggerRenatus()":{"notice":"Emit a Renatus transfer event destroying the token for it to be reborn later"}},"notice":"Provide the logic code for third parties to read cryptographs as if they were ERC2665 tokens (they are not, hence no \"write\" interactions are enabled)"}},"settings":{"compilationTarget":{"browser/ERC2665LogicV1.sol":"ERC2665LogicV1"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/AuctionHouseLogicV1.sol":{"keccak256":"0x0c2d08f0b5f3693abccf7df79fe80f35270b95b05950cdac5d230f3238d073f2","urls":["bzz-raw://f0f5d5e8e132ec57003404c5c8ac77408c60aecf44d7da30e07d6e721b1b9912","dweb:/ipfs/QmcMG6F3yWAj57ESddguyJUdsEwxo7tXA9J78hADryKHBB"]},"browser/AuctionHouseV1.sol":{"keccak256":"0xbb66438201d34e4dd15089de4228fdf0e3364b859cfb6b361f587c1fb311d8e6","urls":["bzz-raw://164b344fd4c74f7b0f9296fdb08056653c0b4fd99d8264406ec690237f1eb03c","dweb:/ipfs/QmNdV3rE7K3A3XqKk6YDzUckZKqusQ6QJGzY4bVLn82sKm"]},"browser/BidLink.sol":{"keccak256":"0x5764e7d26285d11019ef560dcb10999fa62f43158ddca14c52596e6cf08de14a","urls":["bzz-raw://e858bf10b4ed943bdc1ac0f671c3d1adeb09c7a9e4e41e87309e1efd90269eca","dweb:/ipfs/QmSzoEejRr7RsTQfKPfDwBXQvdik1EzEW9siBfoBwt5Ujw"]},"browser/BidLinkSimple.sol":{"keccak256":"0x52123668833247f5c4f87363b2869dd289786e9fa28550b75cb2253cec6b7f61","urls":["bzz-raw://ce69e6847469e10493a2284c158288d69201e08c34c2259dc46d42d59edaccb2","dweb:/ipfs/QmbcpjK8EQpbLnm6ntDT9jZ1n4Pd25zer59bc92xMMdLaq"]},"browser/CryptographFactoryLogicV1.sol":{"keccak256":"0xc79cf36284280f0cf9cea31c0e5099d80dbe8c6f721eca9c03bd9b83f306769e","urls":["bzz-raw://94dde9ec81521c3b76e0edda0d37dfce40f2da5511f1e646663dbfa0f0b5f9f8","dweb:/ipfs/QmQ1nmPFJVsAu7UAvzC77aNcuv5LoDT2s6KuxzZSFf6Yfw"]},"browser/CryptographFactoryV1.sol":{"keccak256":"0x42e61e3d221288377157e6a182f4a58a75dc9ac92c70f80fe0631e27cbd9024c","urls":["bzz-raw://0d657bf7848f4e0a7b6dd7daf597452074e46094eb96da5e5c1f9b4111b4e03f","dweb:/ipfs/QmYjtEw4dgHiJGZu49Q9WQy1nX1VEDaNSjSBbXA3mWqWoC"]},"browser/CryptographIndexLogicV1.sol":{"keccak256":"0x4d71074a37f62b43403cc30859fc65267ed12acc0e1a7388a02abbb61502047b","urls":["bzz-raw://8ff0fa2941a305ed396aee2fe665505a3f3d02a4abcd0702fc4d0cbafaa00ff7","dweb:/ipfs/Qmc3H5tHtSjGQZyzb6aAjfN8jRDSwZxPFXJNWbSo9mnd5V"]},"browser/CryptographIndexV1.sol":{"keccak256":"0x9f0cf77187dc2f2e810378b4fdf17624713577d45ee5af57591fcae533b7b2fa","urls":["bzz-raw://b73b621c448457eb72360601742071ef91bf42baada3492fcd08a28c3ce4b359","dweb:/ipfs/QmS2xsZBFxtxw6seJpzikn6CkSZNPuXC9yhBBPSAkvGbuJ"]},"browser/CryptographInitiator.sol":{"keccak256":"0x84ee538a073e2f6cf201951a655229c6785d5a3d894fcbbd31dacb4be347e818","urls":["bzz-raw://970753cf4abd53c93b72c559cdaae4518afa5ff7c386b5a8f6663eb40b3a4119","dweb:/ipfs/QmRrwiHEciTpya4NYVcy5bA4M7r9nPN8Pd5HFpbaHJiys7"]},"browser/CryptographKYCLogicV1.sol":{"keccak256":"0x3203f2288cf17d101095da9fbe755ec7ad247751ba5e61901e6b1c5176525b7a","urls":["bzz-raw://a2b74f0a0b483ca126e6ce93184ed0227a105413c6ec1a3fbc7b6f9f8c37dae8","dweb:/ipfs/QmXrgush6YEKpDrNoJcpQ9ZRg9Ar2pASHCHcKWRDo6CP2N"]},"browser/CryptographKYCV1.sol":{"keccak256":"0x5bed2569c70ebfb1967db23bda24aef441b88572719db6ed12451477b659954a","urls":["bzz-raw://3c47e22ed0e374c1729d49a32b329f3ece9d93202105b5abade02bde150473fe","dweb:/ipfs/QmbiPLcLJwyr7YvgeVME66A3fzPngrNhANapmdMpTgksZa"]},"browser/ERC2665LogicV1.sol":{"keccak256":"0xf66f47b175f6761b5d5dd0036cfaacd9e3ec4052ab420fc62708ae18bfe18bfc","urls":["bzz-raw://9d617adf4e3bd87cb492ce6a513612fd0aca4390b4dad037deedd41660762b60","dweb:/ipfs/Qmctu48aPmoGS2tWg2MdTJUtifkxUwscUQWfmxh8vJc8JN"]},"browser/ERC2665V1.sol":{"keccak256":"0x89d8e2201d1a5a4b0cd706cdcaa3d9f901ee58cc9d72eeecdf4f7d9cebb35812","urls":["bzz-raw://71c9bceaf89dae19329cf897d76897b9105e8684baacd3a3fe54fde37b10beb8","dweb:/ipfs/QmfETkjdoFz1e88EfQuURgY1Bxm733ieBCFeRK24afDUN9"]},"browser/EditionIndexerLogicV1.sol":{"keccak256":"0x8568030ff51a961d4d56c4459fd1c21bc64e5da3c3870cc806d0441b2985ce3d","urls":["bzz-raw://ac5bc2bf24c1377dd8dc3580aa628aec340298e2a1c61eaa7a176772af79a918","dweb:/ipfs/QmfDExReCKiqMpAjgCdfhFpTZnZTMaW7gjzYb4v7VyNGSn"]},"browser/EditionIndexerProxiedV1.sol":{"keccak256":"0x34a9d3827114f58e758fa34a0355d8b79eab8248d7e8cf71f0562454e0690f9c","urls":["bzz-raw://3d356f743e98a560260cfdab2d74d83c3efb3afc5b80a8035e20542a3efaef21","dweb:/ipfs/QmZou2Ldf8RbZFTbp5aLkEGQV9DW52a8sQy9NURpgtiHEZ"]},"browser/EditionIndexerV1.sol":{"keccak256":"0xec6f8efbf49dd24f07d1baf4df79ab7dd4f86432b9828de8f077ff558c88ab32","urls":["bzz-raw://f45c18215b73c58d4b98906c391008fb17323ec4dbbf6e28b7cb0a48f7f65a2d","dweb:/ipfs/QmQPxnr93NjQ6u5zJLHBQwAcjgse8pkuV5Qg91z8kVijH4"]},"browser/MintingAuctionLogicV1.sol":{"keccak256":"0xe19eb8043432a5fc79e61616a049b89eed1be2bc115b423981d1a8e69c0099b8","urls":["bzz-raw://ba7f2015bde30e03f072dea8d5b65ee47759eee6761ad053bea79eabf60f8c30","dweb:/ipfs/QmPFM1ZQDZLBCK2ccJmcXZ3jxWVZ1umKJi7htXCXWvT8f2"]},"browser/MintingAuctionProxiedV1.sol":{"keccak256":"0xf94b85fc706b47721e3bb900e589c2589a6056d6d6753ce0fc6bcbacedffd844","urls":["bzz-raw://69efd0db9a188279c92004c6221adac4fb3a6164ce09d0187d84bad5738ddb23","dweb:/ipfs/QmP7reis1gCoGtNdZNNv4tArY6S9D8drTBJ8BPcHa6qBNV"]},"browser/MintingAuctionV1.sol":{"keccak256":"0x0231627df892c36254a95a46e58c764e6223f3a08f47cb23c4466df00471603b","urls":["bzz-raw://d36983b46dcd9c8d298a532906fe334305fc3f6a2905b0ce39e4e492e79b2c2f","dweb:/ipfs/QmaCsKv91AqUZMna5KCuZSGnCxd34B5i566yhavsS4tSFL"]},"browser/SingleAuctionLogicV1.sol":{"keccak256":"0xd76ea5a6182473cb4a9c1d46434ce83d3a691b956c7fa33991358b69e2898237","urls":["bzz-raw://f6086c9b273a87c67022fbc05cc9ed87a6e0d5e5f39240d22b24361f94dd505d","dweb:/ipfs/QmTAT2UqsFkDT99uSJe6SyaeXRj8XNAh4sb3xPSuGvi8AB"]},"browser/SingleAuctionProxiedV1.sol":{"keccak256":"0x5a6b16d61632c09bfb29a799c7b7672655bbf472b681be67d556cf5e66639c3d","urls":["bzz-raw://3636e5f2d9fd33cb583d6910d8a782402838d6b247187e9e0fad1c38dd641c89","dweb:/ipfs/QmecLAS9qCuJNYVdEEqXTdeBq4rn2aPp8pYyMDHSwxd5fm"]},"browser/SingleAuctionV1.sol":{"keccak256":"0x7f502c0bd50f90cab961707c9117a5641a67eba7740676b361e4fb6b52f4717d","urls":["bzz-raw://f85d9205a1b844adf99aff61ee12003c99ba5d21703301fd920cb2403c3078fe","dweb:/ipfs/QmXVDdL2vGfQ2jPMK8xyWAX5nCBt622vohYjeCzSRNUoZi"]},"browser/TheCryptographLogicV1.sol":{"keccak256":"0xec3ea0b283488edea66cf3c33fef4f923301b971d70be75f551af3fb21fa211e","urls":["bzz-raw://e3fc2a3e93bb30719a84c0e25c4bddb452620322d21d9db1e81de40eaa6c8dc5","dweb:/ipfs/QmeiULiA8XrgTSyTy9e8Zgmpou7PptRciVahg3E2eQMiKZ"]},"browser/TheCryptographProxiedV1.sol":{"keccak256":"0x686544a9072f6aef33fd4a0c32d5e4d350cc22c92d0e31aeb927c08ea8456b6e","urls":["bzz-raw://fb2ee3136c5a2545d09ff9444704516db2b74888931a830cbd50cf8e24c48a4a","dweb:/ipfs/QmUS5kj1VfVnheHAEGniJV1f3MxeWfjquiRDWiNJnN9ewP"]},"browser/TheCryptographV1.sol":{"keccak256":"0xe954111994c2642bceb697e5d16905e952b35b8095207233cd3091131ceb9c03","urls":["bzz-raw://f60336ddad8de6e87e4b947fa6dcbe584056c4d7a4d697182e03ed459037ce9d","dweb:/ipfs/QmUeXJechacUmBzTcJXByAQJnrtBncd11PH4avwiRsbRrd"]},"browser/VCProxy.sol":{"keccak256":"0xd25f66b377fe7b5d7c919112348c1260182cbcb1c7a543ace05142d20c47d506","urls":["bzz-raw://f21fd6ba7b0af19771c141993f7dbd1c8aecfdbdc1a6e586496351c3484d3709","dweb:/ipfs/QmS1hzBkyJYqThGcX6jxtzYVRxfv5oU8syt5Cp7HVF8SsZ"]}},"version":1},"version":1,"checkPoints":[]}