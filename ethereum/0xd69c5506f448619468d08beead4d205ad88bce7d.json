{"address":"0xD69C5506F448619468D08BEeAD4d205ad88bce7d","name":"","metadata":{"compiler":{"version":"0.8.1+commit.df193b15"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"pid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"uint256[]","name":"_allocPoints","type":"uint256[]"},{"internalType":"contract IERC20[]","name":"_lpTokens","type":"address[]"}],"name":"add","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimTimeout","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint256","name":"_cap","type":"uint256"},{"internalType":"uint256","name":"_amountForPool","type":"uint256"},{"internalType":"address","name":"_rewardReceiver","type":"address"}],"name":"deployAureus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"endBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_from","type":"uint256"},{"internalType":"uint256","name":"_to","type":"uint256"}],"name":"getMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"massUpdatePools","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"address","name":"_user","type":"address"}],"name":"pendingRwd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"poolInfo","outputs":[{"internalType":"contract IERC20","name":"lpToken","type":"address"},{"internalType":"uint256","name":"allocPoint","type":"uint256"},{"internalType":"uint256","name":"lastRewardBlock","type":"uint256"},{"internalType":"uint256","name":"accRwdPerShare","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rwdPerBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rwdToken","outputs":[{"internalType":"contract AureusV1","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_pids","type":"uint256[]"},{"internalType":"uint256[]","name":"_allocPoints","type":"uint256[]"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_startBlock","type":"uint256"},{"internalType":"uint256","name":"_endBlock","type":"uint256"},{"internalType":"uint256","name":"_rwdPerBlock","type":"uint256"},{"internalType":"uint256","name":"_ownerWithdrawBlockTimeout","type":"uint256"}],"name":"setProgramParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAllocPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"}],"name":"updatePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"rewardDebt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pid","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"}],"name":"withdrawExcessRwd","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"add(uint256[],address[])":{"details":"- A function to add a pool or multiple pools to the contract","params":{"_allocPoints":"- An array of the allocation points for each pool that will be added","_lpTokens":"- An array of each LP token for which a pool is created"}},"deployAureus(string,string,uint256,uint256,address)":{"details":"Deploys a new RewardToken contract. Callable only by Owner. Mints the cap amount and transfers it to this contract","params":{"_amountForPool":"- a portion of the ERC20 reward token is transferred to owner to create a new pool on a DEX","_cap":"- set a cap on how many ERC20 reward tokens can be minted","_name":"- Pass a name for the token","_rewardReceiver":"- receiver of the portion of ERC20 reward token","_symbol":"- Pass a symbol for the token"}},"deposit(uint256,uint256)":{"details":"- A function to be called when depositing LP tokens to a certain pool","params":{"_amount":"- The amount of LP tokens to be deposited emit - Emits the Deposit event","_pid":"- The pool id to which the user wants to deposit LP tokens"}},"emergencyWithdraw(uint256)":{"details":"- A function to withdraw any outstanding LP tokens of a user without withdrawing ERC20 reward tokens","params":{"_pid":"- The pool id on which to perform emergency withdraw"}},"getMultiplier(uint256,uint256)":{"details":"- Calculates and returns reward multiplier over the given _from to _to block.","params":{"_from":"- Should be a block number","_to":"- Should be a block number"}},"massUpdatePools()":{"details":"- Updates the variables of each pool in the array "},"owner()":{"details":"Returns the address of the current owner."},"pendingRwd(uint256,address)":{"details":"- Calculates the pending ERC20 reward tokens the user can claim","params":{"_pid":"- The pool id","_user":"- The address of the user"},"returns":{"_0":"- the pending ERC20 reward tokens to be claimed"}},"poolLength()":{"details":"Checks the poolInfo struct lenght","returns":{"_0":"the number of active pools"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"set(uint256[],uint256[])":{"details":"- Updates the allocationPoints for an array of pools","params":{"_allocPoints":"- An array of allocationPoints for each pool that will be updated","_pids":"- An array of pool ids which will be updated"}},"setProgramParameters(uint256,uint256,uint256,uint256)":{"details":"Allows the owner to set the parameters for a new upcomming farming program","params":{"_endBlock":"- the block on which the farming program will end","_ownerWithdrawBlockTimeout":"- The added timeout after a program finishes after which the excess ERC20 tokens stored can be withdrawn by the owner","_rwdPerBlock":"- updates the rwdPerBlock variable for the new farming program","_startBlock":"- the starting block when the farming program will start"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updatePool(uint256)":{"details":"- Updates the pool variables to be up to date","params":{"_pid":"- The ID of the pool to be updated"}},"withdraw(uint256,uint256)":{"details":"- A function which is called to withdraw LP tokens from a pool","params":{"_amount":"- The amount of LP tokens to withdraw emits - Withdraw event is emited ","_pid":"- The pool id from which to withdraw the deposited LP tokens"}},"withdrawExcessRwd(address)":{"details":"Allows the owner to withdraw any excess ERC20 tokens stored in the contract","params":{"_receiver":"- The receiving address for the ERC20 tokens"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"EtruriaV1.sol":"EtruriaV1"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"keccak256":"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c","license":"MIT","urls":["bzz-raw://d5ff16b336ce8f906478d5f2eecc6435e00833bdc0b92f6b209cf9e92cb5b2b7","dweb:/ipfs/QmRD1rAZEqQ73C33cdA3QoUyBDMEWnNKNMc6PNkAZWHeQQ"]},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"keccak256":"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b","license":"MIT","urls":["bzz-raw://45b1f9043c0fb450272f20ed19ef633fcba1b129d602651a856dfae1a2243a2c","dweb:/ipfs/QmUTSQiDikkcNtTtyDpkEwCM5ztVUUh9c1inBukn6HC5Vr"]},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835","license":"MIT","urls":["bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f","dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U"]},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol":{"keccak256":"0x821af334ad764368c6b1f549e66b0bb29a96af560a2336ea5d833529f7d5525c","license":"MIT","urls":["bzz-raw://964556033234fa07765890a58fba434c68da0952d1e70d24e56c3b5b2c9a6ce4","dweb:/ipfs/QmbkW9NZgHMNjYge7v9ZmftCvTrmwbv3QRjo7qChmjtQXC"]},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2","license":"MIT","urls":["bzz-raw://d4c3df1a7ca104b633a7d81c6c6f5192367d150cd5a32cba81f7f27012729013","dweb:/ipfs/QmSim72e3ZVsfgZt8UceCvbiSuMRHR6WDsiamqNzZahGSY"]},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7","license":"MIT","urls":["bzz-raw://b31b80dd57f8c28320b01fa4f3ed98ac1aa678f61846c1db2771c996b77a9451","dweb:/ipfs/QmcT2Di5L9t82A9XdYDZ4tWMEPGFVFazKDwC2Vrd135AA3"]},"@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45","license":"MIT","urls":["bzz-raw://6a4c96fafff76deda5697c3c5c98cade6e6e1b178254544c106bf360c079ce4e","dweb:/ipfs/QmXmxubE3jnatFgZuN8ay1VV6hZ8WRmhvUjNpeVjki15HX"]},"@openzeppelin/contracts/utils/Context.sol":{"keccak256":"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0","license":"MIT","urls":["bzz-raw://fc2bfdea0d2562c76fb3c4cf70a86c6ba25c5a30e8f8515c95aafdf8383f8395","dweb:/ipfs/QmTbFya18786ckJfLYUoWau9jBTKfmWnWm5XSViWvB7PXN"]},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"keccak256":"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e","license":"MIT","urls":["bzz-raw://5f9529d3d365e8415155cee11394e0f7c0de2152b601b7e77508fce16cb4a509","dweb:/ipfs/QmVhbcLVsAzvqfjsdLwy25XMjgVJm7Z3w2JCNiNbZF2GHT"]},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"keccak256":"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9","license":"MIT","urls":["bzz-raw://ff1bdcc04ffc6b0a39e76ca4d8c09fb36927c2355008294db28096c1bd9ef544","dweb:/ipfs/QmSNmMUxcuQ9i6U1PVcd14gTCEYmFgkjPg3anzDckGhVRS"]},"AureusV1.sol":{"keccak256":"0x6d18b23306272f51623dc0dba1507ef09caa916341ab3ea3989f6bbf950cf2e5","license":"MIT","urls":["bzz-raw://46e067c668e0681ca1a1163185a137123f3f629d561246be4db19d1ea3f685ef","dweb:/ipfs/QmVMNZ1yTQJmD4ADfLdmaPQ7ixwJfQbXZroeLmhHanHsPD"]},"EtruriaV1.sol":{"keccak256":"0x5d53135daa1916538a24e89151b8b829df8bcb9ffa146b2e743514d57aae30e0","license":"MIT","urls":["bzz-raw://b67b348f578c72f00a4f5f17d65f929dcd903a559590b74ecd5315335125b9cb","dweb:/ipfs/QmTDXPsPZyNw3NcaNhzScFNpbAUXbsrc6bKjYRueGHhpnX"]}},"version":1},"version":1,"checkPoints":[]}