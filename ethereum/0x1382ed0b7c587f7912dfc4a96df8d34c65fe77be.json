{"address":"0x1382Ed0b7C587F7912dFC4a96DF8D34C65fe77Be","name":"","metadata":{"compiler":{"version":"0.6.4+commit.1dca32f3"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"bridgeAddress","type":"address"},{"internalType":"bytes32[]","name":"initialResourceIDs","type":"bytes32[]"},{"internalType":"address[]","name":"initialContractAddresses","type":"address[]"},{"internalType":"address[]","name":"burnableContractAddresses","type":"address[]"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"_bridgeAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"_burnList","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"_contractWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"","type":"uint8"},{"internalType":"uint64","name":"","type":"uint64"}],"name":"_depositRecords","outputs":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint8","name":"_lenDestinationRecipientAddress","type":"uint8"},{"internalType":"uint8","name":"_destinationChainID","type":"uint8"},{"internalType":"bytes32","name":"_resourceID","type":"bytes32"},{"internalType":"bytes","name":"_destinationRecipientAddress","type":"bytes"},{"internalType":"address","name":"_depositer","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"_resourceIDToTokenContractAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"_tokenContractAddressToResourceID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"internalType":"uint8","name":"destinationChainID","type":"uint8"},{"internalType":"uint64","name":"depositNonce","type":"uint64"},{"internalType":"address","name":"depositer","type":"address"},{"internalType":"bytes","name":"recipient","type":"bytes"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"internalType":"address","name":"recipientAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"executeProposal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"fundERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"depositNonce","type":"uint64"},{"internalType":"uint8","name":"destId","type":"uint8"}],"name":"getDepositRecord","outputs":[{"components":[{"internalType":"address","name":"_tokenAddress","type":"address"},{"internalType":"uint8","name":"_lenDestinationRecipientAddress","type":"uint8"},{"internalType":"uint8","name":"_destinationChainID","type":"uint8"},{"internalType":"bytes32","name":"_resourceID","type":"bytes32"},{"internalType":"bytes","name":"_destinationRecipientAddress","type":"bytes"},{"internalType":"address","name":"_depositer","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"internalType":"struct ERC20Handler.DepositRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"setBurnable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"setResource","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"internalType":"address","name":"gasFeeRecipient","type":"address"},{"internalType":"uint256","name":"gasFee","type":"uint256"},{"internalType":"address[]","name":"relayers","type":"address[]"},{"internalType":"uint256","name":"relayFee","type":"uint256"}],"name":"transferFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"ChainSafe Systems.","methods":{"constructor":{"details":"{initialResourceIDs} and {initialContractAddresses} must have the same length (one resourceID for every address). Also, these arrays must be ordered in the way that {initialResourceIDs}[0] is the intended resourceID for {initialContractAddresses}[0].","params":{"bridgeAddress":"Contract address of previously deployed Bridge.","burnableContractAddresses":"These addresses will be set as burnable and when {deposit} is called, the deposited token will be burned. When {executeProposal} is called, new tokens will be minted.","initialContractAddresses":"These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be called to perform various deposit calls.","initialResourceIDs":"Resource IDs are used to identify a specific contract address. These are the Resource IDs this contract will initially support."}},"fundERC20(address,address,uint256)":{"params":{"amount":"Amount of tokens to transfer.","owner":"Address of current token owner.","tokenAddress":"Address of ERC20 to transfer."}},"getDepositRecord(uint64,uint8)":{"params":{"depositNonce":"This ID will have been generated by the Bridge contract.","destId":"ID of chain deposit will be bridged to."},"returns":{"_0":"DepositRecord which consists of: - _tokenAddress Address used when {deposit} was executed. - _destinationChainID ChainID deposited tokens are intended to end up on. - _resourceID ResourceID used when {deposit} was executed. - _lenDestinationRecipientAddress Used to parse recipient's address from {_destinationRecipientAddress} - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain. - _depositer Address that initially called {deposit} in the Bridge contract. - _amount Amount of tokens that were deposited."}},"setBurnable(address)":{"params":{"contractAddress":"Address of contract to be used when making or executing deposits."}},"setResource(bytes32,address)":{"params":{"contractAddress":"Address of contract to be called when a deposit is made and a deposited is executed.","resourceID":"ResourceID to be used when making deposits."}},"withdraw(address,address,uint256)":{"params":{"amount":"The amount of ERC20 tokens to release.","recipient":"Address to release tokens to.","tokenAddress":"Address of token contract to release."}}},"title":"Handles ERC20 deposits and deposit executions."},"userdoc":{"methods":{"fundERC20(address,address,uint256)":{"notice":"Used to transfer tokens into the safe to fund proposals."},"setBurnable(address)":{"notice":"First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}] to true."},"setResource(bytes32,address)":{"notice":"First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, and {_contractWhitelist} to true for {contractAddress}."},"withdraw(address,address,uint256)":{"notice":"Used to manually release ERC20 tokens from ERC20Safe."}},"notice":"This contract is intended to be used with the Bridge contract."}},"settings":{"compilationTarget":{"browser/chainBridge/handlers/ERC20Handler.sol":"ERC20Handler"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/chainBridge/ERC20Safe.sol":{"keccak256":"0xfdc360669fc6d43da60139237da8bacba07ab2c93c53cecae910429704d035a5","urls":["bzz-raw://5084bfb4bc0a9af17e1ae7bd6b85168101ab7a4477f6247671d2859701eea7e7","dweb:/ipfs/QmNrRtgFUvyXxiaMph23n36bQeKsQUuuY435d6K5t44GL5"]},"browser/chainBridge/handlers/ERC20Handler.sol":{"keccak256":"0x9f3157d6b51876f3633d5b076a3f85044657a2bbe22186c0974008d3abe11c73","urls":["bzz-raw://847e3784e426d782ce2a1f599cd7bc574c8de5063eef8d9395469e2d0941021f","dweb:/ipfs/QmWxhx3FLwqxzN1qh7dATQAYS7PmknfmzBXngLfLQbMCNi"]},"browser/chainBridge/handlers/HandlerHelpers.sol":{"keccak256":"0x0f1a406ab3e12924bd76109ba29dfcc11e2a2032a499a4704b48814fc0cf045d","urls":["bzz-raw://0ea2186ea4b94841ac3af5fe26c421a4f7ce47cf7eed2ec5ae1c837d0ea2ff2a","dweb:/ipfs/QmWGgNugEZC4iqbXMDop3U82q4qdVECSoJiSrUgDXRL15W"]},"browser/chainBridge/interfaces/IDepositExecute.sol":{"keccak256":"0x7ca1b692eaed14a1124b724b6d9f29ef8c5956188d57b1a490c31539a78f85b1","urls":["bzz-raw://8b39e602ed8e99ca459295fed594a2c9c156a0d758644d55ca981461825c9279","dweb:/ipfs/QmbbAV4a233NWnwABsKcZ2QaG5MDnVBHU2XGoZByz7xGMG"]},"browser/chainBridge/interfaces/IERCHandler.sol":{"keccak256":"0x5f68cb88ca1c0f26142f061d06c8e9a4c8a5171282e47754502aaec81094d130","urls":["bzz-raw://1367426cb732de4b4bc23cdf43d3aaa82dd78eaf1685e9d4c9b0e861da6e3e8b","dweb:/ipfs/QmZfuQyp21tyCGygbdSyrcm3CrHtsBFFttAgdTcomXaCSz"]},"browser/chainBridge/interfaces/IWrapped.sol":{"keccak256":"0x49b9c9173573972e7ac9e3c8c711993f543492c3fb4a297add5078a821631dc1","urls":["bzz-raw://9a61b9fbd0f32e7f6018e1a4918b80fd012d7bb4899f9e00e5eaaecfc9cc1c65","dweb:/ipfs/QmentzMbiEHim3Wuj2cfBv8Dhh9X8HQ6PsvkYevwE7NPPL"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol":{"keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","urls":["bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f","dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/AccessControl.sol":{"keccak256":"0x37ff88aa5ca8f533e31b9e1cb5354816b15bb7d41c904ea1c8f5dd5a78d6da25","urls":["bzz-raw://f3731db435ced7084f2cb3947e708371c10a2e3f654dcfe2a237fc8fbdafbe5f","dweb:/ipfs/QmUyiwkuiP2fYBVaTwwY82sJKxJyPQaBqAtS4uG6iaUSP7"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol":{"keccak256":"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6","urls":["bzz-raw://7f8d45329fecbf0836ad7543330c3ecd0f8d0ffa42d4016278c3eb2215fdcdfe","dweb:/ipfs/QmXWLT7GcnHtA5NiD6MFi2CV3EWJY4wv5mLNnypqYDrxL3"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/presets/ERC20PresetMinterPauser.sol":{"keccak256":"0x7f6066f8892ea22a50f98b31d3b3340b3f058c891e317f6ecca24d67d70127fe","urls":["bzz-raw://a35f0287f053ac1185807348b2220bba6f401026e0dcad6dcb1cc7a1a9d4214a","dweb:/ipfs/QmVaxfTbPyefN2qVK18DJYMbfuvgJK8KkJ9cRS1nY2FLRC"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol":{"keccak256":"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538","urls":["bzz-raw://53c6a80c519bb9356aad28efa9a1ec31603860eb759d2dc57f545fcae1dd1aca","dweb:/ipfs/QmfRS6TtMNUHhvgLHXK21qKNnpn2S7g2Yd1fKaHKyFiJsR"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/ERC20Burnable.sol":{"keccak256":"0x20569e5d91a1f7478f4579962d35b35e5c68e10c5718696e3863c1a588da87c4","urls":["bzz-raw://5ace7d16e99eb77a33c3680964706a39ca6c91aebd4f911f4b70430881cc85b8","dweb:/ipfs/Qmb7g4vz3x238NMF9US6q8xUUamDy9upxZnms6ZaKkN37U"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/ERC20Pausable.sol":{"keccak256":"0xa22af140ae7ec1f8f2f3bed5869cd0d548dfaac66343f0efc7324ff34aaf1254","urls":["bzz-raw://fed479feda7354e89c095fde0927dcb581f460257bf93b7db54b2b902b4bbd48","dweb:/ipfs/QmSDUhS2AQvTGXHwaxDgAXtwXKCgQh2kp1nwhwUgr2hQZK"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5","urls":["bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08","dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x67bf2dd5a56395b107ec6ec049d3bc0be559bcd9800c11549fda9603368f4b1a","urls":["bzz-raw://1bd95d6f0a8757ca62a39b861b35a3b6e8166fcf8b83cbb65150436821b040e0","dweb:/ipfs/QmbfRNRR6cediYriyFQA4SmXTyj8prML12eNuhsbAZU85Q"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/EnumerableSet.sol":{"keccak256":"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2","urls":["bzz-raw://3b61f99a64e999682ad7bfbb3a1c762a20a0a5b30f9f2011693fa857969af61f","dweb:/ipfs/QmZystFY76wkWCf7V3yKh3buZuKVKbswiE7y6yU62kk3zi"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Pausable.sol":{"keccak256":"0x065360ef3924db6b63c2160886b5de737497dd64a917e362dd8d857cda1f5ae2","urls":["bzz-raw://946fe57f3b935f0f4a41345b3eedb617c30912ba5e802bd6b430b394114048ab","dweb:/ipfs/QmRVgUK6yHgqiVWoFn51aUGYejR8romW2ZqwVvSFMnhnJW"]}},"version":1},"version":1,"checkPoints":[]}