{"address":"0xdCD6f2f38823977c2a1e949daadD09947DfC024a","name":"","metadata":{"compiler":{"version":"0.7.5+commit.eb77ed08"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"msgSender","type":"address"},{"indexed":false,"internalType":"address","name":"otherSigner","type":"address"},{"indexed":false,"internalType":"bytes32","name":"operation","type":"bytes32"}],"name":"BatchTransacted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"BatchTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"msgSender","type":"address"}],"name":"SafeModeActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"msgSender","type":"address"},{"indexed":false,"internalType":"address","name":"otherSigner","type":"address"},{"indexed":false,"internalType":"bytes32","name":"operation","type":"bytes32"},{"indexed":false,"internalType":"address","name":"toAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transacted","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"activateSafeMode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"forwarderAddress","type":"address"},{"internalType":"address","name":"tokenContractAddress","type":"address"}],"name":"flushForwarderTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getNextSequenceId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"allowedSigners","type":"address[]"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"signer","type":"address"}],"name":"isSigner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"safeMode","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"toAddress","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"expireTime","type":"uint256"},{"internalType":"uint256","name":"sequenceId","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"sendMultiSig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"uint256","name":"expireTime","type":"uint256"},{"internalType":"uint256","name":"sequenceId","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"sendMultiSigBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"toAddress","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"address","name":"tokenContractAddress","type":"address"},{"internalType":"uint256","name":"expireTime","type":"uint256"},{"internalType":"uint256","name":"sequenceId","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"sendMultiSigToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"signers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"flushForwarderTokens(address,address)":{"params":{"forwarderAddress":"the address of the forwarder address to flush the tokens from","tokenContractAddress":"the address of the erc20 token contract"}},"init(address[])":{"params":{"allowedSigners":"An array of signers on the wallet"}},"isSigner(address)":{"params":{"signer":"address to check returns boolean indicating whether address is signer or not"}},"sendMultiSig(address,uint256,bytes,uint256,uint256,bytes)":{"params":{"data":"the data to send to the toAddress when invoking the transaction","expireTime":"the number of seconds since 1970 for which this transaction is valid","sequenceId":"the unique sequence id obtainable from getNextSequenceId","signature":"see Data Formats","toAddress":"the destination address to send an outgoing transaction","value":"the amount in Wei to be sent"}},"sendMultiSigBatch(address[],uint256[],uint256,uint256,bytes)":{"params":{"expireTime":"the number of seconds since 1970 for which this transaction is valid","recipients":"The list of recipients to send to","sequenceId":"the unique sequence id obtainable from getNextSequenceId","signature":"see Data Formats","values":"The list of values to send to"}},"sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)":{"params":{"expireTime":"the number of seconds since 1970 for which this transaction is valid","sequenceId":"the unique sequence id obtainable from getNextSequenceId","signature":"see Data Formats","toAddress":"the destination address to send an outgoing transaction","tokenContractAddress":"the address of the erc20 token contract","value":"the amount in tokens to be sent"}}},"version":1},"userdoc":{"kind":"user","methods":{"activateSafeMode()":{"notice":"Irrevocably puts contract into safe mode. When in this mode, transactions may only be sent to signing addresses."},"flushForwarderTokens(address,address)":{"notice":"Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer"},"getNextSequenceId()":{"notice":"Gets the next available sequence ID for signing when using executeAndConfirm returns the sequenceId one higher than the one currently stored"},"init(address[])":{"notice":"Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet. 2 signers will be required to send a transaction from this wallet. Note: The sender is NOT automatically added to the list of signers. Signers CANNOT be changed once they are set"},"isSigner(address)":{"notice":"Determine if an address is a signer on this wallet"},"sendMultiSig(address,uint256,bytes,uint256,uint256,bytes)":{"notice":"Execute a multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated."},"sendMultiSigBatch(address[],uint256[],uint256,uint256,bytes)":{"notice":"Execute a batched multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated. The recipients and values to send are encoded in two arrays, where for index i, recipients[i] will be sent values[i]."},"sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)":{"notice":"Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated."}},"notice":"WalletSimple ============ Basic multi-signer wallet designed for use in a co-signing environment where 2 signatures are required to move funds. Typically used in a 2-of-3 signing configuration. Uses ecrecover to allow for 2 signatures in a single transaction. The first signature is created on the operation hash (see Data Formats) and passed to sendMultiSig/sendMultiSigToken The signer is determined by verifyMultiSig(). The second signature is created by the submitter of the transaction and determined by msg.signer. Data Formats ============ The signature is created with ethereumjs-util.ecsign(operationHash). Like the eth_sign RPC call, it packs the values as a 65-byte array of [r, s, v]. Unlike eth_sign, the message is not prefixed. The operationHash the result of keccak256(prefix, toAddress, value, data, expireTime). For ether transactions, `prefix` is \"ETHER\". For token transaction, `prefix` is \"ERC20\" and `data` is the tokenContractAddress.","version":1}},"settings":{"compilationTarget":{"browser/WalletSimple.sol":"WalletSimple"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/ERC20Interface.sol":{"keccak256":"0x521532592130e1365726cbd981d516c20beffa2a6485e02f3bf24a814b98c5c8","license":"UNLICENSED","urls":["bzz-raw://d2dea100a2ccbe5bf8e200990fe20d70911fd1038415004ee2fcfbddf8ac7073","dweb:/ipfs/Qmb48mqttP3xEhyuwPj7RqZnJrMEMgAgCTkyucdA1TEh6D"]},"browser/Forwarder.sol":{"keccak256":"0xbab3b1bf11475678c5de2b6b61bddbfb30a8786280b10a673ccf7b750c0ea2e3","license":"Apache-2.0","urls":["bzz-raw://8a0bd8b189f57dfbe391ece435b109733477be96d168376fa7e719c62eae837c","dweb:/ipfs/QmQsLFpsNFZ38BNFKeDGBA45FH2sYbKUQWiK622DHBa7sz"]},"browser/WalletSimple.sol":{"keccak256":"0x58827d2098b953c4376ed18b6385ed2fc3419b8d45f821eff31d8e2adba072bd","license":"Apache-2.0","urls":["bzz-raw://3b24c653bcdfe3ee833cbb2a12407622a7e48b109557f42d7e6c1b92ae29d699","dweb:/ipfs/QmTaJ9xNiH4wjMno9UEnbFzzfYeBvCnptgh4udDQaLZNwG"]}},"version":1},"version":1,"checkPoints":[]}