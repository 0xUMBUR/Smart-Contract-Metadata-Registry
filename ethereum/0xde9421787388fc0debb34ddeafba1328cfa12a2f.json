{"address":"0xde9421787388FC0dEbb34dDEAFBA1328Cfa12a2F","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinator","type":"address"},{"internalType":"address","name":"link","type":"address"},{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"result","type":"uint256"}],"name":"DiceLanded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"roller","type":"address"}],"name":"DiceRolled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"}],"name":"house","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"keyHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"userProvidedSeed","type":"uint256"},{"internalType":"address","name":"roller","type":"address"}],"name":"rollDice","outputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"setFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"}],"name":"setKeyHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"withdrawLINK","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This is only an example implementation and not necessarily suitable for mainnet.","methods":{"acceptOwnership()":{"details":"Allows an ownership transfer to be completed by the recipient."},"constructor":{"details":"NETWORK: KOVANChainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088Key Hash:   0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4Fee:        0.1 LINK (100000000000000000)","params":{"fee":"uint256 fee to pay the VRF oracle","keyHash":"bytes32 representing the hash of the VRF job","link":"address of the LINK token","vrfCoordinator":"address of the VRF Coordinator"}},"house(address)":{"params":{"player":"address"},"returns":{"_0":"house as a string"}},"rollDice(uint256,address)":{"details":"Warning: if the VRF response is delayed, avoid calling requestRandomness repeatedly as that would give miners/VRF operators latitude about which VRF response arrives first.You must review your implementation details with extreme care.","params":{"roller":"address of the roller","userProvidedSeed":"uint256 unpredictable seed"}},"setFee(uint256)":{"params":{"fee":"uint256"}},"setKeyHash(bytes32)":{"params":{"keyHash":"bytes32"}},"transferOwnership(address)":{"details":"Allows an owner to begin transferring ownership to a new address, pending."},"withdrawLINK(address,uint256)":{"details":"this is an example only, and in a real contract withdrawals should happen according to the established withdrawal pattern:  https://docs.soliditylang.org/en/v0.4.24/common-patterns.html#withdrawal-from-contracts","params":{"to":"the address to withdraw LINK to","value":"the amount of LINK to withdraw"}}}},"userdoc":{"methods":{"constructor":"Constructor inherits VRFConsumerBase","fee()":{"notice":"Get the current fee"},"house(address)":{"notice":"Get the house assigned to the player once the address has rolled"},"keyHash()":{"notice":"Get the current key hash"},"rollDice(uint256,address)":{"notice":"Requests randomness from a user-provided seed"},"setFee(uint256)":{"notice":"Set the oracle fee for requesting randomness"},"setKeyHash(bytes32)":{"notice":"Set the key hash for the oracle"},"withdrawLINK(address,uint256)":{"notice":"Withdraw LINK from this contract."}},"notice":"A Chainlink VRF consumer which uses randomness to mimic the rolling of a 20 sided die"}},"settings":{"compilationTarget":{"gist-55c1263fcfc710f834aa38b7bbd21dc1/VRFD20.sol":"VRFD20"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"gist-55c1263fcfc710f834aa38b7bbd21dc1/VRFD20.sol":{"keccak256":"0xc7417034e5cf864f3bbb02585fa79d5568600a2d4fd417f68cf2b7579c559421","urls":["bzz-raw://9b33aedd5113c02a37f4d77edb1b6ad1f5449ae5fb25e4c8b849575e42182961","dweb:/ipfs/QmRdw5iKigCvkkoAmrWNAwG4vQ486D2uNSFCXScqr6es7x"]},"https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/Owned.sol":{"keccak256":"0x93c014d58b820cc7c081b4b604d939c21942296fe0c0cb0069ca4ee63d728bc6","urls":["bzz-raw://b7e8c0742efb5691733cfc4ab1d81221c4a513223820dea3c6885c138a0fb3a7","dweb:/ipfs/QmV8PwFJcGVdy5AAN4hmeKuRwF3eAjrbfYSeFs3Q5cAYE4"]},"https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/VRFConsumerBase.sol":{"keccak256":"0xbb84a6411e071d5b04b36d7dda59eaf1cb5a28b3b289757a5ac849ddf9befac3","urls":["bzz-raw://6bc702d1ec269920a3f0cf371155b6c4800d36233949873144e95ce3c4427eb3","dweb:/ipfs/QmUrYPpfh7TAcUBx3B5ugW2jCAeWThMssY5oyRgQXQRkbE"]},"https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/VRFRequestIDBase.sol":{"keccak256":"0x0c3bd40c63dac8398a979b1228c8ecb1c269c157dd16f2dce2086d2270b65b22","urls":["bzz-raw://ed9db87be9dfb0f763a556d8d80356b08282b8ea48484838cdf470a5c3cd15d5","dweb:/ipfs/QmPLhwDAS3TPDiEQmTyqXnWBqwEMBSbXtjEiQDSGejoiPt"]},"https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/LinkTokenInterface.sol":{"keccak256":"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68","urls":["bzz-raw://bd2c3165d949fc66fe407b96eb3dc2092c7e800f4c073b411bf7b96de3e156c9","dweb:/ipfs/QmcfJhR1Np4GsLWnww2Duqks2wEzYk8VDTvCAYy7MisG1r"]},"https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/vendor/SafeMathChainlink.sol":{"keccak256":"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f","urls":["bzz-raw://ec45a2748a024a947a921183d4102d5e206808588501d85ddc4f5668a009bc73","dweb:/ipfs/QmRNAMpq7LdWFnJ7wWKGbUuAcURaGSS42PMxtQ4vjrHmp9"]}},"version":1},"version":1,"checkPoints":[]}