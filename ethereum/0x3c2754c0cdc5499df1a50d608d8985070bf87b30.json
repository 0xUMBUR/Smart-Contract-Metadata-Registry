{"address":"0x3c2754c0CDc5499df1a50D608D8985070Bf87b30","name":"","metadata":{"compiler":{"version":"0.7.4+commit.3f05b770"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"unwrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"wrap","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"_id":"ID of the Token","_owner":"The address of the token holder"},"returns":{"_0":"The _owner's balance of the Token type requested"}},"balanceOfBatch(address[],uint256[])":{"params":{"_ids":"ID of the Tokens","_owners":"The addresses of the token holders"},"returns":{"_0":"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"}},"isApprovedForAll(address,address)":{"params":{"_operator":"Address of authorized operator","_owner":"The owner of the Tokens"},"returns":{"_0":"True if the operator is approved, false if not"}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error. MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).","params":{"_data":"Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`","_from":"Source address","_ids":"IDs of each token type (order and length must match _values array)","_to":"Target address","_values":"Transfer amounts per token type (order and length must match _ids array)"}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).","params":{"_data":"Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`","_from":"Source address","_id":"ID of the token type","_to":"Target address","_value":"Transfer amount"}},"setApprovalForAll(address,bool)":{"details":"MUST emit the ApprovalForAll event on success.","params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"supportsInterface(bytes4)":{"details":"Interface identification is specified in ERC-165. This function uses less than 30,000 gas.","params":{"_interfaceId":"The interface identifier, as specified in ERC-165"}}},"version":1},"userdoc":{"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Get the balance of an account's Tokens."},"balanceOfBatch(address[],uint256[])":{"notice":"Get the balance of multiple account/token pairs"},"isApprovedForAll(address,address)":{"notice":"Queries the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call)."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call)."},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens."},"supportsInterface(bytes4)":{"notice":"Query if a contract implements an interface"}},"version":1}},"settings":{"compilationTarget":{"browser/WrappedCurioCards.sol":"WrappedCurioCards"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/Address.sol":{"keccak256":"0x4d100d07ce1174a7bf55f99094e87d55d32f671f5fda9a1ccb1ce54348ab991f","license":"UNLICENSED","urls":["bzz-raw://95ed2454da50053e9ce18e5fb46e5990aba131985066aadb48bb5e458332992a","dweb:/ipfs/QmXnaCbw9ydPwQEPLQS8HxtdsXVoTUnBerDwVvabfJVsVc"]},"browser/Common.sol":{"keccak256":"0xb07e0a63646cdca5f0e7d45acf11a793ed546e9225f16188cb9c91cd85b48edf","license":"UNLICENSED","urls":["bzz-raw://913d36d02c4467b5aed3e7601fe015d7dca18250e498922c3f04c7d041ae30c7","dweb:/ipfs/QmQP6Pvokx9MfNft2gdDGqnMP2r22oB2rnZ7yiE5RcWTPm"]},"browser/ERC1155.sol":{"keccak256":"0x75329b3d24cc3cb6d7fe9040af0919775eb7b62f76e3af0275d169dab788101a","license":"UNLICENSED","urls":["bzz-raw://7ad59cd2098c3490843de28a113821517327c4dd6d2e00e3e5166f66e79dcc7f","dweb:/ipfs/QmUPr2DxYNL24gRkpGPfeiVXmaFo4fCK4ZnYdbNtD8mDiM"]},"browser/ERC165.sol":{"keccak256":"0x91ebbede26b73d052fd0e9e40450f1043824c64c3c155a0f042ee7a1ac924cca","license":"UNLICENSED","urls":["bzz-raw://582888d06e1bfae758f504ea204ecafbf98cfdc2d3134d4f395cb70fc4a79f10","dweb:/ipfs/QmWEbHM2U7iV2eu1hYxgudrGVgsRWwCsGTSigToaMjFzFQ"]},"browser/IERC1155.sol":{"keccak256":"0x08319860010d44c9f56f4d215f771ba26a4176a87b64992d4fcaf0be8cb68a79","license":"UNLICENSED","urls":["bzz-raw://d64c3a4592c686fe13028e75d457818043dd7562d4ecffdbdffb46014ab332b9","dweb:/ipfs/QmP7cotM5dfgfavoFpBm7Do2gBi4bBNv2pj9pZhiAhCkMi"]},"browser/IERC1155TokenReceiver.sol":{"keccak256":"0x2e7fe9ea3ee82cc069eb6495696720e1d9cd82ed62a7a1c65804190771c5b854","license":"UNLICENSED","urls":["bzz-raw://93b48710fb6381bd5c479108bd29b37ba2d70f8c19aad43c9884fc29288c838e","dweb:/ipfs/QmPbrn9vguQBBaZwRirqYMcu9Y3nQeGvc7wCPxK97zFmRV"]},"browser/SafeMath.sol":{"keccak256":"0x07546c00c1e7417a6b9aaef629401d71dae8cfe3b099bf22a7c6b6dde38bbe15","license":"UNLICENSED","urls":["bzz-raw://0e809988fa3dc0a8cc7df624e24c9b61374c4ba2c8f314b6425368ae5c6aefbc","dweb:/ipfs/Qmezam3AHZQ89xyVrZ2jb1q8GqLZKFZjGWC8ohXyZhsuXJ"]},"browser/WrappedCurioCards.sol":{"keccak256":"0xc0f23ff10411d02005d7fcf8bc4eb357dadf36df48e7b4f29cf06f257b554f09","license":"UNLICENSED","urls":["bzz-raw://e2d3fcb597856e6c8f0e42bc7aed80f4d50f247952af211bc6468e3101b5ae6e","dweb:/ipfs/Qmepxut7VaLEE8G1ZmHMMABKnRw7Z8w1ifJ9fk34xAUZdc"]}},"version":1},"version":1,"checkPoints":[]}