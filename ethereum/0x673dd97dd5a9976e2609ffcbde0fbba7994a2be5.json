{"address":"0x673dd97dD5a9976E2609fFCBde0fbba7994a2Be5","name":"","metadata":{"compiler":{"version":"0.6.11+commit.5ef660b1"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_jug","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"}],"name":"accumulateCollateralStabilityFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_pot","type":"address"}],"name":"accumulateDSR","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"address","name":"_cat","type":"address"},{"internalType":"address","name":"_jug","type":"address"},{"internalType":"address","name":"_end","type":"address"},{"internalType":"address","name":"_spot","type":"address"},{"internalType":"address","name":"_reg","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"address","name":"_gem","type":"address"},{"internalType":"address","name":"_join","type":"address"},{"internalType":"address","name":"_flip","type":"address"},{"internalType":"address","name":"_pip","type":"address"}],"name":"addCollateralBase","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_median","type":"address"},{"internalType":"address","name":"_reader","type":"address"}],"name":"addReaderToMedianWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_osm","type":"address"},{"internalType":"address","name":"_reader","type":"address"}],"name":"addReaderToOSMWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_median","type":"address"},{"internalType":"address[]","name":"_readers","type":"address[]"}],"name":"addReadersToMedianWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_median","type":"address"},{"internalType":"address[]","name":"_feeds","type":"address[]"}],"name":"addWritersToMedianWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_osmMom","type":"address"},{"internalType":"address","name":"_osm","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"}],"name":"allowOSMFreeze","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_base","type":"address"},{"internalType":"address","name":"_ward","type":"address"}],"name":"authorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_base","type":"address"},{"internalType":"address","name":"_ward","type":"address"}],"name":"deauthorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"decreaseGlobalDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_global","type":"bool"}],"name":"decreaseIlkDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"increaseGlobalDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_global","type":"bool"}],"name":"increaseIlkDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_iam","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"}],"name":"removeIlkFromAutoLine","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_median","type":"address"},{"internalType":"address","name":"_reader","type":"address"}],"name":"removeReaderFromMedianWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_osm","type":"address"},{"internalType":"address","name":"_reader","type":"address"}],"name":"removeReaderFromOSMWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_median","type":"address"},{"internalType":"address[]","name":"_readers","type":"address[]"}],"name":"removeReadersFromMedianWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_median","type":"address"},{"internalType":"address[]","name":"_feeds","type":"address[]"}],"name":"removeWritersFromMedianWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_log","type":"address"},{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"address","name":"_val","type":"address"}],"name":"setChangelogAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_log","type":"address"},{"internalType":"string","name":"_ipfsHash","type":"string"}],"name":"setChangelogIPFS","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_log","type":"address"},{"internalType":"string","name":"_SHA256Sum","type":"string"}],"name":"setChangelogSHA256","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_log","type":"address"},{"internalType":"string","name":"_version","type":"string"}],"name":"setChangelogVersion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_base","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"bytes32","name":"_what","type":"bytes32"},{"internalType":"address","name":"_addr","type":"address"}],"name":"setContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_base","type":"address"},{"internalType":"bytes32","name":"_what","type":"bytes32"},{"internalType":"address","name":"_addr","type":"address"}],"name":"setContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_spot","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"setDAIReferenceValue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_pot","type":"address"},{"internalType":"uint256","name":"_rate","type":"uint256"}],"name":"setDSR","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flop","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setDebtAuctionBidDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vow","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setDebtAuctionDAIAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vow","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setDebtAuctionDelay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flop","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setDebtAuctionDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vow","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setDebtAuctionMKRAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flop","type":"address"},{"internalType":"uint256","name":"_pct_bps","type":"uint256"}],"name":"setDebtAuctionMKRIncreaseRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_end","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setEmergencyShutdownProcessingTime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setGlobalDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_jug","type":"address"},{"internalType":"uint256","name":"_rate","type":"uint256"}],"name":"setGlobalStabilityFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flip","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setIlkAuctionDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_iam","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setIlkAutoLineDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_iam","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_gap","type":"uint256"},{"internalType":"uint256","name":"_ttl","type":"uint256"}],"name":"setIlkAutoLineParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flip","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setIlkBidDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setIlkDebtCeiling","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cat","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_pct_bps","type":"uint256"}],"name":"setIlkLiquidationPenalty","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_spot","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_pct_bps","type":"uint256"}],"name":"setIlkLiquidationRatio","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cat","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setIlkMaxLiquidationAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flip","type":"address"},{"internalType":"uint256","name":"_pct_bps","type":"uint256"}],"name":"setIlkMinAuctionBidIncrease","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setIlkMinVaultAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_jug","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"uint256","name":"_rate","type":"uint256"},{"internalType":"bool","name":"_doDrip","type":"bool"}],"name":"setIlkStabilityFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cat","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setMaxTotalDAILiquidationAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_median","type":"address"},{"internalType":"uint256","name":"_minQuorum","type":"uint256"}],"name":"setMedianWritersQuorum","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flop","type":"address"},{"internalType":"uint256","name":"_pct_bps","type":"uint256"}],"name":"setMinDebtAuctionBidIncrease","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flap","type":"address"},{"internalType":"uint256","name":"_pct_bps","type":"uint256"}],"name":"setMinSurplusAuctionBidIncrease","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vow","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setSurplusAuctionAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flap","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setSurplusAuctionBidDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_flap","type":"address"},{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"setSurplusAuctionDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vow","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setSurplusBuffer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"address","name":"_cat","type":"address"},{"internalType":"address","name":"_end","type":"address"},{"internalType":"address","name":"_flipperMom","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"},{"internalType":"address","name":"_newFlip","type":"address"},{"internalType":"address","name":"_oldFlip","type":"address"}],"name":"updateCollateralAuctionContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_spot","type":"address"},{"internalType":"bytes32","name":"_ilk","type":"bytes32"}],"name":"updateCollateralPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"address","name":"_vow","type":"address"},{"internalType":"address","name":"_mkrAuthority","type":"address"},{"internalType":"address","name":"_newFlop","type":"address"},{"internalType":"address","name":"_oldFlop","type":"address"}],"name":"updateDebtAuctionContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vat","type":"address"},{"internalType":"address","name":"_vow","type":"address"},{"internalType":"address","name":"_newFlap","type":"address"},{"internalType":"address","name":"_oldFlap","type":"address"}],"name":"updateSurplusAuctionContract","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"accumulateCollateralStabilityFees(address,bytes32)":{"details":"Update rate accumulation for the stability fees of a given collateral type.","params":{"_ilk":"Collateral type","_jug":"Address of the MCD_JUG core contract"}},"accumulateDSR(address)":{"details":"Update rate accumulation for the Dai Savings Rate (DSR).","params":{"_pot":"Address of the MCD_POT core contract"}},"addCollateralBase(address,address,address,address,address,address,bytes32,address,address,address,address)":{"details":"Performs basic functions and sanity checks to add a new collateral type to the MCD system","params":{"_cat":"MCD_CAT","_end":"MCD_END","_flip":"Address of flipper","_gem":"Address of token contract","_ilk":"Collateral type key code [Ex. \"ETH-A\"]","_join":"Address of join adapter","_jug":"MCD_JUG","_pip":"Address of price feed","_reg":"ILK_REGISTRY","_spot":"MCD_SPOT","_vat":"MCD_VAT"}},"addReaderToMedianWhitelist(address,address)":{"details":"Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.","params":{"_median":"Median core contract address","_reader":"Address to add to whitelist"}},"addReaderToOSMWhitelist(address,address)":{"details":"Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.","params":{"_osm":"Oracle Security Module (OSM) core contract address","_reader":"Address to add to whitelist"}},"addReadersToMedianWhitelist(address,address[])":{"details":"Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.","params":{"_median":"Median core contract address","_readers":"Array of addresses to add to whitelist"}},"addWritersToMedianWhitelist(address,address[])":{"details":"Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.","params":{"_feeds":"Array of oracle feed addresses to add to whitelist","_median":"Median core contract address"}},"allowOSMFreeze(address,address,bytes32)":{"details":"Add OSM address to OSM mom, allowing it to be frozen by governance.","params":{"_ilk":"Collateral type using OSM","_osm":"Oracle Security Module (OSM) core contract address","_osmMom":"OSM Mom core contract address"}},"authorize(address,address)":{"details":"Give an address authorization to perform auth actions on the contract.","params":{"_base":"The address of the contract where the authorization will be set","_ward":"Address to be authorized"}},"deauthorize(address,address)":{"details":"Revoke contract authorization from an address.","params":{"_base":"The address of the contract where the authorization will be revoked","_ward":"Address to be deauthorized"}},"decreaseGlobalDebtCeiling(address,uint256)":{"details":"Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to reduce in DAI (ex. 10m DAI amount == 10000000)","_vat":"The address of the Vat core accounting contract"}},"decreaseIlkDebtCeiling(address,bytes32,uint256,bool)":{"details":"Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to decrease in DAI (ex. 10m DAI amount == 10000000)","_global":"If true, decreases the global debt ceiling by _amount","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))","_vat":"The address of the Vat core accounting contract"}},"increaseGlobalDebtCeiling(address,uint256)":{"details":"Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to add in DAI (ex. 10m DAI amount == 10000000)","_vat":"The address of the Vat core accounting contract"}},"increaseIlkDebtCeiling(address,bytes32,uint256,bool)":{"details":"Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to increase in DAI (ex. 10m DAI amount == 10000000)","_global":"If true, increases the global debt ceiling by _amount","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))","_vat":"The address of the Vat core accounting contract"}},"removeIlkFromAutoLine(address,bytes32)":{"details":"Remove an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line","params":{"_iam":"The address of the MCD_IAM_AUTO_LINE core accounting contract","_ilk":"The ilk to remove (ex. bytes32(\"ETH-A\"))"}},"removeReaderFromMedianWhitelist(address,address)":{"details":"Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.","params":{"_median":"Median core contract address","_reader":"Address to remove from whitelist"}},"removeReaderFromOSMWhitelist(address,address)":{"details":"Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.","params":{"_osm":"Oracle Security Module (OSM) core contract address","_reader":"Address to remove from whitelist"}},"removeReadersFromMedianWhitelist(address,address[])":{"details":"Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.","params":{"_median":"Median core contract address","_readers":"Array of addresses to remove from whitelist"}},"removeWritersFromMedianWhitelist(address,address[])":{"details":"Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.","params":{"_feeds":"Array of oracle feed addresses to remove from whitelist","_median":"Median core contract address"}},"setChangelogAddress(address,bytes32,address)":{"details":"Set an address in the MCD on-chain changelog.","params":{"_key":"Access key for the address (e.g. \"MCD_VAT\")","_log":"Address of the chainlog contract","_val":"The address associated with the _key"}},"setChangelogIPFS(address,string)":{"details":"Set IPFS hash of IPFS changelog in MCD on-chain changelog.","params":{"_ipfsHash":"IPFS hash (e.g. \"QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\")","_log":"Address of the chainlog contract"}},"setChangelogSHA256(address,string)":{"details":"Set SHA256 hash in MCD on-chain changelog.","params":{"_SHA256Sum":"SHA256 hash (e.g. \"e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b\")","_log":"Address of the chainlog contract"}},"setChangelogVersion(address,string)":{"details":"Set version in the MCD on-chain changelog.","params":{"_log":"Address of the chainlog contract","_version":"Changelog version (e.g. \"1.1.2\")"}},"setContract(address,bytes32,address)":{"details":"Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)","params":{"_addr":"Address of contract to file","_base":"The address of the contract where the new contract address will be filed","_what":"Name of contract to file"}},"setContract(address,bytes32,bytes32,address)":{"details":"Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)","params":{"_addr":"Address of contract to file","_base":"The address of the contract where the new contract address will be filed","_ilk":"Collateral type","_what":"Name of contract to file"}},"setDAIReferenceValue(address,uint256)":{"details":"Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.Equation used for conversion is value * RAY / 1000","params":{"_spot":"The address of the Spot core contract","_value":"The value to set as integer (x1000) (ex. $1.025 == 1025)"}},"setDSR(address,uint256)":{"details":"Set the Dai Savings Rate. See: docs/rates.txt","params":{"_pot":"The address of the Pot core contract","_rate":"The accumulated rate (ex. 4% => 1000000001243680656318820312)"}},"setDebtAuctionBidDuration(address,uint256)":{"details":"Set bid duration for debt auctions.","params":{"_duration":"Amount of time for bids.","_flop":"The address of the Flopper core contract"}},"setDebtAuctionDAIAmount(address,uint256)":{"details":"Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 10m DAI amount == 10000000)","_vow":"The address of the Vow core contract"}},"setDebtAuctionDelay(address,uint256)":{"details":"Set the number of seconds that pass before system debt is auctioned for MKR tokens.","params":{"_duration":"Duration in seconds","_vow":"The address of the Vow core contract"}},"setDebtAuctionDuration(address,uint256)":{"details":"Set total auction duration for debt auctions.","params":{"_duration":"Amount of time for auctions.","_flop":"The address of the Flopper core contract"}},"setDebtAuctionMKRAmount(address,uint256)":{"details":"Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in MKR (ex. 250 MKR amount == 250)","_vow":"The address of the Vow core contract"}},"setDebtAuctionMKRIncreaseRate(address,uint256)":{"details":"Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.MKR amount is increased by this rate every \"tick\" (if auction duration has passed and no one has bid on the MKR)Equation used for conversion is (pct + 100,000) * WAD / 100,000 (ex. changes 50% to 150% WAD needed for pad)","params":{"_flop":"The address of the Flopper core contract","_pct_bps":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)"}},"setEmergencyShutdownProcessingTime(address,uint256)":{"details":"Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.","params":{"_duration":"Time in seconds to set for ES processing time","_end":"The address of the End core contract"}},"setGlobalDebtCeiling(address,uint256)":{"details":"Set the global debt ceiling. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 10m DAI amount == 10000000)","_vat":"The address of the Vat core accounting contract"}},"setGlobalStabilityFee(address,uint256)":{"details":"Set the global stability fee (is not typically used, currently is 0). Many of the settings that change weekly rely on the rate accumulator described at https://docs.makerdao.com/smart-contract-modules/rates-module To check this yourself, use the following rate calculation (example 8%): $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )' A table of rates can also be found at: https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW","params":{"_jug":"The address of the Jug core accounting contract","_rate":"The accumulated rate (ex. 4% => 1000000001243680656318820312)"}},"setIlkAuctionDuration(address,uint256)":{"details":"Set auction duration for a collateral type.","params":{"_duration":"Amount of time for auctions.","_flip":"The address of the ilk's flip core accounting contract"}},"setIlkAutoLineDebtCeiling(address,bytes32,uint256)":{"details":"Set the debt ceiling for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line without updating the time values","params":{"_amount":"The amount to decrease in DAI (ex. 10m DAI amount == 10000000)","_iam":"The address of the Vat core accounting contract","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))"}},"setIlkAutoLineParameters(address,bytes32,uint256,uint256,uint256)":{"details":"Set the parameters for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line","params":{"_amount":"The Maximum value (ex. 100m DAI amount == 100000000)","_gap":"The amount of Dai per step (ex. 5m Dai == 5000000)","_iam":"The address of the Vat core accounting contract","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))","_ttl":"The amount of time (in seconds)"}},"setIlkBidDuration(address,uint256)":{"details":"Set bid duration for a collateral type.","params":{"_duration":"Amount of time for bids.","_flip":"The address of the ilk's flip core accounting contract"}},"setIlkDebtCeiling(address,bytes32,uint256)":{"details":"Set a collateral debt ceiling. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 10m DAI amount == 10000000)","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))","_vat":"The address of the Vat core accounting contract"}},"setIlkLiquidationPenalty(address,bytes32,uint256)":{"details":"Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.Equation used for conversion is (pct + 100,000) * WAD / 100,000 (ex. changes 13% to 113% WAD needed for chop)","params":{"_cat":"The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))","_pct_bps":"The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)"}},"setIlkLiquidationRatio(address,bytes32,uint256)":{"details":"Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.Equation used for conversion is pct * RAY / 100,000","params":{"_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))","_pct_bps":"The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)","_spot":"The address of the Spot core accounting contract"}},"setIlkMaxLiquidationAmount(address,bytes32,uint256)":{"details":"Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 10m DAI amount == 10000000)","_cat":"The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))"}},"setIlkMinAuctionBidIncrease(address,uint256)":{"details":"Set minimum bid increase for collateral. Amount will be converted to the correct internal precision.Equation used for conversion is pct * WAD / 100,000","params":{"_flip":"The address of the ilk's flip core accounting contract","_pct_bps":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)"}},"setIlkMinVaultAmount(address,bytes32,uint256)":{"details":"Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 10m DAI amount == 10000000)","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\"))","_vat":"The address of the Vat core accounting contract"}},"setIlkStabilityFee(address,bytes32,uint256,bool)":{"details":"Set the stability fee for a given ilk. Many of the settings that change weekly rely on the rate accumulator described at https://docs.makerdao.com/smart-contract-modules/rates-module To check this yourself, use the following rate calculation (example 8%): $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )' A table of rates can also be found at: https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW","params":{"_doDrip":"`true` to accumulate stability fees for the collateral","_ilk":"The ilk to update (ex. bytes32(\"ETH-A\") )","_jug":"The address of the Jug core accounting contract","_rate":"The accumulated rate (ex. 4% => 1000000001243680656318820312)"}},"setMaxTotalDAILiquidationAmount(address,uint256)":{"details":"Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 250,000 DAI amount == 250000)","_cat":"The address of the Cat core contract"}},"setMedianWritersQuorum(address,uint256)":{"details":"Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.","params":{"_median":"Median core contract address","_minQuorum":"Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)"}},"setMinDebtAuctionBidIncrease(address,uint256)":{"details":"Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.Equation used for conversion is pct * WAD / 100,000","params":{"_flop":"The address of the Flopper core contract","_pct_bps":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)"}},"setMinSurplusAuctionBidIncrease(address,uint256)":{"details":"Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.Equation used for conversion is pct * WAD / 100,000","params":{"_flap":"The address of the Flapper core contract","_pct_bps":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)"}},"setSurplusAuctionAmount(address,uint256)":{"details":"Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 10m DAI amount == 10000000)","_vow":"The address of the Vow core contract"}},"setSurplusAuctionBidDuration(address,uint256)":{"details":"Set bid duration for surplus auctions.","params":{"_duration":"Amount of time for bids.","_flap":"The address of the Flapper core contract"}},"setSurplusAuctionDuration(address,uint256)":{"details":"Set total auction duration for surplus auctions.","params":{"_duration":"Amount of time for auctions.","_flap":"The address of the Flapper core contract"}},"setSurplusBuffer(address,uint256)":{"details":"Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.","params":{"_amount":"The amount to set in DAI (ex. 10m DAI amount == 10000000)","_vow":"The address of the Vow core contract"}},"updateCollateralAuctionContract(address,address,address,address,bytes32,address,address)":{"details":"Update collateral auction contracts.","params":{"_cat":"Cat core contract address","_end":"End core contract address","_flipperMom":"Flipper Mom core contract address","_ilk":"The collateral's auction contract to update","_newFlip":"New auction contract address","_oldFlip":"Old auction contract address","_vat":"Vat core contract address"}},"updateCollateralPrice(address,bytes32)":{"details":"Update price of a given collateral type.","params":{"_ilk":"Collateral type","_spot":"Spotter contract address"}},"updateDebtAuctionContract(address,address,address,address,address)":{"details":"Update debt auction contracts.","params":{"_mkrAuthority":"MKRAuthority core contract address","_newFlop":"New debt auction contract address","_oldFlop":"Old debt auction contract address","_vat":"Vat core contract address","_vow":"Vow core contract address"}},"updateSurplusAuctionContract(address,address,address,address)":{"details":"Update surplus auction contracts.","params":{"_newFlap":"New surplus auction contract address","_oldFlap":"Old surplus auction contract address","_vat":"Vat core contract address","_vow":"Vow core contract address"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"browser/DssExecLib.sol":"DssExecLib"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/DssExecLib.sol":{"keccak256":"0x62ede999c0d1e5b5b5e6fe34b553844df2c7ba6ca87c75a25b85bfe121e5641f","license":"AGPL-3.0-or-later","urls":["bzz-raw://1640adf9f67107bcde84cb72d0088dcbff1def7ab9197b97949b9d6db1b36195","dweb:/ipfs/QmYbpxShUpFexEUwZXt2z4eVsGA1XvTtpsr1tnJFJA5nyJ"]}},"version":1},"version":1,"checkPoints":[]}