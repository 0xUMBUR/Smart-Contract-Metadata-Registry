{"address":"0x224DB5E6180761df4C3d8936585f6b8b83879770","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"TransferEnabled","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OLUSTURAN","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_imza","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finishMinting","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"recoverERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Osman Kuzucu (https://omlira.com)","details":"Implementation of the BaseToken for OM Lira","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."},"approveAndCall(address,uint256)":{"details":"Approve spender to transfer tokens and then execute a callback on recipient.","params":{"spender":"The address allowed to transfer to","value":"The amount allowed to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"approveAndCall(address,uint256,bytes)":{"details":"Approve spender to transfer tokens and then execute a callback on recipient.","params":{"data":"Additional data with no specified format.","spender":"The address allowed to transfer to.","value":"The amount allowed to be transferred."},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller.     * See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance.     * See {ERC20-_burn} and {ERC20-allowance}.     * Requirements:     * - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"cap()":{"details":"Returns the cap on the token's total supply."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"disableTransfer()":{"details":"Function to disable transfers if required."},"enableTransfer()":{"details":"Function to enable transfers."},"finishMinting()":{"details":"Function to stop minting new tokens."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."},"mint(address,uint256)":{"details":"Function to mint tokens.","params":{"to":"The address that will receive the minted tokens","value":"The amount of tokens to mint"}},"name()":{"details":"Returns the name of the token."},"owner()":{"details":"Returns the address of the current owner."},"recoverERC20(address,uint256)":{"details":"Remember that only owner can call so be careful when use on contracts generated from other contracts.","params":{"tokenAddress":"The token contract address","tokenAmount":"Number of tokens to be sent"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"Transfer tokens to a specified address.","params":{"to":"The address to transfer to","value":"The amount to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferAndCall(address,uint256)":{"details":"Transfer tokens to a specified address and then execute a callback on recipient.","params":{"to":"The address to transfer to.","value":"The amount to be transferred."},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferAndCall(address,uint256,bytes)":{"details":"Transfer tokens to a specified address and then execute a callback on recipient.","params":{"data":"Additional data with no specified format","to":"The address to transfer to","value":"The amount to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFrom(address,address,uint256)":{"details":"Transfer tokens from one address to another.","params":{"from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"the amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFromAndCall(address,address,uint256)":{"details":"Transfer tokens from one address to another and then execute a callback on recipient.","params":{"from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"The amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Transfer tokens from one address to another and then execute a callback on recipient.","params":{"data":"Additional data with no specified format","from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"The amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"OM Lira"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"browser/github/omprojesi/omlira/OMLira.sol":"OMLira"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/github/omprojesi/omlira/Context.sol":{"keccak256":"0x9ec11968bb38aaa1eb9c9fba298215d28cb803fcf0ff93ca24fc8c8811a9975b","urls":["bzz-raw://67ba5bcbde3a7d6440197c0fe7f51ca1d518c4cfb6875cba0e77d3bf09860aa2","dweb:/ipfs/QmQoEk9ALQw4PRxpgjJREhYMtbnmQTtSRBvyo3pLfeDCQt"]},"browser/github/omprojesi/omlira/ERC1363/ERC1363.sol":{"keccak256":"0x9920baaf7b9fae0cf1d94f5d38a83dea3ab2e7fc57bcbfbf8a26fac4ba83e7f4","urls":["bzz-raw://bc6c332889d2563d2c4ee604399efc64e4828c074a25a3250e6bc5cfbe2065b2","dweb:/ipfs/QmTQS1wJs6a1QuMskvG76zCjKpLvt4vtPW4hkR2mjbvg99"]},"browser/github/omprojesi/omlira/ERC1363/IERC1363.sol":{"keccak256":"0x04f3e8671c4f8f302dd94d9a511d7e0d45b38932fdf3fa3f899d8ebe8178d081","urls":["bzz-raw://9030aad2809c192c7285e37cff6bc1b2c9b7040b089bc61288844775d401e50a","dweb:/ipfs/QmexT4EteUKErjYjv1oovn5kCL2HBj7tWekHXoCiv2SkJH"]},"browser/github/omprojesi/omlira/ERC1363/IERC1363Receiver.sol":{"keccak256":"0x65e12dcea507fb235f2b931fed3ac6fdc6efeda9bce663c8fbc461f63531ba02","urls":["bzz-raw://6908406a3ead8750fb8b3ecd413e8404c949e6725ba13774564bc4118f06e003","dweb:/ipfs/QmbMmdkcYNb9QxS7dtKobG18HjpSKC5iuvZ8EhAVp8u11J"]},"browser/github/omprojesi/omlira/ERC1363/IERC1363Spender.sol":{"keccak256":"0xbf663c8fde76ed080f82e4fd80681d99ebb07b4a9228fa8e52a04035f24b26eb","urls":["bzz-raw://7702b7004e64b75fa990d430ddd352f60f5c400ab558ff7176b44bc89346b8c1","dweb:/ipfs/QmUATVDgH7qdy3CEyHNu2NF2rBzBg9B2wVoc9kPfKPiAuY"]},"browser/github/omprojesi/omlira/ERC20/ERC20.sol":{"keccak256":"0x6fc5ddacd0ee37fffa45c7c7d583827479640fb8f5ddef32d99bbf59f8dd2f3d","urls":["bzz-raw://1b7ec266437c33e6640c25a6139f13a675826dd64ed5e751ef870a3f36dc8f4b","dweb:/ipfs/QmR633f7vQfco7FjLvzwkpripWLegZ4FESPAMmYBqo1qm4"]},"browser/github/omprojesi/omlira/ERC20/ERC20Burnable.sol":{"keccak256":"0x1233dd0b00360924ff16adc417d85654c1ff0e525d67d73c14d376580331efb8","urls":["bzz-raw://94a0d048fb8070b7a3805270e322b39a9d1322ee396078413d04c4c39416a8eb","dweb:/ipfs/QmTUbab8zbr1myoyPDpGX2SuG7ffAPipcTqw44wphdnbeh"]},"browser/github/omprojesi/omlira/ERC20/ERC20Capped.sol":{"keccak256":"0xc71ea800cdfe0f3692d7932f78fd33a74d2184382fcee35f7a32812e338be258","urls":["bzz-raw://5755f80b9b8bae44255adac91744cd67c3d3841b20cae74a54221284f9cd63c0","dweb:/ipfs/QmUTBcGJXSqzL7zw4bQFZUanHQVs4N4SNHMP1bbKzEx6ab"]},"browser/github/omprojesi/omlira/ERC20/IERC20.sol":{"keccak256":"0x1eec7265af343186e0f41d5704597a11817708a3f2a7a66d5c4317da78540210","urls":["bzz-raw://57cda3977aa403fc0868d347477632a252643c7d425813c74ed5a6bde8039255","dweb:/ipfs/QmRr1ML6AJ4veQpauujh8eAjWvG2VwJJBm3aUpqmnMWtKX"]},"browser/github/omprojesi/omlira/OMLira.sol":{"keccak256":"0xa188b5d285c84c2b6607f1716cf53c58a9db29ef2136845601ac392d0069cd60","urls":["bzz-raw://c63ad39d11ba4f6aeb6f5a52e48f049b6add306a848258db5416025a6bfdbb64","dweb:/ipfs/QmNWcmCQFWwWDV2DTCbSu7HEQ4g59GWEyWxYPoiiU37M4u"]},"browser/github/omprojesi/omlira/TokenRecover.sol":{"keccak256":"0x19c34c7cd20accd7740978bfbfb16ccebc361e0261ad5cc007fe6afb5f575a9f","urls":["bzz-raw://e680f6e1815c483a345679546e2583f8f5ba97dd9badc0fe5d0b4947c8ebf2f1","dweb:/ipfs/QmSEg1gozycEvo5pRuzRSTjCpvNmCKyYuTfniaxuYKB9Qh"]},"browser/github/omprojesi/omlira/access/AccessControl.sol":{"keccak256":"0xf07ef678df4c3b7045ef07505a9654afc0b6375d36acf7d8536ca0baf2a7f318","urls":["bzz-raw://321e0ed58bfc0741806ac1ede4364f04d3919315a29aee5879b54363d2655819","dweb:/ipfs/QmNY4DWJ7pc4LMTkGhNiK3qy8ALY2Fyj2YV5dQzSnNqwBp"]},"browser/github/omprojesi/omlira/access/Ownable.sol":{"keccak256":"0xa19d5671b6713b018ecd9da6c488d889d6226be54ccd5e7e76f6c496705b1b19","urls":["bzz-raw://990eb4dd1dc5d321299f3f76462043dc880a7d5e345817b8584b5550bf9ba3f8","dweb:/ipfs/QmRQ5VWwt7uWSYmUT7T4Q4S3FGod8jgrK9mT3AkBzdUMDS"]},"browser/github/omprojesi/omlira/access/Roles.sol":{"keccak256":"0x4d68b82dfe2aae0c5ca124d8cc606a5e3d4eb3d143309805d27ceda209df3b31","urls":["bzz-raw://3970b3fdaf462e8e6b78101e16b7c46dca9fc3f2786317eb3b7e4c6485b22c06","dweb:/ipfs/QmWyYqg3HEddGr37nxpXfGgx7YAEqbY1VcbjRHeg7fh5kK"]},"browser/github/omprojesi/omlira/introspection/ERC165.sol":{"keccak256":"0xb75a3697d98bd706c2a4c51d95771e6a009472548a4aa54b04714db1c19fa88a","urls":["bzz-raw://d6e0b7085b6b75ee29fa910f7a56f97e16a091c81fc06f171dba5648fe6d9a6b","dweb:/ipfs/Qmettu2iNzzHGAN1rJdUWUGqxdCki9y2guLSTa36FGQeya"]},"browser/github/omprojesi/omlira/introspection/IERC165.sol":{"keccak256":"0x603b18bc7a64914e0be4acd45d28cb47fcf7c88a81159bb2d800b42f6d4f6758","urls":["bzz-raw://85386507998dc8daec91a270c0cf7d10a758230cd8ea010d2edcab9b9047ed35","dweb:/ipfs/QmSKAoHDZGzRvrRjs1p56V8TGvS75fub7Wn4Xm9HJeEUBi"]},"browser/github/omprojesi/omlira/math/SafeMath.sol":{"keccak256":"0xa36a7b370cc5fe4be6358cc8f8e5b236c9b8c5dc57dfc472a7f81400ba86099e","urls":["bzz-raw://7aa771ffe3d39d2b6c8b5db675520e50d88da1fbb211093a84cb063d9a4a628c","dweb:/ipfs/QmSc1s2JC2qMct8wKBBGL4YrWi6xBXz8XxQDb6cvFiWzng"]},"browser/github/omprojesi/omlira/utils/Address.sol":{"keccak256":"0x95ab5946f04d7d1f6f1ddaae196b9aea974b8e39a6cf2f94d0678b54186cf952","urls":["bzz-raw://788aa249ac4dbf9ced05dc9f65038ee3a3e516ed6324099c8dd904f34fc5375a","dweb:/ipfs/QmSM35jDe6EXVWxxo9qe574MQ4vV2qtq8NoWruLRe7jCWz"]},"browser/github/omprojesi/omlira/utils/EnumerableSet.sol":{"keccak256":"0xe2a9ad9ddc0004c34fa5e59e0c70f9e5a61ff17a6419de0bc8745b31525c310b","urls":["bzz-raw://1ee2bcdb983c586b2bb8af4d4157e1136c25c3eebdcd3459ee729888afd0ba4c","dweb:/ipfs/QmPwoNSZgd3L6ghCA1Rih58AJayF4FLMVS7mcySC6AikBN"]}},"version":1},"version":1,"checkPoints":[]}