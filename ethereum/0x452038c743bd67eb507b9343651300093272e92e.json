{"address":"0x452038C743BD67eb507B9343651300093272E92e","name":"","metadata":{"compiler":{"version":"0.6.8+commit.0bbfe453"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"contract GoldfinchConfig","name":"_config","type":"address"}],"name":"__initialize__","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"config","outputs":[{"internalType":"contract GoldfinchConfig","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mintTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Goldfinch","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller.     * See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance.   * See {ERC20-_burn} and {ERC20-allowance}.   * Requirements:   * - the caller must have the MINTER_ROLE"},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."},"initialize(string,string)":{"details":"Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract.     * See {ERC20-constructor}."},"mint(address,uint256)":{"details":"Creates `amount` new tokens for `to`.     * See {ERC20-_mint}.     * Requirements:     * - the caller must have the `MINTER_ROLE`."},"mintTo(address,uint256)":{"details":"Creates `amount` new tokens for `to`.   * See {ERC20-_mint}.   * Requirements:   * - the caller must have the `MINTER_ROLE`."},"name()":{"details":"Returns the name of the token."},"pause()":{"details":"Pauses all token transfers.     * See {ERC20Pausable} and {Pausable-_pause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"unpause()":{"details":"Unpauses all token transfers.     * See {ERC20Pausable} and {Pausable-_unpause}.     * Requirements:     * - the caller must have the `PAUSER_ROLE`."}},"title":"Fidu"},"userdoc":{"methods":{},"notice":"Fidu (symbol: FIDU) is Goldfinch's liquidity token, representing shares in the Pool. When you deposit, we mint a corresponding amount of Fidu, and when you withdraw, we burn Fidu. The share price of the Pool implicitly represents the \"exchange rate\" between Fidu and USDC (or whatever currencies the Pool may allow withdraws in during the future)"}},"settings":{"compilationTarget":{"contracts/protocol/Fidu.sol":"Fidu"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol":{"keccak256":"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e","urls":["bzz-raw://1332ee1d2b096456bf2e5795b5871d0fed47be6a31c9a2f2cef9206a299565ea","dweb:/ipfs/Qmdu1847Y4UL3gTjbLUManMGfxYEoyGPSodM3Br89SKzwx"]},"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol":{"keccak256":"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721","urls":["bzz-raw://5cf7c208583d4d046d75bd99f5507412ab01cce9dd9f802ce9768a416d93ea2f","dweb:/ipfs/QmcQS1BBMPpVEkXP3qzwSjxHNrqDek8YeR7xbVWDC9ApC7"]},"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol":{"keccak256":"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86","urls":["bzz-raw://944779923ae00addaad98671de2303268765d53f1b0d66076280585edd084862","dweb:/ipfs/QmRtRFCkvsWD3c6WBpAh3wgMZKXBaFfRAvB76TsVFiUdEw"]},"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol":{"keccak256":"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296","urls":["bzz-raw://e7e8b526a6839e5ba14f0d23a830387fec47f7043ce01d42c9f285b709a9d080","dweb:/ipfs/QmXmhhFmX5gcAvVzNiDPAGA35iHMPNaYtQkACswRHBVTNw"]},"@openzeppelin/contracts-ethereum-package/contracts/presets/ERC20PresetMinterPauser.sol":{"keccak256":"0x62ab46b814f8a7ee29eb4c401cb0c4b3482465523800e60f31769dc745e6093e","urls":["bzz-raw://62c86f1110e72d913145b9f46639fe44dcc2f4d048a65136cbdde9859da9bc3a","dweb:/ipfs/Qmbh1qyVvfSLjUo9rE49CmHdguRyjkwVnDc528d5mMpppX"]},"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol":{"keccak256":"0x9c2d859bc9de93ced0875d226598e56067fe4d6b2dde0e1fd53ca60fa9603db0","urls":["bzz-raw://5df1baba4ea42a94d0e0aed4a87271369ef2cd54d86e89cab7ef1428ff387210","dweb:/ipfs/QmV5ErriAFQWqEPAfWhJ6DxmujH6vBPB3F5Breaq9vUWGu"]},"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol":{"keccak256":"0x97bd82ddbbfc8c29ac8f6088cfdebd81d2c4ae3630d6b9d43d5c5ccbd0ff1e90","urls":["bzz-raw://5631ae85e90961e255d990b0dd2dcaf0a900e3aa22a58e641a5e84684ec965b8","dweb:/ipfs/QmZsPiKYq68FJJMHfD5R2ndjaMYGq3xYzeuTPAwPfQ5pZN"]},"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol":{"keccak256":"0x9268f57dedb013b67499bc6280d728dc953f6b0d75d7558fed9fc5733332a31d","urls":["bzz-raw://4db6d8575b134b28d9aadf1f7c176a2f9c9bf9d949b444e113480ddae1a8744e","dweb:/ipfs/QmVdg4FEwG6DVi3P3LYhkodFkZeEq4b2k7yr7VkKppeiyB"]},"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad","urls":["bzz-raw://0055fa88138cd1c3c6440370f8580f85857f8fe9dec41c99af9eafbeb8d9c3ce","dweb:/ipfs/QmX1xDh8vwGLLCH8ti45eXjQ7Wcxv1FEGTR3jkFnd5Nv6F"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol":{"keccak256":"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b","urls":["bzz-raw://4f089d954b3ecaa26949412fe63e9a184b056562c6c13dd4a0529a5d9a2e685a","dweb:/ipfs/QmVK5iCNAMcEJQxT59bsC5E53JQASDQPU6khHox3d5ZXCn"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol":{"keccak256":"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1","urls":["bzz-raw://b020d65f592c1715bc3d5799ad835cd975ef7d314f340f27603fb99ad86a0427","dweb:/ipfs/QmQoGZmzE5aDTMGJM4BW77eraerfTSV9Rs8wykpQ42i1in"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol":{"keccak256":"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006","urls":["bzz-raw://a737c60474c063efc28e5922b6a1d073588c010eb67f883273d3ec29d8e52d6b","dweb:/ipfs/QmWCeqeZhR45S1mcjPRYEMy1DCHMy9sXDfwYLPycFRh2Nk"]},"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882","urls":["bzz-raw://5916e664a17b3fdbdc311579705bad74f433769c340346c371db2ecfa8427d24","dweb:/ipfs/QmYNLuiPo4iRPWFJriVgqPELRUrFBFLpp5YnMMmqQ8zhBh"]},"contracts/interfaces/ICreditDesk.sol":{"keccak256":"0x23626d15fe64ffb5282f2bedec88b1b5c6e1c8196f23db0d044ba9f773f11dec","license":"MIT","urls":["bzz-raw://c067a128da059f3ef18f7ef03bbc0927935d658f5c9cd7399862d404ae1c8d75","dweb:/ipfs/QmPeAMtb2dwqjw8AhXSp4dp3Sxppqq4MtLyiancFdsT5Gb"]},"contracts/interfaces/IERC20withDec.sol":{"keccak256":"0xc49490b8d90d7e115e945b12fdcfa61c72703c1a207b546cacafda0524e597d9","license":"MIT","urls":["bzz-raw://b05098568db1d527fdf26f036a67b2ddb329e7d876d557592e04002e9276578d","dweb:/ipfs/QmPXVXSotB7NNeUDqpCFbXwpshMgSxcFjbjMxnVrBjXXxN"]},"contracts/interfaces/IFidu.sol":{"keccak256":"0xabf76656e1540e8a0248d6b6c630f7932303fe71b2c9fafc73acd9daf8d135c6","license":"MIT","urls":["bzz-raw://6c160afbdbb91a3d7b838b9f1c55df056376e4a4f1d5ecfd4883bfa6820ebeac","dweb:/ipfs/QmWsC7zqWixfEj8WKJKetb8vKHznXubH8E4Tyvk1KLei9D"]},"contracts/interfaces/IPool.sol":{"keccak256":"0xc03d01a4f40b912eb998c284092eacecfcd160b72d5ee60539b8ba13adc040af","license":"MIT","urls":["bzz-raw://fdb6bc7e51ad9e870ea0abd30884474f62f0fcc5dc738c91441007daee1e1105","dweb:/ipfs/QmamTKspy6HaodG5khEd2ddpvW4eGpJwVqrXs8WpPF2jFH"]},"contracts/protocol/BaseUpgradeablePausable.sol":{"keccak256":"0x65066c522d928c91f5c0dd9e91a32b7f6c31e9eccefe610666721b3d1774ceb0","license":"MIT","urls":["bzz-raw://e865fb01d98708e4f2230d55ef48c586b2b0bc01e5c17501e188857e65a11f78","dweb:/ipfs/Qmaypp6tGEGBr3Vyw3HkH4RWJDmksR5wdiET3jGnMYTX5v"]},"contracts/protocol/ConfigHelper.sol":{"keccak256":"0x00cacab6e09adb60c93ec3bea9f3d63a8741a5acbd9667e120ef1ed5e5c907ab","license":"MIT","urls":["bzz-raw://02980e1e612d38c9c6516e63736e383060ff8f88ca8b4290c7e42acbdee17a75","dweb:/ipfs/QmVPBFqmHAZSwfb6f7maYHZUzXeUx6jYgam9aCoaYCaZ7y"]},"contracts/protocol/ConfigOptions.sol":{"keccak256":"0x28b60fc6aacc32f58d7de8683ac71c5a86780ddc4490a01eab0dc562845c75e2","license":"MIT","urls":["bzz-raw://82525689120dbb4876a5a5f53c48a6263683bb4dd8237f2da37e917bad552492","dweb:/ipfs/QmZhxfFaK7mZKApVFHdPgM7q96ovF9nbB9H7D6jaYgRxoD"]},"contracts/protocol/Fidu.sol":{"keccak256":"0x56c8d85ac0a50123912094e46e2e947a8104609ad1f4be793f8baf1f704aec5b","license":"MIT","urls":["bzz-raw://c754565c1a49bb4787422563293bca6faad660f1c9fca04000698cd5bd25650e","dweb:/ipfs/QmV9UXapUmYbU5BLQWymHBr8bJQXdMSqMwtnpjvTdmy6Du"]},"contracts/protocol/GoldfinchConfig.sol":{"keccak256":"0x402c902928f770020d4faacb706cce60f19ae1bffa9eb3180ff0bd391055a5b0","license":"MIT","urls":["bzz-raw://c34e2e987cfa3465e541c1162b37bdb9e7e6964f2ef065bb68f0f35d0000d469","dweb:/ipfs/QmbfAfnNkWdeF88q92y9DZsU1u8XJNKdiFwoEn6p36ZTdv"]},"contracts/protocol/PauserPausable.sol":{"keccak256":"0xfff607f8bb9d2c7775685f51a33c9ad67b8d992162ba9ca8c2d0f6b61c5b83e7","license":"MIT","urls":["bzz-raw://9c8ae72e411e6b19ac0f31c78f4636eb262c42898fe8be529784dd37143d8f20","dweb:/ipfs/QmdDziezsW1jZWJzZzznU9TphBme194XP4Xi1C6StmTX2w"]}},"version":1},"version":1,"checkPoints":[]}