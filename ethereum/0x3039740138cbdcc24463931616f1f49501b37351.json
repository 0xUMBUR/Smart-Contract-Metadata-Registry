{"address":"0x3039740138cbdcc24463931616f1F49501B37351","name":"","metadata":{"compiler":{"version":"0.5.12+commit.7709ece9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"_initialSupply","type":"uint256"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"string","name":"_uriBase","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":false,"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_extraTokens","type":"uint256"}],"name":"issueTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"_name","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}],"devdoc":{"methods":{"approve(address,uint256)":{"details":"The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.","params":{"_approved":"The new approved NFT controller","_tokenId":"The NFT to approve"}},"balanceOf(address)":{"details":"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.","params":{"_owner":"An address for whom to query the balance"},"return":"The number of NFTs owned by `_owner`, possibly zero"},"constructor":{"params":{"_initialSupply":"The number of tokens to mint initially (see TokenERC721)"}},"getApproved(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT","params":{"_tokenId":"The NFT to find the approved address for"},"return":"The approved address for this NFT, or the zero address if there is none"},"isApprovedForAll(address,address)":{"params":{"_operator":"The address that acts on behalf of the owner","_owner":"The address that owns the NFTs"},"return":"True if `_operator` is an approved operator for `_owner`, false otherwise"},"issueTokens(uint256)":{"details":"See TokenERC721 - is largely identical except for some array manipulation.","params":{"_extraTokens":"The number of extra tokens to mint."}},"ownerOf(uint256)":{"details":"NFTs assigned to zero address are considered invalid, and queries  about them do throw.","params":{"_tokenId":"The identifier for an NFT"},"return":"The address of the owner of the NFT"},"safeTransferFrom(address,address,uint256)":{"details":"This works identically to the other function with an extra data parameter,  except this function just sets data to \"\"","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer","data":"Additional data with no specified format, sent in call to `_to`"}},"setApprovalForAll(address,bool)":{"details":"Emits the ApprovalForAll event","params":{"_approved":"True if the operators is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators."}},"tokenByIndex(uint256)":{"details":"Throws if `_index` >= `totalSupply()`.","params":{"_index":"A counter less than `totalSupply()`"},"return":"The token identifier for the `_index`th NFT,  (sort order not specified)"},"tokenOfOwnerByIndex(address,uint256)":{"details":"Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.","params":{"_index":"A counter less than `balanceOf(_owner)`","_owner":"An address where we are interested in NFTs owned by them"},"return":"The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)"},"tokenURI(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".","params":{"_tokenId":"The tokenId of the token of which to retrieve the URI."},"return":"(string) The URI of the token."},"totalSupply()":{"return":"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}}}},"userdoc":{"methods":{"approve(address,uint256)":{"notice":"Set or reaffirm the approved address for an NFT"},"balanceOf(address)":{"notice":"Count all NFTs assigned to an owner"},"constructor":"Contract constructor","getApproved(uint256)":{"notice":"Get the approved address for a single NFT"},"isApprovedForAll(address,address)":{"notice":"Query if an address is an authorized operator for another address"},"issueTokens(uint256)":{"notice":"Mints more tokens, can only be called by contract creator and all newly minted tokens will belong to creator."},"name()":{"notice":"A descriptive name for a collection of NFTs in this contract"},"ownerOf(uint256)":{"notice":"Find the owner of an NFT"},"safeTransferFrom(address,address,uint256)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage  all your assets."},"symbol()":{"notice":"An abbreviated name for NFTs in this contract"},"tokenByIndex(uint256)":{"notice":"Enumerate valid NFTs"},"tokenOfOwnerByIndex(address,uint256)":{"notice":"Enumerate NFTs assigned to an owner"},"tokenURI(uint256)":{"notice":"A distinct Uniform Resource Identifier (URI) for a given asset."},"totalSupply()":{"notice":"Count NFTs tracked by this contract"},"transferFrom(address,address,uint256)":{"notice":"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"}}}},"settings":{"compilationTarget":{"browser/TokenERC721Full.sol":"TokenERC721Full"},"evmVersion":"petersburg","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/CheckERC165.sol":{"keccak256":"0x4a5d580d767869458153c36dd725172af1a655042f9c88525e8065db1b0d2146","urls":["bzz-raw://b1428d1da74e8d78754385ff041f129e8ac2fa3a1d51c646e7f234264bb973d9","dweb:/ipfs/QmdmEUxSZsfKhzJCFG51Lan33DmQ7YPYBKtVjoGUkqxYek"]},"browser/ERC165.sol":{"keccak256":"0x4e7fc8397150b360abf8ce41d999d3d242161c1f8f7197413a6f17da2279ebb0","urls":["bzz-raw://bbc1ba36a737aa554f7bf139db05f5535fc580c1d6e3503dd46b1068612d3dfc","dweb:/ipfs/QmQr19JqTYvfzcUpTyh9Px6Rmsp8xoaaT2T93f66zXWquS"]},"browser/ERC721.sol":{"keccak256":"0x989720574fb9022dda15b5d109e11976d9e5f6fa0f369cfc0169f3133d0b1efa","urls":["bzz-raw://7439e837c57b4bc8f4fbcaf4775b7e95e3c236f756cb1384ce36f4bc18ac0adc","dweb:/ipfs/QmY1whghxSUKnjavB9udrSzgTNXoj7ivuWT8weJNUFeofQ"]},"browser/ERC721Enumerable.sol":{"keccak256":"0x0526719e3b051e38c2e007eb12faffedfb25d39ebf0aeb2a7f560ee5ac3ead06","urls":["bzz-raw://d9a95d14e28eacd5319ab373513a1b49672ecc4e809dbba5f056a31ab22565bd","dweb:/ipfs/QmTX1QFw8vDqXcejALFhs1gRr57kMsz78vMtkfzrEcDrVF"]},"browser/ERC721Metadata.sol":{"keccak256":"0x5ac2992854b917266728ba259e480ba13f88b49b496b0ae613b7a381667faa88","urls":["bzz-raw://cc9bbd0035d431c246815ef516070a160be39331ca06efd2eed099fa10137de5","dweb:/ipfs/QmdVY9pDM1KTseeTNMdQnBo2bj7TR5Y9KG5JENxUUxdaGY"]},"browser/ERC721TokenReceiver.sol":{"keccak256":"0x8d9046f75f3a383515ed42a98e0ce42daa30aed6fb43b7bc2f21f19a766f5c05","urls":["bzz-raw://048a22daff7f12f9885a69260a81638edd0b15fbcbc74cc9c7ff8f7973738534","dweb:/ipfs/QmedqBFXHHvV7uNDnmvp2KBZxLySXQptVHAUhnhvDxQHWr"]},"browser/SafeMath.sol":{"keccak256":"0xcd39202a08b0e62cde7a6800d0a047056305607b02a09a3e269579f590d5e6a6","urls":["bzz-raw://ea3a65b19c496b42284c6c604df8e01b1920dceafbddc8ca8f5d15f49b95112c","dweb:/ipfs/QmPomW9Uu1yX2yZRdLJMnP99eFobbzURpDL4GVZ6k2WGVj"]},"browser/TokenERC721.sol":{"keccak256":"0x8759b16e9135eb992a9c95dcc6ad6c2332aaeacc8fd3967df47aeb6b3389b724","urls":["bzz-raw://f5754fef19c521b166787ddb4043a1fe2f4bd0dfc9f262d11c3fa94b7d5c120f","dweb:/ipfs/QmfLN5n9opjD8u4dNiV8ipQiaPXCNU4W5HSnj4JXoiTx3y"]},"browser/TokenERC721Full.sol":{"keccak256":"0x9f3adfddf8ad3f67cade5b33529c15e4bb10614459d0734aa3a50e0b1575b733","urls":["bzz-raw://b9ec0d5a0d07091da989a258f9c825436c6c9273f73027da352b5217a6d9da99","dweb:/ipfs/QmSD98EjSy4gyWs3UxAWhFMXsDSwkDfT9BMhznKGFYzh54"]},"browser/TokenERC721Metadata.sol":{"keccak256":"0x3e9aaef8de43120b3ab0be9952e38949d10393186503836f80123684750a4695","urls":["bzz-raw://ce073da9decddb7c10d7495e5b9959325df6997dfe4e9395f01d2c73f3fb5076","dweb:/ipfs/QmYSzYJSD2GLGDPHrDpFk9dHJpCz2RuT5hbwPRwZ3a1Rx8"]}},"version":1},"version":1,"checkPoints":[]}