{"address":"0xce4F282BCda329Fd8Fc55B5b44f10C3b7304bd59","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint256","name":"cap","type":"uint256"},{"internalType":"uint256","name":"initialSupply","type":"uint256"},{"internalType":"bool","name":"transferEnabled","type":"bool"},{"internalType":"bool","name":"mintingFinished","type":"bool"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"TransferEnabled","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finishMinting","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"mintingFinished","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"recoverERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transferEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"DefiOfThrones (https://github.com/DefiOfThrones/DOTTokenContract)","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."},"approveAndCall(address,uint256)":{"details":"Approve spender to transfer tokens and then execute a callback on recipient.","params":{"spender":"The address allowed to transfer to","value":"The amount allowed to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"approveAndCall(address,uint256,bytes)":{"details":"Approve spender to transfer tokens and then execute a callback on recipient.","params":{"data":"Additional data with no specified format.","spender":"The address allowed to transfer to.","value":"The amount allowed to be transferred."},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller.     * See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance.     * See {ERC20-_burn} and {ERC20-allowance}.     * Requirements:     * - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"cap()":{"details":"Returns the cap on the token's total supply."},"constructor":{"params":{"cap":"Maximum number of tokens mintable","decimals":"Number of decimals. All the operations are done using the smallest and indivisible token unit","initialSupply":"Initial token supply","mintingFinished":"If minting is finished after token creation","name":"Name of the token","symbol":"A symbol to be used as ticker","transferEnabled":"If transfer is enabled on token creation"}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"enableTransfer()":{"details":"Function to enable transfers."},"finishMinting()":{"details":"Function to stop minting new tokens."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."},"mint(address,uint256)":{"details":"Function to mint tokens.","params":{"to":"The address that will receive the minted tokens","value":"The amount of tokens to mint"}},"name()":{"details":"Returns the name of the token."},"owner()":{"details":"Returns the address of the current owner."},"recoverERC20(address,uint256)":{"details":"Remember that only owner can call so be careful when use on contracts generated from other contracts.","params":{"tokenAddress":"The token contract address","tokenAmount":"Number of tokens to be sent"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"Transfer tokens to a specified address.","params":{"to":"The address to transfer to","value":"The amount to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferAndCall(address,uint256)":{"details":"Transfer tokens to a specified address and then execute a callback on recipient.","params":{"to":"The address to transfer to.","value":"The amount to be transferred."},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferAndCall(address,uint256,bytes)":{"details":"Transfer tokens to a specified address and then execute a callback on recipient.","params":{"data":"Additional data with no specified format","to":"The address to transfer to","value":"The amount to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFrom(address,address,uint256)":{"details":"Transfer tokens from one address to another.","params":{"from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"the amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFromAndCall(address,address,uint256)":{"details":"Transfer tokens from one address to another and then execute a callback on recipient.","params":{"from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"The amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Transfer tokens from one address to another and then execute a callback on recipient.","params":{"data":"Additional data with no specified format","from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"The amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"DotTokenContract"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"browser/github/DefiOfThrones/DotTokenContract.sol":"DotTokenContract"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/github/DefiOfThrones/DotTokenContract.sol":{"keccak256":"0xebe9538e8e754128544f2fc5bd9d8e4380c0f5f5dc357fa5d8852a268c6f5513","urls":["bzz-raw://8655fbaa5397fa70a054be91fb06f9b4a6608131c6a3b2c0f0ec127c3b359cd8","dweb:/ipfs/Qmazqjj8KERNAWqWnBbzsiF1zq2KLpYrTNUVnrzPKCJb2j"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/AccessControl.sol":{"keccak256":"0x0b9031610278dbd49c53b200158b6dc2c304d1f272680cae8895374858742ee5","urls":["bzz-raw://02c64bb7a857e936badbfaae3d22a2261c68902bf3f96fb4bcdd0f1d36c6c8d0","dweb:/ipfs/QmcB4JgREdTRANvXnWJVF67VFmNi5FwwU79CPh1XwafL9e"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Address.sol":{"keccak256":"0x95ab5946f04d7d1f6f1ddaae196b9aea974b8e39a6cf2f94d0678b54186cf952","urls":["bzz-raw://788aa249ac4dbf9ced05dc9f65038ee3a3e516ed6324099c8dd904f34fc5375a","dweb:/ipfs/QmSM35jDe6EXVWxxo9qe574MQ4vV2qtq8NoWruLRe7jCWz"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Context.sol":{"keccak256":"0x4a4007b03cd4794aa5646a17fd3ed7ab1f5fc8507895cd5d252a695334a42d75","urls":["bzz-raw://20961944eb6868eba69501de71e852fb072f6edc9a52a6ccb2bf66fddaf685a9","dweb:/ipfs/QmfXUizyapKcS6WBXwjxtwjLfuhtxH9Yb2wxZe8P6NhTAt"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/ERC1363.sol":{"keccak256":"0xcac5a05cb69b7aadba624affbbc7aae3c0efde6accafbe15e388ed424a729c13","urls":["bzz-raw://5607e23a743294474c09f22ea1bee2848fc0e6fa20d665ba83f6ef0d5d4e1dda","dweb:/ipfs/QmURu8hdJfasqN5j2yg2o8VcmfmS53VqcfJFSpxtXtFTim"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/ERC165.sol":{"keccak256":"0xf2baa00ebddc5cfe3d727a36490628f8234239a5f47b83dc740fb4d7e8661a42","urls":["bzz-raw://e4ce67fc517d67df657f645a91bad66ca9f5f61c50a3a6ae254d860fbc182334","dweb:/ipfs/Qmc16TNxxu8G4my7zmFiUPRsw3QY65CmdgVRPWVky7aBtH"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/ERC20.sol":{"keccak256":"0xc41669b4d44e77fd01ec197ee04817a5556e162274f372bfb1bd0a270b5f3c29","urls":["bzz-raw://9ce2470556dde888c6c43520047cad23ab5e77d1bfb58066fdb4bc18e695940e","dweb:/ipfs/QmT2ofVXrLriuCcNkbwwVe8Mf3sMG7g9CsLV7tpnb5HFJJ"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/ERC20Burnable.sol":{"keccak256":"0x9d2a05f0804fa70bfe17cab291cb0522335a983f7f11b1f6e135dd66fd1dea17","urls":["bzz-raw://eb10d0f25a84b66330a522273b63b5b0d05e18510aafdd3b8903e7850b646aba","dweb:/ipfs/QmNnSLUTZBV1PUjtk8xFjGMnd83ka3Yp78bZZinkaupFke"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/ERC20Capped.sol":{"keccak256":"0x001318b36e61e1ef81538016c27d8291988337bc3f3697ba28bb4cc1027fabdf","urls":["bzz-raw://9f892393fa69d67ad281f92a1d40e48282354872b79b5c5b65644290d60d0e13","dweb:/ipfs/QmTSi9H84t5F3yRY3DXXRDv3XCu3ayK2xSAxBx28sxJj83"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/EnumerableSet.sol":{"keccak256":"0xbf360b2acb59f50f358c3fe835f1d8f6a858fb700afb2e63ba3b13dcfb09384e","urls":["bzz-raw://8468e802b06788cadb23f09b7775679d20279a6bd6ef2cdc9c012f1d9449a32e","dweb:/ipfs/Qmah2nomcNKmWq7Gr5ev2Vgn1ycBeYFJ75SxqfVz8iuALZ"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/IERC1363.sol":{"keccak256":"0x815066c1a5f2b961c62e38e780da42cd0ab1c673b5016239487186894fe4d456","urls":["bzz-raw://a8e8da89740c7e6a15f6c10f8e959ce570f4345bc311316c8903ff0909a729ab","dweb:/ipfs/QmerMsbZea8KiUqe8z78ZbwpVh4j5XU3Sd3S1xoZus9ZBQ"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/IERC1363Receiver.sol":{"keccak256":"0x5719abe5302c429a951509844266cc29b14be7763bbf13f8cda40834132c6f6a","urls":["bzz-raw://74262b41afb8e38c80ccec7782c853baf71e101dd402a1deff34664d08c1d6cc","dweb:/ipfs/QmRfoJS2SGkGUSy4fcL7wPC4u67YwupWeQoR4TVvAGPvFD"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/IERC1363Spender.sol":{"keccak256":"0xbcce0e696b3bba32e50b9c655c39385dbae96d70c43b5d648783702487e639de","urls":["bzz-raw://c9079816a9b61ad1887dc2a0e6d37b3844383fec93786a9ae3e1ff9be2677905","dweb:/ipfs/QmV1LwpeJy9cn3r1FuxHqjZjgzAjbARWQVJut4uunNfNhG"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/IERC165.sol":{"keccak256":"0x603b18bc7a64914e0be4acd45d28cb47fcf7c88a81159bb2d800b42f6d4f6758","urls":["bzz-raw://85386507998dc8daec91a270c0cf7d10a758230cd8ea010d2edcab9b9047ed35","dweb:/ipfs/QmSKAoHDZGzRvrRjs1p56V8TGvS75fub7Wn4Xm9HJeEUBi"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/IERC20.sol":{"keccak256":"0x1eec7265af343186e0f41d5704597a11817708a3f2a7a66d5c4317da78540210","urls":["bzz-raw://57cda3977aa403fc0868d347477632a252643c7d425813c74ed5a6bde8039255","dweb:/ipfs/QmRr1ML6AJ4veQpauujh8eAjWvG2VwJJBm3aUpqmnMWtKX"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Ownable.sol":{"keccak256":"0x498e1156264679fce90cf78d485a80616457f40b786a8d28f7225b4c277dcf28","urls":["bzz-raw://af93be1931068b5d4b63ea35858242c7f49ca192109bb4f0273f1dfc28cbc5e2","dweb:/ipfs/QmYZU8kT5gYvbKzM4pRobQmfPmcwLhwnZoaZeHdEr8P7qb"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Roles.sol":{"keccak256":"0xb3c551671c3da87c22ee007ceba05662ef905757d56eb09778aa94713d0bed51","urls":["bzz-raw://c0817f98438a7987ddd05725cf3aafe4a7afd036518915dc10928a5de32b8934","dweb:/ipfs/QmZXuU9vaxCjruJ5Pj8xyjXxaPCYh9hWwGJtXF787bRqr2"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/SafeMath.sol":{"keccak256":"0x4c079529227252a1f6104ffa8828bdddb582a1f5e0b029cc71fcf38b65a24269","urls":["bzz-raw://afbbf4accd812473c08faaa040ab457220b1a6fec7b6b02b65357b9adae0b157","dweb:/ipfs/QmSzZpCowR283ceu14mycmqpB8LUqYyAwwuy7kLsi3XCbf"]},"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/TokenRecover.sol":{"keccak256":"0x6c4a4a4c30d62c5683be280a1d7d5ab5a0e833855e7eaa71e28a44cf6f6bb5d1","urls":["bzz-raw://a6a4affc694a54ad8dda9ca4354dfd7c083e4db58f2298c32ffd24d9578a2be0","dweb:/ipfs/QmRoPNLiv3pAzCvaBLsUTwKrDuUYUhiRUhdNUc1gqB1cne"]}},"version":1},"version":1,"checkPoints":[]}