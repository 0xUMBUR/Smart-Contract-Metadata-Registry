{"address":"0x1cDA882122695c84d29Eb621Cd687763F493d958","name":"","metadata":{"compiler":{"version":"0.7.5+commit.eb77ed08"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_weth","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"contract IERC20","name":"fromToken","type":"address"},{"internalType":"contract IERC20","name":"toToken","type":"address"},{"internalType":"uint256","name":"fromAmount","type":"uint256"},{"internalType":"uint256","name":"toAmount","type":"uint256"},{"internalType":"address","name":"exchange","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"buy","outputs":[{"internalType":"uint256","name":"receivedAmount","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"fromToken","type":"address"},{"internalType":"contract IERC20","name":"toToken","type":"address"},{"internalType":"uint256","name":"fromAmount","type":"uint256"},{"internalType":"uint256","name":"toAmount","type":"uint256"}],"name":"onChainSwap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"fromToken","type":"address"},{"internalType":"contract IERC20","name":"toToken","type":"address"},{"internalType":"uint256","name":"fromAmount","type":"uint256"},{"internalType":"uint256","name":"toAmount","type":"uint256"},{"internalType":"address","name":"exchange","type":"address"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"swap","outputs":[{"internalType":"uint256","name":"receivedAmount","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address payable","name":"destination","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"weth","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"buy(address,address,uint256,uint256,address,bytes)":{"details":"The function which performs the swap on an exchange. Exchange needs to implement this method in order to support swapping of tokens through it","params":{"exchange":"Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap","fromAmount":"Max Amount of source tokens to be swapped","fromToken":"Address of the source token","payload":"Any exchange specific data which is required can be passed in this argument in encoded format which will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism","toAmount":"Destination token amount expected out of this swap","toToken":"Address of the destination token"}},"onChainSwap(address,address,uint256,uint256)":{"details":"This function is used to perform onChainSwap. It build all the parameters onchain. Basically the information encoded in payload param of swap will calculated in this case Exchange needs to implement this method in order to support swapping of tokens through it","params":{"fromAmount":"Amount of source tokens to be swapped","fromToken":"Address of the source token","toAmount":"Minimum destination token amount expected out of this swap","toToken":"Address of the destination token"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"swap(address,address,uint256,uint256,address,bytes)":{"details":"The function which performs the swap on an exchange. Exchange needs to implement this method in order to support swapping of tokens through it","params":{"exchange":"Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap","fromAmount":"Amount of source tokens to be swapped","fromToken":"Address of the source token","payload":"Any exchange specific data which is required can be passed in this argument in encoded format which will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism","toAmount":"Minimum destination token amount expected out of this swap","toToken":"Address of the destination token"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"transferTokens(address,address,uint256)":{"details":"Allows owner of the contract to transfer any tokens which are assigned to the contract This method is for safety if by any chance tokens or ETHs are assigned to the contract by mistaketoken Address of the token to be transferreddestination Recepient of the tokenamount Amount of tokens to be transferred"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"browser/ZeroxV4.sol":"ZeroxV4"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":100000},"remappings":[]},"sources":{"browser/ZeroxV4.sol":{"keccak256":"0x21e3c910dc5464696003265eb9712b8c59a843790a6fb7c2ccc3be82f573b5fb","urls":["bzz-raw://03a4f4a5a3910b91c83563162d9aa7212279e956d44d7a58a93c6b08fd0efb9c","dweb:/ipfs/QmcB6r6geR7MTc1ffwMek61dSdu8neFxpVXB6FsuqMeXja"]}},"version":1},"version":1,"checkPoints":[]}