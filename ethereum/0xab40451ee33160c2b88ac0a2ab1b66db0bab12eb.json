{"address":"0xaB40451ee33160c2B88aC0a2ab1B66Db0baB12EB","name":"","metadata":{"compiler":{"version":"0.8.0+commit.c7dfd78e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_tellor","type":"address"},{"internalType":"address[3]","name":"_initialWalkers","type":"address[3]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"walker","type":"address"}],"name":"NewWalker","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"walker","type":"address"},{"indexed":false,"internalType":"bytes32","name":"input","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"output","type":"bytes"}],"name":"NewWalkerInformation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payee","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PaymentDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"rewardPerWalker","type":"uint256"}],"name":"RewardsPaid","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"walker","type":"address"}],"name":"StakeWithdrawalRequestStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"walker","type":"address"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"walker","type":"address"}],"name":"WalkerBanished","type":"event"},{"inputs":[{"internalType":"address","name":"_oldWalker","type":"address"}],"name":"banishWalker","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"checkReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"depositPayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"depositStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"fellowship","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFellowshipSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_walker","type":"address"}],"name":"getWalkerDetails","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"enum Fellowship.Status","name":"","type":"uint8"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_walker","type":"address"},{"internalType":"bytes32","name":"_input","type":"bytes32"}],"name":"getWalkerInformation","outputs":[{"internalType":"bytes","name":"_output","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_a","type":"address"}],"name":"isWalker","outputs":[{"internalType":"bool","name":"_i","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastPayDate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_newRivendale","type":"address"}],"name":"newRivendale","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_walker","type":"address"},{"internalType":"string","name":"_name","type":"string"}],"name":"newWalker","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"payReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"payments","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"recieveReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestStakingWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPool","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rivendale","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setStakeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_input","type":"bytes32"},{"internalType":"bytes","name":"_output","type":"bytes"}],"name":"setWalkerInformation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_walker","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_banish","type":"bool"}],"name":"slashWalker","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stakeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tellor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"walkers","outputs":[{"internalType":"enum Fellowship.Status","name":"status","type":"uint8"},{"internalType":"uint256","name":"date","type":"uint256"},{"internalType":"uint256","name":"fellowshipIndex","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"rewardBalance","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Tellor Inc.","details":"This contract holds the selected few chosen as part of the Fellowship*","kind":"dev","methods":{"banishWalker(address)":{"details":"Function to banish a walker","params":{"_oldWalker":"address of walker to be banished (removed from Fellowship)*"}},"constructor":{"details":"Constructor for setting initial variables","params":{"_initialWalkers":"an array of three addresses to serve as the initial walkers","_tellor":"the address of the tellor contract"}}},"title":"Fellowship","version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/Fellowship.sol":"Fellowship"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/Fellowship.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nimport \"./interfaces/ERC20Interface.sol\";\r\n\r\n/****\r\n\r\n████████╗██╗░░██╗███████╗  ███████╗███████╗██╗░░░░░██╗░░░░░░█████╗░░██╗░░░░░░░██╗░██████╗██╗░░██╗██╗██████╗░\r\n╚══██╔══╝██║░░██║██╔════╝  ██╔════╝██╔════╝██║░░░░░██║░░░░░██╔══██╗░██║░░██╗░░██║██╔════╝██║░░██║██║██╔══██╗\r\n░░░██║░░░███████║█████╗░░  █████╗░░█████╗░░██║░░░░░██║░░░░░██║░░██║░╚██╗████╗██╔╝╚█████╗░███████║██║██████╔╝\r\n░░░██║░░░██╔══██║██╔══╝░░  ██╔══╝░░██╔══╝░░██║░░░░░██║░░░░░██║░░██║░░████╔═████║░░╚═══██╗██╔══██║██║██╔═══╝░\r\n░░░██║░░░██║░░██║███████╗  ██║░░░░░███████╗███████╗███████╗╚█████╔╝░░╚██╔╝░╚██╔╝░██████╔╝██║░░██║██║██║░░░░░\r\n░░░╚═╝░░░╚═╝░░╚═╝╚══════╝  ╚═╝░░░░░╚══════╝╚══════╝╚══════╝░╚════╝░░░░╚═╝░░░╚═╝░░╚═════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░\r\n\r\n*****/\r\n\r\n/** \r\n @author Tellor Inc.\r\n @title Fellowship\r\n @dev This contract holds the selected few chosen as part of the Fellowship\r\n**/\r\ncontract Fellowship {\r\n    //Storage\r\n    enum Status {ACTIVE, INACTIVE, PENDING_WITHDRAW, UNFUNDED}\r\n\r\n    struct Walker {\r\n        Status status; //status of walker\r\n        uint256 date; //date the walker initally was chosen\r\n        uint256 fellowshipIndex; //index of walker in the fellowship array\r\n        uint256 balance; //TRB balance of walker (must be > stakeAmount to be ACTIVE)\r\n        uint256 rewardBalance; //balance of rewards they own\r\n        string name; //name of walker\r\n    }\r\n\r\n    uint256 public lastPayDate; //most recent date walkers were paid\r\n    uint256 public rewardPool; //sum of all payments for services in contract\r\n    uint256 public stakeAmount; //minimum amount each walker needs to stake\r\n    address public rivendale; //the address of the voting contract\r\n    address public tellor; //address of tellor (the token for staking and payments)\r\n\r\n    mapping(address => mapping(bytes32 => bytes)) information; //allows parties to store arbitrary information\r\n    mapping(address => Walker) public walkers; //a mapping of an address to their information as a Walker\r\n    mapping(address => uint256) public payments; //a mapping of an address to the payment amount they've given\r\n    //The Fellowship:\r\n    address[] public fellowship; //The array of chosen individuals who are part of the fellowship\r\n\r\n    //Events\r\n    event NewWalker(address walker);\r\n    event NewWalkerInformation(address walker, bytes32 input, bytes output);\r\n    event WalkerBanished(address walker);\r\n    event StakeWithdrawalRequestStarted(address walker);\r\n    event StakeWithdrawn(address walker);\r\n    event PaymentDeposited(address payee, uint256 amount);\r\n    event RewardsPaid(uint256 rewardPerWalker);\r\n\r\n    //Modifiers\r\n    /**\r\n     * @dev This modifier restricts the function to only the Rivendale contract\r\n     */\r\n    modifier onlyRivendale {\r\n        require(\r\n            msg.sender == rivendale,\r\n            \"Only rivendale can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //Functions\r\n    /**\r\n     * @dev Constructor for setting initial variables\r\n     * @param _tellor the address of the tellor contract\r\n     * @param _initialWalkers an array of three addresses to serve as the initial walkers\r\n     */\r\n    constructor(address _tellor, address[3] memory _initialWalkers) {\r\n        tellor = _tellor;\r\n        _newWalker(_initialWalkers[0], \"Aragorn\");\r\n        _newWalker(_initialWalkers[1], \"Legolas\");\r\n        _newWalker(_initialWalkers[2], \"Gimli\");\r\n        stakeAmount = 10 ether;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to banish a walker\r\n     * @param _oldWalker address of walker to be banished (removed from Fellowship)\r\n     **/\r\n    function banishWalker(address _oldWalker) external onlyRivendale {\r\n        _banishWalker(_oldWalker);\r\n        emit WalkerBanished(_oldWalker);\r\n    }\r\n\r\n    function depositPayment(uint256 _amount) external {\r\n        payReward();\r\n\r\n        ERC20Interface(tellor).transferFrom(msg.sender, address(this), _amount);\r\n        payments[msg.sender] += _amount;\r\n        rewardPool += _amount;\r\n        emit PaymentDeposited(msg.sender, _amount);\r\n    }\r\n\r\n    function depositStake(uint256 _amount) external {\r\n        ERC20Interface(tellor).transferFrom(msg.sender, address(this), _amount);\r\n        walkers[msg.sender].balance += _amount;\r\n        require(\r\n            walkers[msg.sender].status != Status.INACTIVE,\r\n            \"Walker has wrong status\"\r\n        );\r\n        require(\r\n            walkers[msg.sender].status != Status.PENDING_WITHDRAW,\r\n            \"Walker has wrong status\"\r\n        );\r\n        if (walkers[msg.sender].balance >= stakeAmount) {\r\n            walkers[msg.sender].status = Status.ACTIVE;\r\n        }\r\n    }\r\n\r\n    function newRivendale(address _newRivendale) external {\r\n        require(\r\n            msg.sender == rivendale || rivendale == address(0),\r\n            \"Only rivendale can call this function.\"\r\n        );\r\n        rivendale = _newRivendale;\r\n    }\r\n\r\n    function newWalker(address _walker, string memory _name)\r\n        external\r\n        onlyRivendale\r\n    {\r\n        require(walkers[_walker].date == 0, \"cannot already be a walker\");\r\n        _newWalker(_walker, _name);\r\n    }\r\n\r\n    function payReward() public {\r\n        lastPayDate = block.timestamp;\r\n\r\n        if (rewardPool > 0) {\r\n            uint256 timeSinceLastPayment = block.timestamp - lastPayDate;\r\n            if (timeSinceLastPayment > 6 * 30 days) {\r\n                timeSinceLastPayment = 6 * 30 days;\r\n            }\r\n            uint256 reward =\r\n                (rewardPool * timeSinceLastPayment) /\r\n                    6 /\r\n                    30 days /\r\n                    fellowship.length;\r\n            for (uint256 i = 0; i < fellowship.length; i++) {\r\n                if (walkers[fellowship[i]].status == Status.ACTIVE) {\r\n                    walkers[fellowship[i]].rewardBalance += reward;\r\n                    rewardPool -= reward;\r\n                }\r\n            }\r\n            emit RewardsPaid(reward);\r\n        }\r\n    }\r\n\r\n    //to pay out the reward\r\n    function recieveReward() external {\r\n        require(\r\n            walkers[msg.sender].status == Status.ACTIVE,\r\n            \"Walker has wrong status\"\r\n        );\r\n        ERC20Interface(tellor).transfer(\r\n            msg.sender,\r\n            walkers[msg.sender].rewardBalance\r\n        );\r\n        walkers[msg.sender].rewardBalance = 0;\r\n    }\r\n\r\n    function requestStakingWithdraw() external {\r\n        require(\r\n            walkers[msg.sender].status != Status.INACTIVE,\r\n            \"Walker has wrong status\"\r\n        );\r\n        walkers[msg.sender].status = Status.PENDING_WITHDRAW;\r\n        walkers[msg.sender].date = block.timestamp;\r\n        emit StakeWithdrawalRequestStarted(msg.sender);\r\n    }\r\n\r\n    function setStakeAmount(uint256 _amount) external onlyRivendale {\r\n        stakeAmount = _amount;\r\n        for (uint256 i = 0; i < fellowship.length; i++) {\r\n            if (walkers[fellowship[i]].balance < stakeAmount) {\r\n                walkers[fellowship[i]].status = Status.UNFUNDED;\r\n            }\r\n        }\r\n    }\r\n\r\n    //a function to store input about keys on other chains or other necessary details;\r\n    function setWalkerInformation(bytes32 _input, bytes memory _output)\r\n        external\r\n    {\r\n        information[msg.sender][_input] = _output;\r\n        emit NewWalkerInformation(msg.sender, _input, _output);\r\n    }\r\n\r\n    function slashWalker(\r\n        address _walker,\r\n        uint256 _amount,\r\n        bool _banish\r\n    ) external onlyRivendale {\r\n        walkers[_walker].balance -= _amount;\r\n        rewardPool += _amount;\r\n        if (_banish) {\r\n            _banishWalker(_walker);\r\n        } else if (walkers[_walker].balance < stakeAmount) {\r\n            walkers[_walker].status = Status.UNFUNDED;\r\n        }\r\n    }\r\n\r\n    function withdrawStake() external {\r\n        require(\r\n            walkers[msg.sender].status == Status.PENDING_WITHDRAW,\r\n            \"walker has wrong status\"\r\n        );\r\n        require(\r\n            block.timestamp - walkers[msg.sender].date > 14 days,\r\n            \"has not been long enough to withdraw\"\r\n        );\r\n        ERC20Interface(tellor).transfer(\r\n            msg.sender,\r\n            walkers[msg.sender].balance\r\n        );\r\n        walkers[msg.sender].balance = 0;\r\n        _banishWalker(msg.sender);\r\n        emit StakeWithdrawn(msg.sender);\r\n    }\r\n\r\n    //view functions\r\n\r\n    function checkReward() external view returns (uint256) {\r\n        uint256 timeSinceLastPayment = block.timestamp - lastPayDate;\r\n        if (timeSinceLastPayment > 6 * 30 days) {\r\n            timeSinceLastPayment = 6 * 30 days;\r\n        }\r\n        return ((rewardPool * timeSinceLastPayment) /\r\n            6 /\r\n            30 days /\r\n            fellowship.length);\r\n    }\r\n\r\n    function getFellowshipSize() external view returns (uint256) {\r\n        return fellowship.length;\r\n    }\r\n\r\n    function getWalkerDetails(address _walker)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            Status,\r\n            uint256,\r\n            uint256,\r\n            string memory\r\n        )\r\n    {\r\n        return (\r\n            walkers[_walker].date,\r\n            walkers[_walker].fellowshipIndex,\r\n            walkers[_walker].status,\r\n            walkers[_walker].balance,\r\n            walkers[_walker].rewardBalance,\r\n            walkers[_walker].name\r\n        );\r\n    }\r\n\r\n    function getWalkerInformation(address _walker, bytes32 _input)\r\n        external\r\n        view\r\n        returns (bytes memory _output)\r\n    {\r\n        return information[_walker][_input];\r\n    }\r\n\r\n    //checks whether they are a Walker\r\n    function isWalker(address _a) external view returns (bool _i) {\r\n        if (walkers[_a].status == Status.ACTIVE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _banishWalker(address _oldWalker) internal {\r\n        fellowship[walkers[_oldWalker].fellowshipIndex] = fellowship[\r\n            fellowship.length - 1\r\n        ];\r\n        walkers[fellowship[fellowship.length - 1]].fellowshipIndex = walkers[\r\n            _oldWalker\r\n        ]\r\n            .fellowshipIndex;\r\n        fellowship.pop();\r\n        walkers[_oldWalker].fellowshipIndex = 0;\r\n        walkers[_oldWalker].status = Status.INACTIVE;\r\n        ERC20Interface(tellor).transfer(\r\n            _oldWalker,\r\n            walkers[_oldWalker].balance\r\n        );\r\n        walkers[_oldWalker].balance = 0;\r\n        rewardPool += walkers[_oldWalker].rewardBalance;\r\n        walkers[_oldWalker].rewardBalance = 0;\r\n    }\r\n\r\n    function _newWalker(address _walker, string memory _name) internal {\r\n        fellowship.push(_walker);\r\n        walkers[_walker] = Walker({\r\n            date: block.timestamp,\r\n            name: _name,\r\n            status: Status.UNFUNDED,\r\n            fellowshipIndex: fellowship.length - 1,\r\n            balance: 0,\r\n            rewardBalance: 0\r\n        });\r\n        emit NewWalker(_walker);\r\n    }\r\n}\r\n","keccak256":"0x93bc2f14091ff31d4b7b1383a7ff105657fdd0f6a42e9371b97427e1aa8f1d3d","license":"MIT"},"contracts/interfaces/ERC20Interface.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC20Interface{\r\n    function transfer(address _to, uint _amount) external returns(bool);\r\n    function transferFrom(address _from,address _to, uint _amount) external returns(bool);\r\n    function balanceOf(address _addy) external returns(uint256);\r\n    function balanceOfAt(address _addy, uint _block) external returns(uint256);\r\n}","keccak256":"0x0ceca4a2126bbf0d641fcfc77ad1d6472f413a616a8b0a4b79046ded5320d6e7","license":"MIT"}},"version":1},"version":1,"checkPoints":[]}