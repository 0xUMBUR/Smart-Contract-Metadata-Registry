{"address":"0x4972432C41b663cabDa86081aE8A4d762Ee72EAC","name":"","metadata":{"compiler":{"version":"0.8.6+commit.11564f7e"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"address payable","name":"relayerAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"functionSignature","type":"bytes"}],"name":"MetaTransactionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"ERC712_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseMetadataUri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"batchGenerate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_initialSupply","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"create","outputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"creators","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"bytes","name":"functionSignature","type":"bytes"},{"internalType":"bytes32","name":"sigR","type":"bytes32"},{"internalType":"bytes32","name":"sigS","type":"bytes32"},{"internalType":"uint8","name":"sigV","type":"uint8"}],"name":"executeMetaTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDomainSeperator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address[]","name":"_to","type":"address[]"},{"internalType":"uint256[]","name":"_quantities","type":"uint256[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"_id":"ID of the Token","_owner":"The address of the token holder"},"returns":{"_0":"The _owner's balance of the Token type requested"}},"balanceOfBatch(address[],uint256[])":{"params":{"_ids":"ID of the Tokens","_owners":"The addresses of the token holders"},"returns":{"_0":"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"}},"isApprovedForAll(address,address)":{"params":{"_operator":"Address of authorized operator","_owner":"The owner of the Tokens"},"returns":{"_0":"True if the operator is approved, false if not"}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error. MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).","params":{"_data":"Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`","_from":"Source address","_ids":"IDs of each token type (order and length must match _values array)","_to":"Target address","_values":"Transfer amounts per token type (order and length must match _ids array)"}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).","params":{"_data":"Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`","_from":"Source address","_id":"ID of the token type","_to":"Target address","_value":"Transfer amount"}},"setApprovalForAll(address,bool)":{"details":"MUST emit the ApprovalForAll event on success.","params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"supportsInterface(bytes4)":{"details":"Interface identification is specified in ERC-165. This function uses less than 30,000 gas.","params":{"_interfaceId":"The interface identifier, as specified in ERC-165"}}},"version":1},"userdoc":{"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Get the balance of an account's Tokens."},"balanceOfBatch(address[],uint256[])":{"notice":"Get the balance of multiple account/token pairs"},"isApprovedForAll(address,address)":{"notice":"Queries the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call)."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call)."},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens."},"supportsInterface(bytes4)":{"notice":"Query if a contract implements an interface"}},"version":1}},"settings":{"compilationTarget":{"contracts/new/TheSouthPark.sol":"TheSouthPark"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/new/Address.sol":{"keccak256":"0x9cd60dc2b2d69765b29a41e02230b76300dbc5c3729eeb0b8befd757d0ffb031","license":"MIT","urls":["bzz-raw://ee53b6f4a8c66b4a369d19f4ab1e518000a59a198edc1e846ba0e92b15dd01fb","dweb:/ipfs/QmbU5pbwixG6ctdzwqjytmo6Mk2MaNvCTLg9dq5KimZSpT"]},"contracts/new/Common.sol":{"keccak256":"0xa7ee136f153271342aca84362073d16fe00a02bea5ff03129e81af3373a91d8a","license":"MIT","urls":["bzz-raw://4bbbd5a18dcbf1b95818c7e8d5e6fd066f7e9e40c8c8c554019a2b99174b1778","dweb:/ipfs/QmaaDKnz3Zegq5GAYyEAYkz4Uw5zpxTYoPutG8MfpH4Lfp"]},"contracts/new/ContentMixin.sol":{"keccak256":"0x92409bc8d2c1be83e14de02f07d791230699dee7abb70f3b7eff2425b8cc929c","license":"MIT","urls":["bzz-raw://1dd37a1a5b74c26cbe341ae45e688afad30e86d4edfc20d296c59390f22d67b5","dweb:/ipfs/QmWkQotAas3H2Z7e5Y4bL33Paa5t4fwcNMLLM67EowZQtZ"]},"contracts/new/EIP712Base.sol":{"keccak256":"0x40e64dca9e20cd12e88efe58a2bc2f41051325dd4896b5454bad6cfe53a969ac","license":"MIT","urls":["bzz-raw://9979a678076f6937bcf732d916b0282e5e2d3cb7b1a3322a012a63f6f69aad99","dweb:/ipfs/QmchJfxLDHWtBgb2YfMBWgniCiHivat96kDi3qQikvJEMQ"]},"contracts/new/ERC1155.sol":{"keccak256":"0x0511facbe67b2e3c00d330ac04835238cf37f201f50f84f472e1c07c2dac8665","license":"MIT","urls":["bzz-raw://f8c18959c871894f5ca8e6f50b2e926393ebf57c5a3e1e086c3907280a2bd2e5","dweb:/ipfs/Qmf45xrwpaSZGpBTzg8Vd8zuXmwgj32z2A6NBoraLo1PkM"]},"contracts/new/ERC1155Mintable.sol":{"keccak256":"0xa638b2cdb4ed710b9b2b9323fc0215c8df4b8c09f862e889ad463c2b218103de","license":"MIT","urls":["bzz-raw://27891912cd7243f06f80227840b17683fac37fe8d2fb60b07b2789f0a746ea64","dweb:/ipfs/QmUjcb7JUywr2otgmhcJoyd9PBCkowuPWYThyL2DRU8km2"]},"contracts/new/ERC165.sol":{"keccak256":"0xfc89fb2d15d15e1e9c7798b71d890be253a2755244b9e27876c5167042e0cc96","license":"MIT","urls":["bzz-raw://7d1afd0db52b66af9269955af932f9e44d3f7bc65d6abc548a6f392c92385dba","dweb:/ipfs/Qmf4VCgTwUGf9teobyRtnZKriJmcjPEmTUgUCJwxiyVkBy"]},"contracts/new/IERC1155.sol":{"keccak256":"0x0e9e7b8c4db8111e9b6af0261b9ec6d6452f35a6b18f5f7763c75afa6ac3c2ef","license":"MIT","urls":["bzz-raw://c8d15f19d8f7cc82f149a19f5b49379460bf2d4b294c1a37c516b09bd0f3d159","dweb:/ipfs/QmSxtAk5XDkJcDFZ15gC68bdkJ1JAAMwgvGEY6Bbk7ekPR"]},"contracts/new/IERC1155Metadata.sol":{"keccak256":"0xa61b2fd588fadac23a3ab31f76ca34e9c1f461734fb2900bda9cda5f55f1e146","license":"MIT","urls":["bzz-raw://8dfe6e40dd40f3923fb02068f00f96905d4a46bcba6504d309017e92afe4776a","dweb:/ipfs/QmR6TWxm4MC86LepXY8FMXRyExn55XMv5ECkLcLYKB6JC4"]},"contracts/new/IERC1155TokenReceiver.sol":{"keccak256":"0x5756f5e98023229a2394db8b1665d32567e513ec173c2e26dd7b3cb8c11a3d0b","license":"MIT","urls":["bzz-raw://8ee3444d2ac28952e646ca508a718349bf6d3c74a2dc80bdebb2fd7dbf98450e","dweb:/ipfs/QmPpVSMaMcpHRuwXBbFHJs6B1MSqjThk6ovz71T3HXifFX"]},"contracts/new/Initializable.sol":{"keccak256":"0x397d4aa8cc6e019c7ed4e32e92db0935d6fdede224d5c6ae09136309eef15cde","license":"MIT","urls":["bzz-raw://13460611492b8292c442cfdb24c27fa255a1a3acbf98430f3b2eb61a92c46c9f","dweb:/ipfs/QmVK8kB1jkfgAM2fYXeRywBo5SV8uSpttQ3nLNMrdygmxn"]},"contracts/new/NativeMetaTransaction.sol":{"keccak256":"0x1a55fc1f97fb938d1f509363f2f5beceb073e08db4d430e3fe934bf635aa5ccd","license":"MIT","urls":["bzz-raw://1fe41f2b1e0f47a497541802b103e3c9351c80edb023ee06ad68c6f15c6acdb6","dweb:/ipfs/QmP8TcDrmM17Ft5oaMK5m73QadCojbQPWQEHznKhcBFRu6"]},"contracts/new/SafeMath.sol":{"keccak256":"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e","license":"MIT","urls":["bzz-raw://5f9529d3d365e8415155cee11394e0f7c0de2152b601b7e77508fce16cb4a509","dweb:/ipfs/QmVhbcLVsAzvqfjsdLwy25XMjgVJm7Z3w2JCNiNbZF2GHT"]},"contracts/new/TheSouthPark.sol":{"keccak256":"0xccb6fc563951cf285c6d9661c2a14d2540c3233a87c0aa93ac5152a4d7e630fa","license":"MIT","urls":["bzz-raw://dc7dd54b57d7f144076c5be2a13b3cc25442910b5dbe2a36e640911171c3e2f6","dweb:/ipfs/QmPnRRssz99SHB7JaGPyRy6SYEVV2pLJvx8XToUYTCACbR"]},"openzeppelin-solidity/contracts/utils/Strings.sol":{"keccak256":"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0","license":"MIT","urls":["bzz-raw://1123c9545decc48a011370ebab4bf53dda98524fa21f9498e68851ba8f0ffc0f","dweb:/ipfs/QmUpgMg8EFDnv87ePKUjXxXpJT3qwHRj9VDNSnRxu7T9sy"]}},"version":1},"version":1,"checkPoints":[]}