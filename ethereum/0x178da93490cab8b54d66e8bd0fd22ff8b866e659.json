{"address":"0x178Da93490CAB8b54D66E8bD0Fd22ff8B866E659","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"appId","type":"uint256"}],"name":"AppEnrolledToPoA","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"appId","type":"uint256"}],"name":"AppProven","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"newUri","type":"string"}],"name":"BaseTokenUriUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"depositor","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"appId","type":"uint256"}],"name":"NewQuery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"appId","type":"uint256"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"PoAError","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"PoAFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"appName","type":"string"},{"internalType":"string","name":"host","type":"string"},{"internalType":"string","name":"confirmationPath","type":"string"},{"internalType":"string","name":"confirmationMethod","type":"string"},{"internalType":"string","name":"path","type":"string"}],"name":"PoA_enroll","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_appId","type":"uint256"},{"internalType":"string","name":"result","type":"string"}],"name":"PoA_keyReceiver","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_appId","type":"uint256"}],"name":"PoA_submit","outputs":[{"internalType":"bytes32","name":"queryId","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_apps","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes32","name":"queryId","type":"bytes32"},{"internalType":"bytes32","name":"PoAKey","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"host","type":"string"},{"internalType":"string","name":"confirmationPath","type":"string"},{"internalType":"string","name":"confirmationMethod","type":"string"},{"internalType":"string","name":"path","type":"string"},{"internalType":"address","name":"creator","type":"address"},{"internalType":"bool","name":"PoA","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_appId","type":"uint256"}],"name":"appCreator","outputs":[{"internalType":"address","name":"creator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_total","type":"uint256"},{"internalType":"address","name":"_to","type":"address"}],"name":"batchMintTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentAppsCount","outputs":[{"internalType":"uint256","name":"appsCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_appId","type":"uint256"}],"name":"deleteApp","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"gasBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gasDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_appId","type":"uint256"}],"name":"getApp","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes32","name":"queryId","type":"bytes32"},{"internalType":"bytes32","name":"PoAKey","type":"bytes32"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"host","type":"string"},{"internalType":"string","name":"confirmationPath","type":"string"},{"internalType":"string","name":"confirmationMethod","type":"string"},{"internalType":"string","name":"path","type":"string"},{"internalType":"address","name":"creator","type":"address"},{"internalType":"bool","name":"PoA","type":"bool"}],"internalType":"struct Storage.App","name":"app","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_proxyRegistryAddress","type":"address"},{"internalType":"string","name":"baseURI","type":"string"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"uint256","name":"_oracleQueryFees","type":"uint256"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"mintTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payFees","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"proxyRegistryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setBaseTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_feesAmount","type":"uint256"}],"name":"setQueryFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"thisBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"tokensOf","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newCode","type":"address"}],"name":"updateCode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Mathieu Lecoq march 23rd 2021","details":"Property all rights are reserved to DeAuth ltddeployed with compiler version 0.6.12","events":{"BaseTokenUriUpdated(string)":{"details":"event emitting when the `_baseTokenUri` is updated by owner"}},"kind":"dev","methods":{"PoA_enroll(string,string,string,string,string)":{"details":"Enroll in DeAuth Proof-of-Authority protocol by submitting a new app to the ecosystemTo create a new app, the creator must call submitAppForPoAVerification. The method is called only once in the contract lifetime","params":{"appName":"if the App Id corresponding to `keccak256(appName)` already exists, the EVM will revert the call","confirmationMethod":": one of :   - \"get\" : confirmation url needs to be reached with a https 'GET' request.   - \"post\" : confirmation url needs to be reached with a https 'POST' request","confirmationPath":": url that DeAuth API will be able to reach in order to retrieve the `appCreationKey` (ex.: '/api/deauth_poa')","host":": app base host / domain","path":": url where token can be used and will be recognized (ex.: '/login')"},"returns":{"_0":"appId If this request is accepted, the function will store a new invalid `app` and return an `appId` to be used to retrieve data  and confirm authority later on with `confirmAuthorityOverAppHost` method"}},"PoA_keyReceiver(uint256,string)":{"details":"Method reserved to DeAuth OracleDeAuth Apps PoA process final stepOperation success will emit the `AppProven` event which allows  a creator to list his appOperation will fail if app creator has not enough `gasBalance` to pay transaction fees to the oracle","params":{"_appId":"Id of the app the query was about","result":"Response fetched from the oracle that must match the  `PoAKey` from app to prove authority over web host"}},"PoA_submit(uint256)":{"details":"*PAYABLE*Submit an app to oraclized host verification Method called only by app creators who have already submitted and have prepared their app for DeAuth PoA processIf the transaction costs more than `ORACLE_QUERY_PRICE`, The oracle will automatically wait until the gas price goes down to call `PoA_keyReceiver`","returns":{"queryId":"the unique oracle query identifier"}},"approve(address,uint256)":{"details":"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.","params":{"to":"address to be approved for the given token ID","tokenId":"uint256 ID of the token to be approved"}},"balanceOf(address)":{"details":"Gets the balance of the specified address","params":{"owner":"address to query the balance of"},"returns":{"_0":"uint256 representing the amount owned by the passed address"}},"baseTokenURI()":{"details":"Retrieve all NFTs base token uri "},"batchMintTo(uint256,address)":{"details":"Mint several tokens to an address.","params":{"_to":"default owner of the new created NFT (reverts if a zero address)","_total":"total number of NFT to mint (reverts if <= 0)"}},"burn(uint256)":{"details":"External Burn NFT methodretricted to DAUTH Owners"},"deleteApp(uint256)":{"details":"Permanently delete an app","returns":{"_0":"boolean indicating operation success"}},"getApproved(uint256)":{"details":"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.","params":{"tokenId":"uint256 ID of the token to query the approval of"},"returns":{"_0":"address currently approved for the given token ID"}},"init(string,string,address,string,address,address,uint256)":{"details":"Logic code implementation contact constructorMUST be called by deployer only if contract has not been initialized before"},"isOwner()":{"returns":{"_0":"true if `msg.sender` is the owner of the contract."}},"mintTo(address)":{"details":"Mints a token to an address.","params":{"_to":"address of the future owner of the token"}},"name()":{"details":"Gets the token name","returns":{"_0":"string representing the token name"}},"owner()":{"returns":{"_0":"the address of the owner."}},"ownerOf(uint256)":{"details":"Gets the owner of the specified token ID","params":{"tokenId":"uint256 ID of the token to query the owner of"},"returns":{"_0":"address currently marked as the owner of the given token ID"}},"payFees()":{"details":"Pay ORACLE_QUERY_FEES to the oraclesee: https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/"},"renounceOwnership()":{"details":"Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator","params":{"_data":"bytes data to send along with a safe transfer check","from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"setApprovalForAll(address,bool)":{"details":"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf","params":{"approved":"representing the status of the approval to be set","to":"operator address to set the approval"}},"setBaseTokenURI(string)":{"details":"Set the base token uri for all NFTs"},"setQueryFees(uint256)":{"details":"Set oracle query fees default gas quantity that the oracle needs to send query response "},"supportsInterface(bytes4)":{"details":"implement supportsInterface(bytes4) using a lookup table"},"symbol()":{"details":"Gets the token symbol","returns":{"_0":"string representing the token symbol"}},"tokenByIndex(uint256)":{"details":"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens","params":{"index":"uint256 representing the index to be accessed of the tokens list"},"returns":{"_0":"uint256 token ID at the given index of the tokens list"}},"tokenOfOwnerByIndex(address,uint256)":{"details":"Gets the token ID at a given index of the tokens list of the requested owner","params":{"index":"uint256 representing the index to be accessed of the requested tokens list","owner":"address owning the tokens list to be accessed"},"returns":{"_0":"uint256 token ID at the given index of the tokens list owned by the requested address"}},"tokenURI(uint256)":{"details":"Retrieve the uri of a specific token ","params":{"_tokenId":"the id of the token to retrieve the uri of"},"returns":{"_0":"computed uri string pointing to a specific _tokenId"}},"tokensOf(address)":{"details":"@notice Non-Standard method to retrieve all NFTs that specific owner owns","returns":{"_0":"uint[] containing all NFTs that owner owns"}},"totalSupply()":{"details":"Gets the total amount of tokens stored by the contract","returns":{"_0":"uint256 representing the total amount of tokens"}},"transferFrom(address,address,uint256)":{"details":"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the _msgSender() to be the owner, approved, or operator","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"newOwner":"The address to transfer ownership to."}},"updateCode(address)":{"details":"EIP-1822 featureRealize an update of the DeAuth logic code calls the proxy contract to update stored logic code contract address at keccak256(\"PROXIABLE\")"}},"stateVariables":{"initialized":{"details":"initialized state MUST remain set to false on Implementation Contract "}},"title":"DeAuth DAUTH NFT Assets","version":1},"userdoc":{"kind":"user","methods":{"PoA_submit(uint256)":{"notice":":  - function `PoA_enroll` must be called prior to this method // RAT : the `NewQuery` event indicates the oracle that a `query` must treated and result must be returned to `PoA_keyReceiver` method - function `PoA_keyReceiver` is called after this method"},"isApprovedForAll(address,address)":{"notice":"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."},"renounceOwnership()":{"notice":"Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}},"version":1}},"settings":{"compilationTarget":{"DePass.sol":"DeAuth"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"DePass.sol":{"keccak256":"0x72ef8e4bed0295dcf4dbb4f27a8f6b7cb8ef65b4c9f791ae9ca30d4a7a108af7","license":"GPL-V.3","urls":["bzz-raw://606abf713ab185c764402484e81b279eed4b9ed8d16ae902975c8f4949d31497","dweb:/ipfs/QmbLcs8fq6DDhB9BgQExp2uUysn1deBTDKugTh5QB5HCtJ"]}},"version":1},"version":1,"checkPoints":[]}