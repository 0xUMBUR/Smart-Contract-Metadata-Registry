{"address":"0x37a3aF1326d60d6Ddc663061Aa0ED572Fb003777","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IBridge","name":"_bridge","type":"address"},{"internalType":"uint64[]","name":"_oracleScriptIDs","type":"uint64[]"},{"internalType":"uint64","name":"_askCount","type":"uint64"},{"internalType":"uint64","name":"_ansCount","type":"uint64"},{"internalType":"uint64","name":"_pendingDuration","type":"uint64"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"symbol","type":"string"},{"indexed":false,"internalType":"uint64","name":"rate","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"resolveTime","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"requestID","type":"uint64"}],"name":"PendingRefDataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"symbol","type":"string"},{"indexed":false,"internalType":"uint64","name":"rate","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"resolveTime","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"requestID","type":"uint64"}],"name":"RefDataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"symbol","type":"string"},{"indexed":false,"internalType":"uint64","name":"rate","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"resolveTime","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"requestID","type":"uint64"}],"name":"VerifiedRefDataUpdate","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ansCount","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"askCount","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bridge","outputs":[{"internalType":"contract IBridge","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"symbol","type":"string"}],"name":"getRefData","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"lastUpdate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"base","type":"string"},{"internalType":"string","name":"quote","type":"string"}],"name":"getReferenceData","outputs":[{"components":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"lastUpdatedBase","type":"uint256"},{"internalType":"uint256","name":"lastUpdatedQuote","type":"uint256"}],"internalType":"struct IStdReference.ReferenceData","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string[]","name":"_bases","type":"string[]"},{"internalType":"string[]","name":"_quotes","type":"string[]"}],"name":"getReferenceDataBulk","outputs":[{"components":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"uint256","name":"lastUpdatedBase","type":"uint256"},{"internalType":"uint256","name":"lastUpdatedQuote","type":"uint256"}],"internalType":"struct IStdReference.ReferenceData[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"oracleScriptIDs","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"symbol","type":"string"}],"name":"pendingRefReady","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"pendingRefs","outputs":[{"internalType":"uint64","name":"rate","type":"uint64"},{"internalType":"uint64","name":"resolveTime","type":"uint64"},{"internalType":"uint64","name":"relayTime","type":"uint64"},{"internalType":"uint64","name":"requestID","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"refs","outputs":[{"internalType":"uint64","name":"rate","type":"uint64"},{"internalType":"uint64","name":"resolveTime","type":"uint64"},{"internalType":"uint64","name":"relayTime","type":"uint64"},{"internalType":"uint64","name":"requestID","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string[]","name":"symbols","type":"string[]"},{"internalType":"uint64[]","name":"rates","type":"uint64[]"},{"internalType":"uint64[]","name":"resolveTimes","type":"uint64[]"},{"internalType":"uint64[]","name":"requestIDs","type":"uint64[]"}],"name":"relay","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"proof","type":"bytes"}],"name":"relayWithProof","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"trustRelayer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"verifiedRefs","outputs":[{"internalType":"uint64","name":"rate","type":"uint64"},{"internalType":"uint64","name":"resolveTime","type":"uint64"},{"internalType":"uint64","name":"relayTime","type":"uint64"},{"internalType":"uint64","name":"requestID","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Band Protocol Team","kind":"dev","methods":{"getRefData(string)":{"params":{"symbol":"the symbol of the token whose price to query"}},"getReferenceData(string,string)":{"params":{"base":"the base symbol of the token pair to query","quote":"the quote symbol of the token pair to query"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"pendingRefReady(string)":{"params":{"symbol":"The symbol of the token to query the status of"}},"relay(string[],uint64[],uint64[],uint64[])":{"details":"All of the lists must be of equal length","params":{"rates":"A list of the rates associated with each symbol","requestIDs":"A list of BandChain request IDs in which the rate data was retrieved","resolveTimes":"A list of timestamps of when the rate data was retrieved","symbols":"A list of symbols whose data is being relayed in this function call"}},"relayWithProof(bytes)":{"params":{"proof":"Aggregator oralce script request proof from BandChain"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"title":"BandChain StdReferenceBasic","version":1},"userdoc":{"kind":"user","methods":{"ansCount()":{"notice":"Mininum number of BandChain validator reports to allow"},"askCount()":{"notice":"Mininum number of BandChain validator reports asked to allow"},"getRefData(string)":{"notice":"Get the latest usable price data of a token"},"getReferenceData(string,string)":{"notice":"Returns the price data for the given base/quote pair. Revert if not available."},"getReferenceDataBulk(string[],string[])":{"notice":"Similar to getReferenceData, but with multiple base/quote pairs at once."},"oracleScriptIDs(uint256)":{"notice":"List of valid oracle script IDs"},"pendingDuration()":{"notice":"Duration to wait for challenge before data will be available for each symbol"},"pendingRefReady(string)":{"notice":"Check if a token data in pendingRef is ready to be used"},"pendingRefs(string)":{"notice":"Mapping from token symbol to pending ref data updated by relay()"},"refs(string)":{"notice":"Mapping from token symbol to ref data Updated by relay() after past pendingDuration"},"relay(string[],uint64[],uint64[],uint64[])":{"notice":"Relay and save a set of price data to the contract"},"relayWithProof(bytes)":{"notice":"Relay and save a set of price data to the contract using proof from Bandchain"},"trustRelayer()":{"notice":"Whether to trust the relayer Initially true but will be false if disproved by user."},"verifiedRefs(string)":{"notice":"Mapping from token symbol to verified ref data updated by relayWithProof()"}},"version":1}},"settings":{"compilationTarget":{"browser/StdReference.sol":"StdReference"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/StdReference.sol":{"keccak256":"0xba90c74d416c0ba2c0c84134b24d101e89679e875522ca328df9d5769455e205","license":"Apache-2.0","urls":["bzz-raw://b7f1cae139de26c76341c6d4922fa88b27cd765ad3ba5cd0ebb307b8657bb368","dweb:/ipfs/QmZomE7ahzipGKXwkdQZ6JBLKhQpJihAbqE4tFvqabQ4VC"]}},"version":1},"version":1,"checkPoints":[]}