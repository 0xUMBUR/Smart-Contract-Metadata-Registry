{"address":"0x126d852A3150C53B851eB340ea54Dc379d62f27c","name":"","metadata":{"compiler":{"version":"0.6.2+commit.bacdbe57"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"router_","type":"address"},{"internalType":"address","name":"factory_","type":"address"},{"internalType":"address","name":"trader_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"quantity","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"}],"name":"FlashClosed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"quantity","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"premium","type":"uint256"}],"name":"FlashOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"address","name":"optionAddress","type":"address"},{"internalType":"uint256","name":"quantityOptions","type":"uint256"},{"internalType":"uint256","name":"amountBMax","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addShortLiquidityWithUnderlying","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IOption","name":"optionToken","type":"address"},{"internalType":"uint256","name":"amountRedeems","type":"uint256"},{"internalType":"uint256","name":"minPayout","type":"uint256"}],"name":"closeFlashLong","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"optionAddress","type":"address"},{"internalType":"address","name":"otherToken","type":"address"}],"name":"deployUniswapMarket","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"contract IUniswapV2Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pairAddress","type":"address"},{"internalType":"address","name":"optionAddress","type":"address"},{"internalType":"uint256","name":"flashLoanQuantity","type":"uint256"},{"internalType":"uint256","name":"minPayout","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"name":"flashCloseLongOptionsThenSwap","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"pairAddress","type":"address"},{"internalType":"address","name":"optionAddress","type":"address"},{"internalType":"uint256","name":"flashLoanQuantity","type":"uint256"},{"internalType":"uint256","name":"maxPremium","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"name":"flashMintShortOptionsThenSwap","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IOption","name":"optionToken","type":"address"},{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"getClosePremium","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IOption","name":"optionToken","type":"address"},{"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"getOpenPremium","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"}],"name":"getUniswapMarketForTokens","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVersion","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IOption","name":"optionToken","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"mintShortOptionsThenSwapToTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IOption","name":"optionToken","type":"address"},{"internalType":"uint256","name":"amountOptions","type":"uint256"},{"internalType":"uint256","name":"maxPremium","type":"uint256"}],"name":"openFlashLong","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"optionAddress","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeShortLiquidityThenCloseOptions","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"router","outputs":[{"internalType":"contract IUniswapV2Router02","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trader","outputs":[{"internalType":"contract ITrader","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV2Call","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)":{"details":"Adds redeemToken liquidity to a redeem<>token pair by minting shortOptionTokens with underlyingTokens.","params":{"amountBMax":"The minimum quantity of shortOptionTokens expected to provide liquidity with.","amountBMin":"The minimum quantity of otherTokens expected to provide liquidity with.","deadline":"The timestamp to expire a pending transaction. \r","optionAddress":"The address of the optionToken to get the redeemToken to mint then provide liquidity for.","quantityOptions":"The quantity of underlyingTokens to use to mint option + redeem tokens.","to":"The address that receives UNI-V2 shares."}},"closeFlashLong(address,uint256,uint256)":{"details":"Closes a longOptionToken position by flash swapping in redeemTokens,         closing the option, and paying back in underlyingTokens.","params":{"amountRedeems":"The quantity of redeemTokens to borrow to close the options.","minPayout":"The minimum payout of underlyingTokens sent out to the user. \r","optionToken":"The address of the longOptionTokens to close."}},"deployUniswapMarket(address,address)":{"details":"Creates a UniswapV2Pair by calling `createPair` on the UniswapV2Factory."},"flashCloseLongOptionsThenSwap(address,address,uint256,uint256,address[],address)":{"details":"Sends shortOptionTokens to msg.sender, and pays back the UniswapV2Pair in underlyingTokens.","params":{"flashLoanQuantity":"The quantity of shortOptionTokens borrowed to use to close longOptionTokens.","minPayout":"The minimum payout of underlyingTokens sent to the `to` address.","optionAddress":"The address of the longOptionTokes to close.","pairAddress":"The address of the redeemToken<>underlyingToken UniswapV2Pair contract.","path":"underlyingTokens -> shortOptionTokens, because we are paying the input of underlyingTokens.","to":"The address which is sent the underlyingToken payout, or liable to pay for a negative payout."}},"flashMintShortOptionsThenSwap(address,address,uint256,uint256,address[],address)":{"details":"Receives underlyingTokens from a UniswapV2Pair.swap() call from a pair with         reserve0 = shortOptionTokens and reserve1 = underlyingTokens.         Uses underlyingTokens to mint long (option) + short (redeem) tokens.         Sends longOptionTokens to msg.sender, and pays back the UniswapV2Pair the shortOptionTokens,         AND any remainder quantity of underlyingTokens (paid by msg.sender).","params":{"flashLoanQuantity":"The quantity of options to mint using borrowed underlyingTokens.","maxPremium":"The maximum quantity of underlyingTokens to pay for the optionTokens.","optionAddress":"The address of the Option contract.","path":"The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.","to":"The address to send the shortOptionToken proceeds and longOptionTokens to."},"returns":{"_0":"success bool Whether the transaction was successful or not. \r"}},"getClosePremium(address,uint256)":{"details":"Gets the total premium payout to sell `quantity` of `optionToken`s.","returns":{"_0":"premiumPayout, premumCost"}},"getName()":{"details":"Gets the name of the contract."},"getOpenPremium(address,uint256)":{"details":"Gets the total premium cost to buy `quantity` of `optionToken`s.","returns":{"_0":"premiumCost, premiumPayout"}},"getUniswapMarketForTokens(address,address)":{"details":"Gets a UniswapV2Pair address for two tokens by calling the UniswapV2Factory."},"getVersion()":{"details":"Gets the version of the contract."},"mintShortOptionsThenSwapToTokens(address,uint256,uint256,address[],address,uint256)":{"details":"Mints long + short option tokens, then swaps the shortOptionTokens (redeem) for tokens.","params":{"amountIn":"The quantity of options to mint.","amountOutMin":"The minimum quantity of tokens to receive in exchange for the shortOptionTokens.","deadline":"The timestamp for a trade to fail at if not successful.","optionToken":"The address of the Option contract.","path":"The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.","to":"The address to send the shortOptionToken proceeds and longOptionTokens to."},"returns":{"_0":"bool Whether the transaction was successful or not. \r"}},"openFlashLong(address,uint256,uint256)":{"details":"Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.","params":{"amountOptions":"The quantity of longOptionTokens to purchase.","maxPremium":"The maximum quantity of underlyingTokens to pay for the optionTokens. \r","optionToken":"The option address."}},"removeShortLiquidityThenCloseOptions(address,uint256,uint256,uint256,address,uint256)":{"details":"Combines Uniswap V2 Router \"removeLiquidity\" function with Primitive \"closeOptions\" function.","params":{"amountAMin":"The minimum quantity of shortOptionTokens to receive from removing liquidity.","amountBMin":"The minimum quantity of underlyingTokens to receive from removing liquidity.","deadline":"The timestamp to expire a pending transaction. \r","liquidity":"The quantity of liquidity tokens to pull from msg.sender and burn.","optionAddress":"The address of the option that will be closed from burned UNI-V2 liquidity shares.","to":"The address that receives underlyingTokens from burned UNI-V2, and underlyingTokens from closed options."}},"uniswapV2Call(address,uint256,uint256,bytes)":{"details":"The callback function triggered in a UniswapV2Pair.swap() call when the `data` parameter has data.","params":{"amount0":"The quantity of token0 received to the `to` address in the swap() call.","amount1":"The quantity of token1 received to the `to` address in the swap() call.","data":"The payload passed in the `data` parameter of the swap() call. \r","sender":"The original msg.sender of the UniswapV2Pair.swap() call."}}}},"userdoc":{"methods":{"addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)":{"notice":"Pulls underlying tokens from msg.sender and pushes UNI-V2 liquidity tokens to the \"to\" address.         underlyingToken -> redeemToken -> UNI-V2."},"closeFlashLong(address,uint256,uint256)":{"notice":"IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain."},"flashCloseLongOptionsThenSwap(address,address,uint256,uint256,address[],address)":{"notice":"IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs."},"flashMintShortOptionsThenSwap(address,address,uint256,uint256,address[],address)":{"notice":"If the first address in the path is not the shortOptionToken address, the tx will fail."},"getClosePremium(address,uint256)":{"notice":"Also gets the cost, a negative payout, which will most often be 0."},"getOpenPremium(address,uint256)":{"notice":"Also returns the negative premium, which will be 0 in most cases."},"mintShortOptionsThenSwapToTokens(address,uint256,uint256,address[],address,uint256)":{"notice":"If the first address in the path is not the shortOptionToken address, the tx will fail.         underlyingToken -> shortOptionToken -> quoteToken.         IMPORTANT: redeemTokens = shortOptionTokens"},"openFlashLong(address,uint256,uint256)":{"notice":"IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.         IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid."},"removeShortLiquidityThenCloseOptions(address,uint256,uint256,uint256,address,uint256)":{"notice":"Pulls UNI-V2 liquidity shares with shortOption<>underlying token, and optionTokens from msg.sender.         Then closes the longOptionTokens and withdraws underlyingTokens to the \"to\" address.         Sends underlyingTokens from the burned UNI-V2 liquidity shares to the \"to\" address.         UNI-V2 -> optionToken -> underlyingToken."}}}},"settings":{"compilationTarget":{"contracts/UniswapConnector03.sol":"UniswapConnector03"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/GSN/Context.sol":{"keccak256":"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183","urls":["bzz-raw://840b14ce0315c47d49ba328f1f9fa7654ded1c9e1559e6c5e777a7b2dc28bf0a","dweb:/ipfs/QmTLLabn4wcfGro9LEmUXUN2nwKqZSotXMvjDCLXEnLtZP"]},"@openzeppelin/contracts/math/SafeMath.sol":{"keccak256":"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806","urls":["bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5","dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV"]},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"keccak256":"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0","urls":["bzz-raw://73bbd77af0a8b07255d2ffa20728bcf13b116007c9ddac5d37046cfabb0e1e02","dweb:/ipfs/QmRgZgWCWCSMTTaok6o4QvWA6MgB4goS8qpb3sN7bAvaZ9"]},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385","urls":["bzz-raw://efdc632af6960cf865dbc113665ea1f5b90eab75cc40ec062b2f6ae6da582017","dweb:/ipfs/QmfAZFDuG62vxmAN9DnXApv7e7PMzPqi4RkqqZHLMSQiY5"]},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"keccak256":"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27","urls":["bzz-raw://0d7de652204c2ee291a61aa984103dfc7ae4392d651fbbc44a0079caee7c69a3","dweb:/ipfs/Qmcw1cQnq9eWDnrCBwU3TNyqLfTMUFg5YKpYUkELoMPuUE"]},"@openzeppelin/contracts/utils/Address.sol":{"keccak256":"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390","urls":["bzz-raw://774e78a9ff32792cc95db4d2ceaf3a7965bb7f0bea5e6cb7cff182b450d44b37","dweb:/ipfs/QmRRMC4uj7eAcLW7chynA3sNEYULMFazdLwQHKHQPyzAbA"]},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb","urls":["bzz-raw://78aa63fd7fbb8df2942b6c6e7bd89349507e306edbd5909ee8d9575c31be57e5","dweb:/ipfs/Qmf6z9KWKCJCfEVokgTBhBVq5yHtE6is31N8AV5BHdMkqQ"]},"@primitivefi/contracts/contracts/option/interfaces/IOption.sol":{"keccak256":"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb","urls":["bzz-raw://2d2bfc6599b5409ba0d0f426c8fedb7d6fcd2f4b983777ca66fce82e2f1a057b","dweb:/ipfs/QmSAYHuQrjBvXFinCWPCyp3S8pkA7ZDuAC5ZEerQaYPjXB"]},"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol":{"keccak256":"0xb8f9e6d923e556e137a606c76e9adf8fd07375c7ff0650f4a7932adc950df44f","urls":["bzz-raw://ef82aa3d081c12e307f45334cffd8916a27c5c7db62c2b44ce9663633a8c385b","dweb:/ipfs/QmQLsKZomP19HAAXKpLshhXiZhrusbf9yoZhy8tJDffVvS"]},"@primitivefi/contracts/contracts/option/libraries/TraderLib.sol":{"keccak256":"0x51be231a418ac2c24bd41de288598448ba50754d7b0577e6d432856b90ed7464","urls":["bzz-raw://7ed555a066ee8a3c538b3aae65ec1c274797933a599fcd886b92039bc83a02cc","dweb:/ipfs/QmSS6fQk4mgYHbEzWA86vVVChgEUZp1y34tLreASVDqrCP"]},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol":{"keccak256":"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96","urls":["bzz-raw://468dab23a95d9d9b7d6ce74008d45eef3de2f137ede604e6be6c5e7d0121c5e9","dweb:/ipfs/QmcXwjTfp6tCRgf1KsNQyUAtrqKhiaN6fbaHVGr22eficP"]},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol":{"keccak256":"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891","urls":["bzz-raw://5d2a90a0a796491507462a3da18c3f8819721d571572d765a2207c35bf0a0389","dweb:/ipfs/Qmf9ACYiT3qzjgsYuhm866FBdiBpRMXAPpQhSFbgqcyhHt"]},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"keccak256":"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b","urls":["bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf","dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH"]},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol":{"keccak256":"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2","urls":["bzz-raw://1df63ca373dafae3bd0ee7fe70f890a1dc7c45ed869c01de68413e0e97ff9deb","dweb:/ipfs/QmefJgEYGUL8KX7kQKYTrDweF8GB7yjy3nw5Bmqzryg7PG"]},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol":{"keccak256":"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d","urls":["bzz-raw://9bf2f4454ad63d4cff03a0630e787d9e8a9deed80aec89682cd8ad6379d9ef8c","dweb:/ipfs/Qme51hQNR2wpax7ooUadhtqLtXm8ffeVVYyubLkTT4wMCG"]},"contracts/UniswapConnector03.sol":{"keccak256":"0x627e79105b9f0a7bc73a34c377952f0401bd0d44a9173abd31dc019107067d5c","urls":["bzz-raw://68400764d138f3332a784ffa30a4e7b057e08d6fb37f1cd72255885cc4673da6","dweb:/ipfs/QmdNawmb92mHdkcSWXQPmDwzmQL2DmjtMr5KtCgNjHz76P"]},"contracts/interfaces/IUniswapConnector03.sol":{"keccak256":"0x43f2de7a3ee215635c810c2e70f4d41b0ad05acaa90a7e14950a32548335580a","urls":["bzz-raw://e01b9a5ebe4be3b0a084fdf2639579a3956fb4db7d64155419d54579ee3b515c","dweb:/ipfs/QmUsrwfnm7jTxfWxEARsaEwqHj9RrR2KqT3MK3iFM53nWT"]},"contracts/interfaces/IWETH.sol":{"keccak256":"0x63dce39ab69c513fb54459362900e4084a2ad2d164be2d46061afec61b956bfc","urls":["bzz-raw://43a214fb8eb4b26327dea29262c4e29e0f7269aec39ccb7e18bea20cfe7734da","dweb:/ipfs/QmduwCTCBH4nQbXSBpJDhbLuATXLyS44yehfSvy6FTYyby"]},"contracts/interfaces/IWethConnector01.sol":{"keccak256":"0x8600307089f1a5b6b1aedee2d6faeb636f8c5d9ae25b25b2087b236e7dbc8892","urls":["bzz-raw://566f6961f8919a07e406d0411c870523363632ac8336ec829676d4b576724dda","dweb:/ipfs/QmTRU4zChVGwy83Z2vXLVvc8Tty8qd7ot4nPsdSQABNZWD"]},"contracts/libraries/UniswapConnectorLib03.sol":{"keccak256":"0x9d8686ca6fe7469ea155790e4caad24adad22153e1a7328be12c8534ff079986","urls":["bzz-raw://3ad769324736cdf4867795a2b78ad4a3e21b0472b96386e3c6b7acd900af94a7","dweb:/ipfs/Qmb1mzRiNPcXyXCeMDzTuiWD3xB6JhYBB6QAj3LXnhC4M7"]},"contracts/libraries/WethConnectorLib01.sol":{"keccak256":"0x3b4f9c7a9cad0aa86479ce9fa60c2bfb2ffe75910686179b82872b9467c07091","urls":["bzz-raw://97a73fd602a1f04651241359d51ba53dd53e6255c85d711099005fc22198894d","dweb:/ipfs/QmUhJc48QBeTLoU7dcRgAPtS9yH3FdbV1SBwnBDoxwp8iY"]}},"version":1},"version":1,"checkPoints":[]}