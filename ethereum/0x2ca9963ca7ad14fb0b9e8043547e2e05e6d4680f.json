{"address":"0x2ca9963CA7ad14Fb0B9E8043547e2e05e6d4680F","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GLUWA_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GLUWA_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUNIVERSE_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LUNIVERSE_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"}],"name":"getUnpeg","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"gluwaApproved","type":"bool"},{"internalType":"bool","name":"luniverseApproved","type":"bool"},{"internalType":"bool","name":"processed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"},{"internalType":"address","name":"approver","type":"address"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"gluwaApprove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"}],"name":"gluwaApprove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"gluwa","type":"address"},{"internalType":"address","name":"luniverse","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"}],"name":"isUnpegged","outputs":[{"internalType":"bool","name":"unpegged","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"}],"name":"luniverseApprove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"},{"internalType":"address","name":"approver","type":"address"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"luniverseApprove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"processUnpeg","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"}],"name":"processUnpeg","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txnHash","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"sender","type":"address"}],"name":"unpeg","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"2-Way Peg Gluwacoin Gateway contract between the Ethereum network and the Luniverse. Gluwa and Luniverse serve as gatekeepers of the gateway. You can deposit to the contract's address to peg your Gluwacoin. Once pegged, submit the deposit transactionHash and request gatekeepers to verify your peg. Your Gluwacoins will get released on the Luniverse when both gatekeepers complete the verification. You can also withdraw your Luniverse Gluwacoin from the contract. Burn your Luniverse Gluwacoin and request gatekeepers to verify your burn by submitting its transactionHash. Once both gatekeepers verify the burn, your Gluwacoin will get released from the contract to your address.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"getUnpeg(bytes32)":{"details":"Returns Unpeg for the {txnHash}."},"gluwaApprove(bytes32)":{"details":"Gluwa approves Unpeg with the {txnHash}. There must be an Unpeg object with the {txnHash}. The caller must have a Gluwa role. The Unpeg object must not be Gluwa approved already.*"},"gluwaApprove(bytes32,address,bytes)":{"details":"Gluwa approves Unpeg with the {txnHash}, ETHlessly. The {sig} must be a correct signature of the {approver}. There must be an Unpeg object with the {txnHash}. The {approver} must have a Gluwa role. The Unpeg object must not be Gluwa approved already.*"},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isUnpegged(bytes32)":{"details":"Returns if there is Unpeg for the {txnHash}."},"luniverseApprove(bytes32)":{"details":"Luniverse approves Unpeg with the {txnHash}. There must be an Unpeg object with the {txnHash}. The caller must have a Luniverse role. The Unpeg object must not be Luniverse approved already.*"},"luniverseApprove(bytes32,address,bytes)":{"details":"Luniverse approves Unpeg with the {txnHash}, ETHlessly. The {sig} must be a correct signature of the {approver}. There must be an Unpeg object with the {txnHash}. The {approver} must have a Luniverse role. The Unpeg object must not be Luniverse approved already.*"},"processUnpeg(bytes32)":{"details":"Process Unpeg request and release the unpegged Gluwacoin to the requestor. Requirements: - the Unpeg must be Gluwa Approved and Luniverse Approved. - the Unpeg must be not processed yet."},"processUnpeg(bytes32,address,uint256,bytes)":{"details":"Process Unpeg request ETHlessly and release the unpegged Gluwacoin to the requestor. Requirements: - the Unpeg must be Gluwa Approved and Luniverse Approved. - the Unpeg must be not processed yet. - the caller must have the Gluwa role."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"token()":{"details":"Returns the address of the base token."},"unpeg(bytes32,uint256,address)":{"details":"Creates Unpeg for the {txnHash}. The creator must submit correct address of the {sender} and the {amount}, else gatekeepers will not approve the unpeg request."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"browser/LuniverseGluwacoinGateway.sol":"LuniverseGluwacoinGateway"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/LuniverseGluwacoinGateway.sol":{"keccak256":"0x0155b77303efcd9052e566daa072593f292f8397f0a1c457b75f57694c77dfbc","license":"MIT","urls":["bzz-raw://b62b3267a251818b1f805d313bd0292696a5de4ff2aaa4ce5dd45a776cbde810","dweb:/ipfs/QmdjXU1jUSBRYx6tZxCXW4c9r7RRf7jFxrfVdppsxgyjoL"]}},"version":1},"version":1,"checkPoints":[]}