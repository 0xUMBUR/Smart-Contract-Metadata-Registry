{"address":"0x126Ca81e08E777b6F75da7854CA749A920A5F734","name":"","metadata":{"compiler":{"version":"0.8.0+commit.c7dfd78e"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"CANNOT_TRANSFER_TO_ZERO_ADDRESS","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_CURRENT_OWNER","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Set or reaffirm the approved address for an NFT. This function can be changed to payable.","params":{"_approved":"Address to be approved for the given NFT ID.","_tokenId":"ID of the token to be approved."}},"balanceOf(address)":{"details":"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.","params":{"_owner":"Address for whom to query the balance."},"returns":{"_0":"Balance of _owner."}},"constructor":{"details":"Contract constructor. Sets metadata extension `name` and `symbol`."},"getApproved(uint256)":{"details":"Get the approved address for a single NFT.","params":{"_tokenId":"ID of the NFT to query the approval of."},"returns":{"_0":"Address that _tokenId is approved for."}},"isApprovedForAll(address,address)":{"details":"Checks if `_operator` is an approved operator for `_owner`.","params":{"_operator":"The address that acts on behalf of the owner.","_owner":"The address that owns the NFTs."},"returns":{"_0":"True if approved for all, false otherwise."}},"mint(address,uint256,string)":{"details":"Mints a new NFT.","params":{"_to":"The address that will own the minted NFT.","_tokenId":"of the NFT to be minted by the msg.sender.","_uri":"String representing RFC 3986 URI."}},"name()":{"details":"Returns a descriptive name for a collection of NFTokens.","returns":{"_name":"Representing name."}},"ownerOf(uint256)":{"details":"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.","params":{"_tokenId":"The identifier for an NFT."},"returns":{"_owner":"Address of _tokenId owner."}},"safeTransferFrom(address,address,uint256)":{"details":"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.","params":{"_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.","params":{"_data":"Additional data with no specified format, sent in call to `_to`.","_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"setApprovalForAll(address,bool)":{"details":"Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.","params":{"_approved":"True if the operators is approved, false to revoke approval.","_operator":"Address to add to the set of authorized operators."}},"supportsInterface(bytes4)":{"details":"Function to check which interfaces are suported by this contract.","params":{"_interfaceID":"Id of the interface."},"returns":{"_0":"True if _interfaceID is supported, false otherwise."}},"symbol()":{"details":"Returns an abbreviated name for NFTokens.","returns":{"_symbol":"Representing symbol."}},"tokenURI(uint256)":{"details":"A distinct URI (RFC 3986) for a given NFT.","params":{"_tokenId":"Id for which we want uri."},"returns":{"_0":"URI of _tokenId."}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.","params":{"_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"_newOwner":"The address to transfer ownership to."}}},"version":1},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."},"getApproved(uint256)":{"notice":"Throws if `_tokenId` is not a valid NFT."},"safeTransferFrom(address,address,uint256)":{"notice":"This works identically to the other function with an extra data parameter, except this function just sets data to \"\""},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."},"setApprovalForAll(address,bool)":{"notice":"This works even if sender doesn't own any tokens at the time."},"transferFrom(address,address,uint256)":{"notice":"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."}},"version":1}},"settings":{"compilationTarget":{"create-cant-buy.sol":"MarioXCantBuyThis"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"create-cant-buy.sol":{"keccak256":"0xfdcfa6f08ce90e1d950339c5757651ef168096624211e4dcf0a09e799e1a0e6a","urls":["bzz-raw://9ce2e31e0a1023897df9b0ba9cfe3f443f792f75e25166ee9136c92b0d086eae","dweb:/ipfs/QmckvoAgC7BeKmXgbKYvhvLmqL5v7tCsnuM5DJxh4eTkpS"]},"https://github.com/marioxnyc/cant-buy/src/contracts/ownership/ownable.sol":{"keccak256":"0xde42817e9f3bf0e52540fd18df0f3159ca97b801a895d74b5d2de57dab2b8997","license":"MIT","urls":["bzz-raw://572487fdddb3e50ff00eb5a4e7751e081243a41da47a8108677f64b90b263e89","dweb:/ipfs/QmS4qmNFJXk1JxqiwMCQEgBX5MGmmmJDf8eCGAAURhMgrG"]},"https://github.com/marioxnyc/cant-buy/src/contracts/tokens/erc721-metadata.sol":{"keccak256":"0x12ef4ff6ba9eabbbe8ae314387bc1a6cb106816460e2c0053639967b1f11a01d","license":"MIT","urls":["bzz-raw://99b83bba1ef73927e3d14d430cbc5ab5aa5a4fff89c34bbe11346d28608512fc","dweb:/ipfs/QmdcFagJBnuk2DGje1vvbcKC1pLRwpPQZoUivQmroahEN8"]},"https://github.com/marioxnyc/cant-buy/src/contracts/tokens/erc721-token-receiver.sol":{"keccak256":"0xcc0e27e0cad67e5b62a31d6816c158944cf4752fea24a5493865443571a99f7f","license":"MIT","urls":["bzz-raw://9a9c8e224f186c0c276e229ff2e71a3db05666447d0489a78b9b066fc5ea247b","dweb:/ipfs/QmXsju2YRraVuPePUdozpD6EW8CqBjfEntTcTC5DHpWw5q"]},"https://github.com/marioxnyc/cant-buy/src/contracts/tokens/erc721.sol":{"keccak256":"0xcd2c844dd50763d48bf2db931d585dcdf12676826915a1142f1535839a248e67","license":"MIT","urls":["bzz-raw://c55d3446df5f895d08f0050f042f874800c098b5a6d3301da71693ac42faaf1e","dweb:/ipfs/Qmb84b9CduLNKhmxLH4FDtYnsTxtXA9nU1iov624Zma64g"]},"https://github.com/marioxnyc/cant-buy/src/contracts/tokens/nf-token-metadata.sol":{"keccak256":"0x5ec11999c614e739af6e862ffc0406d08fe82f955a51143cd47831776d7a6af3","license":"MIT","urls":["bzz-raw://6aa7d3e125b0bf67f4b2792a20968cbebc64843212482c178bb5263decf49c03","dweb:/ipfs/QmZg6AddmzTYVAYbCHQWbvFLMz5hVK1QwzRFL3YxmEMAPm"]},"https://github.com/marioxnyc/cant-buy/src/contracts/tokens/nf-token.sol":{"keccak256":"0x794fd6f85727bc00ca425c30c5eac36d5fed78aaabcb1f77be7b8757faca36f5","license":"MIT","urls":["bzz-raw://35f6051e2354ac5869239bd1d9ae164cadb1e1413898f67cc5cebfd5e1542f5c","dweb:/ipfs/QmS1CZiQ6qLQURTiSK5hka9EJirj4TtaNRrhGJ94zPMAUd"]},"https://github.com/marioxnyc/cant-buy/src/contracts/utils/address-utils.sol":{"keccak256":"0xefd40971be5bfa8f21e60d8dbd4cdd3e7ea6852c16a16746ef2b5de3ce779cd7","license":"MIT","urls":["bzz-raw://9116ab32882f2e9583b7982cc98e27ba4530929ee66ac095954b2105b3bc342e","dweb:/ipfs/QmThAomX4YogKde5HK45WT4CPF2N81B3eo7bgdxtwcBrLu"]},"https://github.com/marioxnyc/cant-buy/src/contracts/utils/erc165.sol":{"keccak256":"0x89f7591e751c8d4f47d84b03f1d940aa3f75222ca45c2532766048841a341060","license":"MIT","urls":["bzz-raw://e93c9a7d50bb3a4021d1ec31e250267c12409a10f51355e30930252c5f4e3141","dweb:/ipfs/QmcWkgJTGHQCDjgMzFwy18Kn7fZq9M3EX88THkFv3McB9L"]},"https://github.com/marioxnyc/cant-buy/src/contracts/utils/supports-interface.sol":{"keccak256":"0x400dadd2c511e9efcf6b6e722ef9d789828bc9ea75cf71447e641b931d9b6831","license":"MIT","urls":["bzz-raw://ea1efd2b4eb3197774b7ba3d76c359c853e1c86d41f511b8b47d709dffd72713","dweb:/ipfs/QmXGDWPwsKXUwqbom9DzS3jVUQLpmiXA2UAxaEC5a49s6P"]}},"version":1},"version":1,"checkPoints":[]}