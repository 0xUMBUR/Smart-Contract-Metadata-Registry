{"address":"0x21E7827eeF2BEc3b7d6b1b6E97429c5Ab38c44ed","name":"","metadata":{"compiler":{"version":"0.8.6+commit.11564f7e"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"crypto-pumpkin By initialization, the owner account will be the one that called initializeOwner. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"ruler-core-public-88aae20c4dd430df790b208daf28c53cc37fcffb/contracts/utils/Ownable.sol":"Ownable"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"ruler-core-public-88aae20c4dd430df790b208daf28c53cc37fcffb/contracts/utils/Initializable.sol":{"keccak256":"0x1351aa09dd4c2833eab70a9eedee525dfa0224616bb9b0b1652fe49a34791f81","license":"MIT","urls":["bzz-raw://cafed06992be486dc23ef8aa91194b042a8e43a9ff50fe788daa4a74baa7dde3","dweb:/ipfs/Qmd6ENahdQFkkkTESGUuXYw7CUt2UoC7dftuAqKXcW2EWe"]},"ruler-core-public-88aae20c4dd430df790b208daf28c53cc37fcffb/contracts/utils/Ownable.sol":{"keccak256":"0xd11f98bbefd523040b6e070e5a0e813efcc0c3b787ffad28bb8ebabe7c4c79b4","license":"No License","urls":["bzz-raw://06809720ca4a74a1efd34cd2580a37ec0aaa6583b914875f2ccc1dfff887cacd","dweb:/ipfs/QmdfkLLNGB1kaHzXGtEEG5kJwZM7zcws5Sfo17c1nVL29Z"]}},"version":1},"version":1,"checkPoints":[]}