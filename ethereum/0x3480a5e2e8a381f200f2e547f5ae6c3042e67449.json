{"address":"0x3480a5E2E8A381F200F2e547f5aE6c3042e67449","name":"","metadata":{"compiler":{"version":"0.6.10+commit.00c0fcaf"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBalanceContract","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"tokenURI","type":"string"}],"name":"mintNFT","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"salePrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"name":"setPrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"approve(address,uint256)":{"details":"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.","params":{"to":"address to be approved for the given token ID","tokenId":"uint256 ID of the token to be approved"}},"balanceOf(address)":{"details":"Gets the balance of the specified address.","params":{"owner":"address to query the balance of"},"returns":{"_0":"uint256 representing the amount owned by the passed address"}},"baseURI()":{"details":"Returns the base URI set via {_setBaseURI}. This will be automatically added as a preffix in {tokenURI} to each token's URI, when they are non-empty."},"getApproved(uint256)":{"details":"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.","params":{"tokenId":"uint256 ID of the token to query the approval of"},"returns":{"_0":"address currently approved for the given token ID"}},"isApprovedForAll(address,address)":{"details":"Tells whether an operator is approved by a given owner.","params":{"operator":"operator address which you want to query the approval of","owner":"owner address which you want to query the approval of"},"returns":{"_0":"bool whether the given operator is approved by the given owner"}},"name()":{"details":"Gets the token name.","returns":{"_0":"string representing the token name"}},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"Gets the owner of the specified token ID.","params":{"tokenId":"uint256 ID of the token to query the owner of"},"returns":{"_0":"address currently marked as the owner of the given token ID"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator","params":{"_data":"bytes data to send along with a safe transfer check","from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"setApprovalForAll(address,bool)":{"details":"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.","params":{"approved":"representing the status of the approval to be set","operator":"operator address to set the approval"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."},"symbol()":{"details":"Gets the token symbol.","returns":{"_0":"string representing the token symbol"}},"tokenByIndex(uint256)":{"details":"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.","params":{"index":"uint256 representing the index to be accessed of the tokens list"},"returns":{"_0":"uint256 token ID at the given index of the tokens list"}},"tokenOfOwnerByIndex(address,uint256)":{"details":"Gets the token ID at a given index of the tokens list of the requested owner.","params":{"index":"uint256 representing the index to be accessed of the requested tokens list","owner":"address owning the tokens list to be accessed"},"returns":{"_0":"uint256 token ID at the given index of the tokens list owned by the requested address"}},"tokenURI(uint256)":{"details":"Returns the URI for a given token ID. May return an empty string. If the token's URI is non-empty and a base URI was set (via {_setBaseURI}), it will be added to the token ID's URI as a prefix. Reverts if the token ID does not exist."},"totalSupply()":{"details":"Gets the total amount of tokens stored by the contract.","returns":{"_0":"uint256 representing the total amount of tokens"}},"transferFrom(address,address,uint256)":{"details":"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"browser/NFTsale.sol":"NFTSale"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/NFTsale.sol":{"keccak256":"0x9a4c01c03d26284daf7b6d0ed6581f8b671d38c2ecb6b78ebff614e20bc1462b","urls":["bzz-raw://f3d87491c1044528241cf9dc8efe97b760304baecb99aa8b4103407236a29db7","dweb:/ipfs/QmXoVxtxJeYMtJvLhJbP2pQSjqxpFer2Q59r5EGwrQAuJE"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol":{"keccak256":"0x0de74dfa6b37943c1b834cbd8fb7a8d052e5ff80c7adb33692102dd6cd2985e9","urls":["bzz-raw://9d2d827fcf4a838f5821732c0acd6a40d21c2a5a2cfe2563feec91465f47bb60","dweb:/ipfs/Qmex3wMKf5Sghbfvr288RUg1kP2uAyTMf11w83WbMbpQQc"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol":{"keccak256":"0x9a8c691b81a4a48adbbd5b010faa56a168c189e711495c16347d93b60b805f82","urls":["bzz-raw://d951d626ed7bfe1a2d7a6bd4af315ff8691929bd567594d6ab53599fe9e17e4e","dweb:/ipfs/QmYkGeowpa6Bjr9aaDirWdDo7hSfShzzZhanKC4nTfRhLj"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/introspection/ERC165.sol":{"keccak256":"0x98aa1380fd49a255d6cbea58558ea76bff35c59b218671fde8842907b44e7390","urls":["bzz-raw://613eaff66d4c270ddd87448c06267b6e043ef8c8223cb39d8767bc9daa9cb1ec","dweb:/ipfs/Qmcg56orudv25ghmnZCxN37HwNKCXmTTDxj5cyoYYnvHTg"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/introspection/IERC165.sol":{"keccak256":"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149","urls":["bzz-raw://b0167043c1938b56904deaa481a73041aa4a9e054c60db0b0dfbebfe7869c06a","dweb:/ipfs/QmUoYjhymBr6WUpExKgRvKxXD5fcdpQEe1o9ResKZu6CC5"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol":{"keccak256":"0xe4ed9d633e8e678e8ece3756e4002cc7989b72cd29a17ecdacdabf4fd48820a7","urls":["bzz-raw://03a55c81a7d4c93a1ca6d9b931830c1fde2799bfbbf5841321f67e7b056c36c2","dweb:/ipfs/QmbcgdfB278NvzVZKjA7Jf1NjSeCCQ2277mJGL4UskyS56"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol":{"keccak256":"0xbdc3840b19163ca1b2ef009fdd1c087b85ab730f4f22f8a4a7fb8675697f5d2e","urls":["bzz-raw://1337848ed52374d59a3ea3eec87cd2bcb170fc26b660b879a5afa7f57b5845c4","dweb:/ipfs/QmbYQnMrkwFhxXwRWmysR8UCqVhbSso91bQqJJN5TU6SJ2"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"keccak256":"0x34726f200d88943561936daf5297552636b58b57ecd3eca6494d678d93d03252","urls":["bzz-raw://dee47bb5e1ef4b3b8ffd3edd9d1d774249c546d4ae890c46605dd9eda73ff7eb","dweb:/ipfs/QmRKJyJDbjbaf8LLnw1jcpZ47VbU2c9gYT2xZSp19m55aM"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Enumerable.sol":{"keccak256":"0xf81dbd00ad4a1e4795df72759e33872c2599ea6c060be5898ed5d6fcd8ee9a11","urls":["bzz-raw://44dfcc25314c5ed29bc069c4746f87d98bb30a8dbc1a9bdeb797c2a530b9b9c5","dweb:/ipfs/QmbRc5bKDobjE6zamLUy6Sh5HKd6XtNAsfBJzgZuQB3jpv"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Metadata.sol":{"keccak256":"0xa17f4147965ceccd9f2017b14fcf8ef142346ec69c7e0424fd5c99f5ffeed8fa","urls":["bzz-raw://25315aea456015e8a2bc2b5badde793d1ae16d67d09df50ecb90a2af13674b92","dweb:/ipfs/QmTujwcp5f1LioDNdRMfsXs2MsCWu2UeijhEg4VnDbzZmk"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol":{"keccak256":"0x0c25ff00a747f1df6cb5e5c103adb98334df7e9561b0d46079454131c139bff9","urls":["bzz-raw://9417ce94829309329fa0f0dc50089696bc55f9f675c4b2ffcb31f960fe706250","dweb:/ipfs/QmdckiAmnW2uhXK2V2enu7bEbqiMR6hzMD1ytGH43pKLhE"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x8e5e5ba56ec398e1f5dd1b3c92b604f5d7509adedd67cb64ec99b6032603aaf1","urls":["bzz-raw://dedc4142af588d22fce563a0c94b11d2ef72e8960488175d1e285dfead8866eb","dweb:/ipfs/Qmbaka9k33fbw1iirt4aYZtJvmFUjq23feuwreTEG7djqU"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Counters.sol":{"keccak256":"0x4512ce6ffc8d4674ef3f53af1424915926f0212cd0aa5a09a5b90712202ca917","urls":["bzz-raw://187600c7a359499a910e644d57f6589ec3cd85236a350c2e22780edd11950ae1","dweb:/ipfs/QmWL2RiHN5k4hgWTVrULZEShSninUAGPMBU3Pzpgm8BoQj"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/utils/EnumerableMap.sol":{"keccak256":"0xaf17cd6e2d9f484546d48a0e9e7e279e4e90436c16df7fc3b562e58594f268d7","urls":["bzz-raw://7559f5728423b275e0cbb3e787d2c79115ad09e146abfedf10fb50e507fbf1a5","dweb:/ipfs/QmX4jFGeYtL3QSfoS1HNQpytnjKvq7fHszAjvn42AVGHSn"]},"github/OpenZeppelin/openzeppelin-contracts/contracts/utils/EnumerableSet.sol":{"keccak256":"0xb94a03de3c8602a90c917ec7537b962dcf2cce2f2bd5f266e6ad790b45c10b97","urls":["bzz-raw://9291ee41737c8e8f37e6cae30dc2bf7145a99985b29e02120d57190369273562","dweb:/ipfs/QmeFJtn4SVTGRKRsh2cCxa2gisLvNbQf5KvgHeUaF1Pzbv"]}},"version":1},"version":1,"checkPoints":[]}