{"address":"0x9f2CD574465428c5187AcaeE667d9f1fd30670c9","name":"","metadata":{"compiler":{"version":"0.8.0+commit.c7dfd78e"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"CANNOT_TRANSFER_TO_ZERO_ADDRESS","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NOT_CURRENT_OWNER","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This is an example contract implementation of NFToken with metadata extension.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Set or reaffirm the approved address for an NFT. This function can be changed to payable.","params":{"_approved":"Address to be approved for the given NFT ID.","_tokenId":"ID of the token to be approved."}},"balanceOf(address)":{"details":"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.","params":{"_owner":"Address for whom to query the balance."},"returns":{"_0":"Balance of _owner."}},"constructor":{"details":"Contract constructor. Sets metadata extension `name` and `symbol`."},"getApproved(uint256)":{"details":"Get the approved address for a single NFT.","params":{"_tokenId":"ID of the NFT to query the approval of."},"returns":{"_0":"Address that _tokenId is approved for."}},"isApprovedForAll(address,address)":{"details":"Checks if `_operator` is an approved operator for `_owner`.","params":{"_operator":"The address that acts on behalf of the owner.","_owner":"The address that owns the NFTs."},"returns":{"_0":"True if approved for all, false otherwise."}},"mint(address,uint256,string)":{"details":"Mints a new NFT.","params":{"_to":"The address that will own the minted NFT.","_tokenId":"of the NFT to be minted by the msg.sender.","_uri":"String representing RFC 3986 URI."}},"name()":{"details":"Returns a descriptive name for a collection of NFTokens.","returns":{"_name":"Representing name."}},"ownerOf(uint256)":{"details":"Returns the address of the owner of the NFT. NFTs assigned to the zero address are considered invalid, and queries about them do throw.","params":{"_tokenId":"The identifier for an NFT."},"returns":{"_owner":"Address of _tokenId owner."}},"safeTransferFrom(address,address,uint256)":{"details":"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.","params":{"_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.","params":{"_data":"Additional data with no specified format, sent in call to `_to`.","_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"setApprovalForAll(address,bool)":{"details":"Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.","params":{"_approved":"True if the operators is approved, false to revoke approval.","_operator":"Address to add to the set of authorized operators."}},"supportsInterface(bytes4)":{"details":"Function to check which interfaces are suported by this contract.","params":{"_interfaceID":"Id of the interface."},"returns":{"_0":"True if _interfaceID is supported, false otherwise."}},"symbol()":{"details":"Returns an abbreviated name for NFTokens.","returns":{"_symbol":"Representing symbol."}},"tokenURI(uint256)":{"details":"A distinct URI (RFC 3986) for a given NFT.","params":{"_tokenId":"Id for which we want uri."},"returns":{"_0":"URI of _tokenId."}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.","params":{"_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"_newOwner":"The address to transfer ownership to."}}},"version":1},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."},"getApproved(uint256)":{"notice":"Throws if `_tokenId` is not a valid NFT."},"safeTransferFrom(address,address,uint256)":{"notice":"This works identically to the other function with an extra data parameter, except this function just sets data to \"\""},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."},"setApprovalForAll(address,bool)":{"notice":"This works even if sender doesn't own any tokens at the time."},"transferFrom(address,address,uint256)":{"notice":"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they may be permanently lost."}},"version":1}},"settings":{"compilationTarget":{"contracts/ERC721/Creation.sol":"MyArtSale"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/ERC721/Creation.sol":{"keccak256":"0x716a951bf2b94f1b7e4ff633768c3a536a938bb021b286b47fa4d35e9ad336cf","license":"MIT","urls":["bzz-raw://d851250cc098c1d464f4e65c0f3ac38484ba3dc2df52487a91a4e7bf222be17f","dweb:/ipfs/QmUaRHkDbvNsoa1fgNCo57U3bbTkjkioGTPFsvWSHFnrFh"]},"contracts/ERC721/erc721-metadata.sol":{"keccak256":"0xecd87907f84c11c5f955f522fb37cd93142283eca87af3d1836fc54d2ba30d9a","license":"MIT","urls":["bzz-raw://a4008f6eb605efda170cecbfce62b23ea689240ba6562429f0ab5b8905e05ed9","dweb:/ipfs/QmdkMFwoSLcZp2icBAzJ4UU5JmLu2NgL277fpmSG4q7BBA"]},"contracts/ERC721/erc721-token-receiver.sol":{"keccak256":"0x5246942377a1c954cf5a057fd80a526b893a324f7bed4661110b0eba772896c9","license":"MIT","urls":["bzz-raw://c874285a28612b318f8b5acffb4b23c1f97bfeee6dce0763e6e295129db4efca","dweb:/ipfs/QmTxGhA6yY2LxkZe2use5F4FcHZCnjsc19xyVAdwwAsonT"]},"contracts/ERC721/erc721.sol":{"keccak256":"0xb731f70413b97b6d48fb4740613a1f0c3fd3c00d9900adecb030f53e682030f1","license":"MIT","urls":["bzz-raw://fb9ec45f4b039baaa1b48195ad7428abadbda217c7c69c286d4b820f6383fbea","dweb:/ipfs/QmW9L9EoPjQReVSRk3a9Fsvibfa1Tc8zT2W4CijQVxZsKT"]},"contracts/ERC721/nf-token-metadata.sol":{"keccak256":"0x4f9e6ce1d65fbdc4d57717f43b8efdd54d05975446555714af829ca8ebaeae86","license":"MIT","urls":["bzz-raw://418e99d174a6d27d107a122cc1c3c69a95d169a002f79bb6323b204ca1fc7c3a","dweb:/ipfs/QmVJCE1Jv4qA4JrVQtLpigNULbVYGAXKGu1kGxsQ36g49u"]},"contracts/ERC721/nf-token.sol":{"keccak256":"0x57eade9f17684685bb28d73d902a1da43cebf1966d21dc2a19047ca6562bf35a","license":"MIT","urls":["bzz-raw://dcfdf3dc447b6b6c18fa204c4a7c451fe2a5321544ec04fe58a114eb6d8fd19c","dweb:/ipfs/QmatASJ8B2tT3CuKiPKWTu19oMdnA4A6o83jYRm9RrNPhs"]},"contracts/utils/address-utils.sol":{"keccak256":"0x14a9df8e1afb73420bde73aab5eef0928191b84bf3611fb2d41203bba5439dd2","license":"MIT","urls":["bzz-raw://bb95af82dea4ada3af123cf4820891b764fe7a8bfb03602852cd0f7ac2146670","dweb:/ipfs/QmWGSbVG47RQksJdHFd5NK4eUjeGB18vLzVJ1x4vmXzBy8"]},"contracts/utils/erc165.sol":{"keccak256":"0x4b9886f6dd892f2e68d546d773e7c1dfbbeb6c0645551767701c3b5023356b01","license":"MIT","urls":["bzz-raw://4dbe24dbcbb8e000947d77740b2b826ee0c9dec0e73ebe36fb8a4e5ceddaa1b0","dweb:/ipfs/QmXBPMm7o6EZ6XYd7Kqto7QuxSPTNoLXhLpt27J8SDPpv4"]},"contracts/utils/supports-interface.sol":{"keccak256":"0x65f240a533ac048e1ebf8865fa998c69bc648b0404f9c8c89a610fdb6d78a080","license":"MIT","urls":["bzz-raw://d91ab1e870b13f456ff3bfe25ebb8c377b6ffc9d068cc47d2dced16306fa5ceb","dweb:/ipfs/QmdFQfoEALvnjK8c2rNHS8cJfgxKRTdhvSNwrfPByfnPEE"]}},"version":1},"version":1,"checkPoints":[]}