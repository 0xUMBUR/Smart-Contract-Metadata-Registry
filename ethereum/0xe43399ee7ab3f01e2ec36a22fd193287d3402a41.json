{"address":"0xE43399Ee7Ab3f01E2EC36A22Fd193287D3402A41","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"address[]","name":"sources","type":"address[]"},{"internalType":"address","name":"fallbackOracle","type":"address"},{"internalType":"address","name":"weth","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"asset","type":"address"},{"indexed":true,"internalType":"address","name":"source","type":"address"}],"name":"AssetSourceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"fallbackOracle","type":"address"}],"name":"FallbackOracleUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"weth","type":"address"}],"name":"WethSet","type":"event"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"}],"name":"getAssetPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"assets","type":"address[]"}],"name":"getAssetsPrices","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFallbackOracle","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"}],"name":"getSourceOfAsset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"address[]","name":"sources","type":"address[]"}],"name":"setAssetSources","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fallbackOracle","type":"address"}],"name":"setFallbackOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Lever","kind":"dev","methods":{"constructor":{"params":{"assets":"The addresses of the assets","fallbackOracle":"The address of the fallback oracle to use if the data of an        aggregator is not consistent","sources":"The address of the source of each asset"}},"getAssetPrice(address)":{"params":{"asset":"The asset address"}},"getAssetsPrices(address[])":{"params":{"assets":"The list of assets addresses"}},"getFallbackOracle()":{"returns":{"_0":"address The addres of the fallback oracle"}},"getSourceOfAsset(address)":{"params":{"asset":"The address of the asset"},"returns":{"_0":"address The address of the source"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setAssetSources(address[],address[])":{"params":{"assets":"The addresses of the assets","sources":"The address of the source of each asset"}},"setFallbackOracle(address)":{"params":{"fallbackOracle":"The address of the fallbackOracle"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"LeverOracle","version":1},"userdoc":{"kind":"user","methods":{"constructor":"Constructor","getAssetPrice(address)":{"notice":"Gets an asset price by address"},"getAssetsPrices(address[])":{"notice":"Gets a list of prices from a list of assets addresses"},"getFallbackOracle()":{"notice":"Gets the address of the fallback oracle"},"getSourceOfAsset(address)":{"notice":"Gets the address of the source for an asset address"},"setAssetSources(address[],address[])":{"notice":"External function called by the Lever governance to set or replace sources of assets"},"setFallbackOracle(address)":{"notice":"Sets the fallbackOracle - Callable only by the Lever governance"}},"notice":"Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator         smart contracts as primary option - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallbackOracle - Owned by the Lever governance system, allowed to add sources for assets, replace them   and change the fallbackOracle","version":1}},"settings":{"compilationTarget":{"LeverOracle.sol":"LeverOracle"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"Address.sol":{"keccak256":"0x71a8ea40617f961a5aef4129be273aaf285eb3a1fa6ad66a53aeec0768fea56b","license":"agpl-3.0","urls":["bzz-raw://4f4ebe707d00ef5573795c4020df59fe131799b0c39a4e44a79567f249287b66","dweb:/ipfs/QmdjsoYUuKKkUjkjxf97SjkLNGYbaU6PDXkerhb7P83uuh"]},"Context.sol":{"keccak256":"0x4496038aa8cd303215ae6f28c92f1c3114555712f43f2b3141e199336158e756","license":"MIT","urls":["bzz-raw://e70b71484726f496ffc2689eedd2909f9784be0b69d45f86beecd2e75b502107","dweb:/ipfs/QmWNi9NcUMFMWdo2AUjDiuTxkbtt9nEvebTmYMnNFWTg7N"]},"IChainlinkAggregator.sol":{"keccak256":"0xe99ace779ac0bd0507e530b40216050d45d350517a92b1d8e63036c224875d9b","license":"agpl-3.0","urls":["bzz-raw://e0402877786ec3802b2e42ed3b50f75c77c0abd0859cc0ebbeada4378d61ab37","dweb:/ipfs/QmVHNWX7oEMzWJsohf28BTsUXmV16R5YGRgzGEH4wbskMJ"]},"IERC20.sol":{"keccak256":"0xe9d8994b4b126042dd702600c37635bb16a379a658bc0248bedb951befb95df7","license":"agpl-3.0","urls":["bzz-raw://895dd646d5fd895512ece68ad3faa3fa515130f2d1e4f103c83db32758ca369e","dweb:/ipfs/QmRGGCniMXoig91GemkXb8ookxDy8dx2WCfwWwivuFXGVN"]},"IPriceOracleGetter.sol":{"keccak256":"0x71bcbdea0acf095e985dfd7a98181d5857f1918aa6c524a125fdf953a221a0b8","license":"agpl-3.0","urls":["bzz-raw://ef723806eaba5066a5d642da7c999353b251a7a993e6a0afd86e8ae35e8b3908","dweb:/ipfs/QmaB4L3qVSD49wFRx3M4BQWBwZHvYMFEedbT4qNTTk2Knt"]},"LeverOracle.sol":{"keccak256":"0x8eea373edefe6e7d9f3427b5842beee066f0e77d7343721aa76f4da749d48055","license":"agpl-3.0","urls":["bzz-raw://cf6cd8d8cc90e746a58101badff9c231e8cfd9c8ca6f9451af06891da130adc1","dweb:/ipfs/QmZR2cNipyk3vNtLgptzySjo11GrHLgNV8xsq4MD8oQxnb"]},"Ownable.sol":{"keccak256":"0xbfcfaaa0f6a6299b7371b50aad65768a66cd397a6c998a639c7394afc44405a1","license":"MIT","urls":["bzz-raw://befb725565cb402064292fa546356aaacd15fcb1ff598f3aef11cd00b0dd9967","dweb:/ipfs/Qmb6y7VmrgPctp4nDC5YzqzzBoBkM1AgPReqAGLN3Ay3A8"]},"SafeERC20.sol":{"keccak256":"0xd2f21401b1f030221da8eb167adb22a1cff47d7f2ef23dd34a72f05543d23aca","license":"MIT","urls":["bzz-raw://24b5c9a940febf40712ce6d9b21dc6e84e6f8112e8e8bcee811520e9df33ec27","dweb:/ipfs/QmV23WWJ55wLuWKigdR1cFQYQJaBnQhEWrUrm7o4kx6stC"]},"SafeMath.sol":{"keccak256":"0x491d2b7ab89a7acf1f305dc70cc3a933136bd62c6e49cfa4e70e3fd2e8dce58d","license":"agpl-3.0","urls":["bzz-raw://9031f0f7a8e1394b7f75bf5a6bfa22eddbbb8e4e7716cb31f11a90645d5cde19","dweb:/ipfs/QmRFfZbPnosAXi31crVuus7cTwu8FoJK1gfaKnNZX22J33"]}},"version":1},"version":1,"checkPoints":[]}