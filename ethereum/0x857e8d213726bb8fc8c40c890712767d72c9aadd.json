{"address":"0x857e8d213726bb8Fc8c40C890712767d72C9aADD","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"_key","type":"bytes32"},{"indexed":true,"internalType":"address","name":"_caller","type":"address"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"_data","type":"bytes"}],"name":"DepositETH","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"_key","type":"bytes32"},{"indexed":false,"internalType":"address","name":"_inputToken","type":"address"},{"indexed":false,"internalType":"address","name":"_owner","type":"address"},{"indexed":false,"internalType":"address","name":"_witness","type":"address"},{"indexed":false,"internalType":"bytes","name":"_data","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"OrderCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"_key","type":"bytes32"},{"indexed":false,"internalType":"address","name":"_inputToken","type":"address"},{"indexed":false,"internalType":"address","name":"_owner","type":"address"},{"indexed":false,"internalType":"address","name":"_witness","type":"address"},{"indexed":false,"internalType":"bytes","name":"_data","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"_auxData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_bought","type":"uint256"}],"name":"OrderExecuted","type":"event"},{"inputs":[],"name":"ETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IModule","name":"_module","type":"address"},{"internalType":"contract IERC20","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"address","name":"_witness","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes","name":"_auxData","type":"bytes"}],"name":"canExecuteOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IModule","name":"_module","type":"address"},{"internalType":"contract IERC20","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"address","name":"_witness","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"decodeOrder","outputs":[{"internalType":"address","name":"module","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address payable","name":"owner","type":"address"},{"internalType":"address","name":"witness","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes32","name":"secret","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"depositEth","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_module","type":"address"},{"internalType":"address","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"address","name":"_witness","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes32","name":"_secret","type":"bytes32"}],"name":"encodeEthOrder","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IModule","name":"_module","type":"address"},{"internalType":"contract IERC20","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"address","name":"_witness","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes32","name":"_secret","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"encodeTokenOrder","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"ethDeposits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IModule","name":"_module","type":"address"},{"internalType":"contract IERC20","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes","name":"_signature","type":"bytes"},{"internalType":"bytes","name":"_auxData","type":"bytes"}],"name":"executeOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IModule","name":"_module","type":"address"},{"internalType":"contract IERC20","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"address","name":"_witness","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"existOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IModule","name":"_module","type":"address"},{"internalType":"contract IERC20","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"address","name":"_witness","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"keyOf","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"contract IModule","name":"_module","type":"address"},{"internalType":"contract IERC20","name":"_inputToken","type":"address"},{"internalType":"address payable","name":"_owner","type":"address"},{"internalType":"address","name":"_witness","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"vaultOfOrder","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"canExecuteOrder(address,address,address,address,bytes,bytes)":{"params":{"_auxData":"- Bytes of the auxiliar data used for the handlers to execute the order","_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_witness":"- Address of the witness"},"returns":{"_0":"bool - whether the order can be executed or not"}},"cancelOrder(address,address,address,address,bytes)":{"details":"The params should be the same used for the order creation","params":{"_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_witness":"- Address of the witness"}},"decodeOrder(bytes)":{"params":{"_data":"- Bytes of the order"},"returns":{"data":"- Bytes of the order's data","inputToken":"- Address of the input token","module":"- Address of the module to use for the order execution","owner":"- Address of the order's owner","secret":"-  Private key of the _witness","witness":"- Address of the witness"}},"depositEth(bytes)":{"params":{"_data":"- Bytes of an ETH to token order. See `encodeEthOrder` for more info"}},"encodeEthOrder(address,address,address,address,bytes,bytes32)":{"details":"Returns the input data that the user needs to use to create the order The _secret is used to prevent a front-running at the order execution","params":{"_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_secret":"-  Private key of the _witness","_witness":"- Address of the witness"},"returns":{"_0":"bytes - input data to send the transaction"}},"encodeTokenOrder(address,address,address,address,bytes,bytes32,uint256)":{"details":"Returns the input data that the user needs to use to create the order The _secret is used to prevent a front-running at the order execution The _amount is used as the param `_value` for the ERC20 `transfer` function","params":{"_amount":"- uint256 of the order amount","_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_secret":"- Private key of the _witness","_witness":"- Address of the witness"},"returns":{"_0":"bytes - input data to send the transaction"}},"executeOrder(address,address,address,bytes,bytes,bytes)":{"details":"The sender should use the _secret to sign its own address to prevent front-runnings","params":{"_auxData":"- Bytes of the auxiliar data used for the handlers to execute the order","_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_signature":"- Signature to calculate the witness"}},"existOrder(address,address,address,address,bytes)":{"details":"Check the balance of the order","params":{"_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_witness":"- Address of the witness"},"returns":{"_0":"bool - whether the order exists or not"}},"keyOf(address,address,address,address,bytes)":{"params":{"_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_witness":"- Address of the witness"},"returns":{"_0":"bytes32 - order's key"}},"vaultOfOrder(address,address,address,address,bytes)":{"params":{"_data":"- Bytes of the order's data","_inputToken":"- Address of the input token","_module":"- Address of the module to use for the order execution","_owner":"- Address of the order's owner","_witness":"- Address of the witness"},"returns":{"_0":"address - The address of the vault"}}},"version":1},"userdoc":{"kind":"user","methods":{"canExecuteOrder(address,address,address,address,bytes,bytes)":{"notice":"Check whether an order can be executed or not"},"cancelOrder(address,address,address,address,bytes)":{"notice":"Cancel order"},"decodeOrder(bytes)":{"notice":"Get order's properties"},"depositEth(bytes)":{"notice":"Create an ETH to token order"},"encodeEthOrder(address,address,address,address,bytes,bytes32)":{"notice":"Get the calldata needed to create a ETH to token order"},"encodeTokenOrder(address,address,address,address,bytes,bytes32,uint256)":{"notice":"Get the calldata needed to create a token to token/ETH order"},"executeOrder(address,address,address,bytes,bytes,bytes)":{"notice":"Executes an order"},"existOrder(address,address,address,address,bytes)":{"notice":"Check whether an order exists or not"},"keyOf(address,address,address,address,bytes)":{"notice":"Get the order's key"},"vaultOfOrder(address,address,address,address,bytes)":{"notice":"Get the vault's address of a token to token/ETH order"}},"notice":"Original work by Pine.Finance - https://github.com/pine-finance Authors: - Ignacio Mazzara <nachomazzara> - Agustin Aguilar <agusx1211>  Modified by UniDex.Finance - https://unidex.finance/","version":1}},"settings":{"compilationTarget":{"browser/UniDexCore.sol":"UniDexCore"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/UniDexCore.sol":{"keccak256":"0xdb20ca026675a4fab8a9fe96f3e21398b9e4a23101161f74a8e3281446aef5e6","license":"GPL-3.0","urls":["bzz-raw://eb6dc8979abab320b3b18bf665df00a1b04b0f40c1dbd373281a5bf548698192","dweb:/ipfs/QmTgdZ5DjFPB3K7yABtVxGbUjHzrgnS86Ntj5C2LmkMkha"]}},"version":1},"version":1,"checkPoints":[]}