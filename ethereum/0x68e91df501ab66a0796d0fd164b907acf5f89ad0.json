{"address":"0x68e91DF501ab66A0796d0fd164B907Acf5f89AD0","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_WaToken","type":"address"},{"internalType":"address","name":"_Token","type":"address"},{"internalType":"address","name":"_governance","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"governance","type":"address"}],"name":"GovernanceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"pendingGovernance","type":"address"}],"name":"PendingGovernanceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newTransmutationPeriod","type":"uint256"}],"name":"TransmuterPeriodUpdated","type":"event"},{"inputs":[],"name":"TRANSMUTATION_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"Token","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WaToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ZERO_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptGovernance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"buffer","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bufferInfo","outputs":[{"internalType":"uint256","name":"_toDistribute","type":"uint256"},{"internalType":"uint256","name":"_deltaBlocks","type":"uint256"},{"internalType":"uint256","name":"_buffer","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"depositedWaTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"origin","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"distribute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"dividendsOwing","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"exit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"toTransmute","type":"address"}],"name":"forceTransmute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"}],"name":"getMultipleUserInfo","outputs":[{"internalType":"address[]","name":"theUserList","type":"address[]"},{"internalType":"uint256[]","name":"theUserData","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"governance","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastDepositBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lastDividendPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nextUser","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingGovernance","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pointMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"realisedTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_pendingGovernance","type":"address"}],"name":"setPendingGovernance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newTransmutationPeriod","type":"uint256"}],"name":"setTransmutationPeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_toWhitelist","type":"address"},{"internalType":"bool","name":"_state","type":"bool"}],"name":"setWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokensInBucket","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDividendPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupplyWaTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"transmute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transmuteAndClaim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transmuteClaimAndWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unclaimedDividends","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"unstake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"userInfo","outputs":[{"internalType":"uint256","name":"depositedAl","type":"uint256"},{"internalType":"uint256","name":"pendingdivs","type":"uint256"},{"internalType":"uint256","name":"inbucket","type":"uint256"},{"internalType":"uint256","name":"realised","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userIsKnown","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"userList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whiteList","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20Burnable} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20Burnable-approve}.","kind":"dev","methods":{"acceptGovernance()":{"details":"Accepts the role as governance. This function reverts if the caller is not the new pending governance."},"bufferInfo()":{"details":"Gets info on the buffer This function is used to query the contract to get the latest state of the buffer","returns":{"_buffer":"the amount in the buffer","_deltaBlocks":"the amount of time since the last phased distribution","_toDistribute":"the amount ready to be distributed"}},"claim()":{"details":"claims the base token after it has been transmuted This function reverts if there is no realisedToken balance"},"distribute(address,uint256)":{"details":"Distributes the base token proportionally to all waToken stakers. This function is meant to be called by the Alchemist contract for when it is sending yield to the transmuter. Anyone can call this and add funds, idk why they would do that though...","params":{"amount":"the amount of base tokens to be distributed to the transmuter.","origin":"the account that is sending the tokens to be distributed."}},"dividendsOwing(address)":{"returns":{"_0":"displays the user's share of the pooled waTokens."}},"exit()":{"details":"Transmutes and unstakes all waTokens This function combines the transmute and unstake functions for ease of use"},"forceTransmute(address)":{"details":"Executes transmute() on another account that has had more base tokens allocated to it than waTokens staked. The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action This function reverts if the address to transmute is not over-filled.","params":{"toTransmute":"address of the account you will force transmute."}},"getMultipleUserInfo(uint256,uint256)":{"details":"Gets the status of multiple users in one call This function is used to query the contract to check for accounts that have overfilled positions in order to check who can be force transmuted.","params":{"from":"the first index of the userList","to":"the last index of the userList returns the userList with their staking status in paginated form."}},"setPendingGovernance(address)":{"details":"Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.","params":{"_pendingGovernance":"the new pending governance."}},"setTransmutationPeriod(uint256)":{"details":"set the TRANSMUTATION_PERIOD variable sets the length (in blocks) of one full distribution phase"},"setWhitelist(address,bool)":{"params":{"_state":"the whitelist state.","_toWhitelist":"the account to mint tokens to."}},"stake(uint256)":{"details":"Deposits waTokens into the transmuter","params":{"amount":"the amount of waTokens to stake"}},"transmute()":{"details":"Converts the staked waTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket once the waToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim() reverts if there are no pendingdivs or tokensInBucket"},"transmuteAndClaim()":{"details":"Transmutes and claims all converted base tokens. This function combines the transmute and claim functions while leaving your remaining WaTokens staked."},"transmuteClaimAndWithdraw()":{"details":"Transmutes, claims base tokens, and withdraws waTokens. This function helps users to exit the transmuter contract completely after converting their WaTokens to the base pair."},"unstake(uint256)":{"details":"Withdraws staked waTokens from the transmuter This function reverts if you try to draw more tokens than you deposited","params":{"amount":"the amount of waTokens to unstake"}},"userInfo(address)":{"details":"Gets the status of a user's staking position. The total amount allocated to a user is the sum of pendingdivs and inbucket.","params":{"user":"the address of the user you wish to query. returns user status"}}},"stateVariables":{"governance":{"details":"The address of the account which currently has administrative capabilities over this contract."},"pendingGovernance":{"details":"The address of the pending governance."},"pointMultiplier":{"details":"values needed to calculate the distribution of base asset in proportion for waTokens staked"},"whiteList":{"details":"alchemist addresses whitelisted"}},"version":1},"userdoc":{"kind":"user","methods":{"setWhitelist(address,bool)":{"notice":"This function reverts if the caller is not governance"}},"version":1}},"settings":{"compilationTarget":{"transmuterd8.sol":"TransmuterD8"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"transmuterd8.sol":{"keccak256":"0xdf747b618cda5c181acfbc64c486961bb3412d6933645619f7070de232c25ce9","license":"MIT","urls":["bzz-raw://3e131c2af1a04aa5deacc87edf16f8e19f9491b0214b32d224ce58fbee26f079","dweb:/ipfs/QmZM4JVW14M7MsxjnEC9cpyXimqMzxjRWY1s1BxiMxZpzg"]}},"version":1},"version":1,"checkPoints":[]}