{"address":"0x10b521C95034F1DF23F6f8ba2655aE749666EaF5","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"epoch_","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalSupply_","type":"uint256"}],"name":"LogRebase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner_","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"who","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"debasePolicy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"debaseDaiPool","type":"address"},{"internalType":"uint256","name":"debaseDaiTotalRatio_","type":"uint256"},{"internalType":"address","name":"debaseDaiLpPool","type":"address"},{"internalType":"uint256","name":"debaseDaiLpTotalRatio_","type":"uint256"},{"internalType":"address","name":"airDropper","type":"address"},{"internalType":"uint256","name":"airDropperTotalRatio_","type":"uint256"},{"internalType":"address","name":"debasePolicy_","type":"address"},{"internalType":"uint256","name":"debasePolicyTotalRatio_","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"epoch","type":"uint256"},{"internalType":"int256","name":"supplyDelta","type":"int256"}],"name":"rebase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This is part of an implementation of the uFragments Ideal Money protocol.     uFragments is a normal ERC20 token, but its supply can be adjusted by splitting and     combining tokens proportionally across all wallets. *      uFragment balances are internally represented with a hidden denomination, 'gons'.     We support splitting the currency in expansion and combining the currency on contraction by     changing the exchange rate between the hidden 'gons' and the public 'fragments'.","methods":{"allowance(address,address)":{"details":"Function to check the amount of tokens that an owner has allowed to a spender.","params":{"owner_":"The address which owns the funds.","spender":"The address which will spend the funds."},"returns":{"_0":"The number of tokens still available for the spender."}},"approve(address,uint256)":{"details":"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. This method is included for ERC20 compatibility. increaseAllowance and decreaseAllowance should be used instead. Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance - if they are both greater than zero - if a transfer transaction is mined before the later approve() call is mined.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."}},"balanceOf(address)":{"params":{"who":"The address to query."},"returns":{"_0":"The balance of the specified address."}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Decrease the amount of tokens that an owner has allowed to a spender.","params":{"spender":"The address which will spend the funds.","subtractedValue":"The amount of tokens to decrease the allowance by."}},"increaseAllowance(address,uint256)":{"details":"Increase the amount of tokens that an owner has allowed to a spender. This method should be used instead of approve() to avoid the double approval vulnerability described above.","params":{"addedValue":"The amount of tokens to increase the allowance by.","spender":"The address which will spend the funds."}},"initialize(address,uint256,address,uint256,address,uint256,address,uint256)":{"params":{"airDropper":"Address of the air dropper","airDropperTotalRatio_":"Ratio of total supply given to air dropper","debaseDaiLpPool":"Address of the Debase Dai Lp pool contract","debaseDaiLpTotalRatio_":"Ratio of total supply given to Debase Dai Lp Pool","debaseDaiPool":"Address of the Debase Dai pool contract","debaseDaiTotalRatio_":"Ratio of total supply given to Debase Dai Pool","debasePolicyTotalRatio_":"Ratio of total supply given to debase policy","debasePolicy_":"Address of the debase policy"}},"name()":{"details":"Returns the name of the token."},"rebase(uint256,int256)":{"details":"Notifies Fragments contract about a new rebase cycle.","params":{"supplyDelta":"The number of new fragment tokens to add into circulation via expansion."},"returns":{"_0":"The total number of fragments after the supply adjustment."}},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"transfer(address,uint256)":{"details":"Transfer tokens to a specified address.","params":{"to":"The address to transfer to.","value":"The amount to be transferred."},"returns":{"_0":"True on success, false otherwise."}},"transferFrom(address,address,uint256)":{"details":"Transfer tokens from one address to another.","params":{"from":"The address you want to send tokens from.","to":"The address you want to transfer to.","value":"The amount of tokens to be transferred."}}},"title":"uFragments ERC20 token"},"userdoc":{"methods":{"initialize(address,uint256,address,uint256,address,uint256,address,uint256)":{"notice":"Initializes with the policy,Dai,DaiLp pool as parameters.  The function then sets the total supply to the initial supply and calculates the gon per fragment.  It also sets the value and the gons for both the Dai and DaiLp reward pools."}}}},"settings":{"compilationTarget":{"browser/Debase.sol":"Debase"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/Debase.sol":{"keccak256":"0x42c121fea68b77331a8143a949a150eb5369bf3c92be798f3eb91fb79451757e","urls":["bzz-raw://e810feb5435b1ee2160c079c2255e8f74b4db6f8fdca846a676d70c922115991","dweb:/ipfs/QmT8sDshUaB4UFn6U7XsAk8Htdsyr5Gu9VA9xNFjL5RNCb"]}},"version":1},"version":1,"checkPoints":[]}