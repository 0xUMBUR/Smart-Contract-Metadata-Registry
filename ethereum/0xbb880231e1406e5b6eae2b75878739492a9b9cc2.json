{"address":"0xbB880231E1406e5b6eAE2B75878739492a9b9CC2","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getKey","outputs":[{"internalType":"bytes","name":"pubKey","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"slice0","type":"bytes32"},{"internalType":"bytes32","name":"slice1","type":"bytes32"}],"name":"mapKey","outputs":[{"internalType":"address","name":"_address","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_pubKey","type":"bytes"}],"name":"mapKey","outputs":[{"internalType":"address","name":"_address","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"https://github.com/d1ll0n This contracts maps addresses to public keys. Public keys for Secp256k1 are always 64 bytes. To save gas, this contract stores them as an array of two bytes32 words.","methods":{"getKey(address)":{"details":"getKey Retrieves the public key for the given address.","params":{"_address":"- address to query"},"returns":{"pubKey":"- ABI encoded public key retrieved from storage"}},"mapKey(bytes)":{"details":"mapKey Calculates the address for a public key, then saves the mapping from address to public key.","params":{"_pubKey":"- ABI encoded 64 byte public key"},"returns":{"_address":"- calculated address"}},"mapKey(bytes32,bytes32)":{"details":"mapKey Calculates the address for a public key, then saves the mapping from address to public key.","params":{"slice0":"- first 32 bytes of the public key","slice1":"- second 32 bytes of the public key"},"returns":{"_address":"- calculated address"}}},"title":"KeyMap"},"userdoc":{"methods":{"getKey(address)":{"notice":"Throws an error if the key is not registered."},"mapKey(bytes)":{"notice":"This overload is somewhat simpler to use, but has a higher calldata cost."},"mapKey(bytes32,bytes32)":{"notice":"This overload reduces the calldata cost of submission."}}}},"settings":{"compilationTarget":{"browser/KeyMap.sol":"KeyMap"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/KeyMap.sol":{"keccak256":"0x58b11e26d5a0a8368007543f65b5e096a1d6cd847a81a55bfc8c7e5ac84fdf15","urls":["bzz-raw://9c4b61c4b14df4b789c680ba39d322a2d9aae73091099b6b4ee68551076116e1","dweb:/ipfs/QmXbZF5ggZtv42LJYPsbgWCvB7dMdXVDiyFQVqtxZZ9GeC"]}},"version":1},"version":1,"checkPoints":[]}