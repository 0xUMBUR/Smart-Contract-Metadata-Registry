{"address":"0x1c62fF66aF8aaD410065E02338F5bFbbe23e1f10","name":"","metadata":{"compiler":{"version":"0.6.4+commit.1dca32f3"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_token_address","type":"address"},{"internalType":"uint256","name":"_whole_balance_limit","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"}],"name":"BalanceReduced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"withdrawer","type":"address"},{"indexed":false,"internalType":"uint256","name":"plannedBalance","type":"uint256"}],"name":"WithdrawPlanned","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"contract_address","type":"address"}],"name":"contractExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"beneficiary","type":"address"},{"internalType":"uint256","name":"new_total_deposit","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"effectiveBalance","outputs":[{"internalType":"uint256","name":"remaining_balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_msc_address","type":"address"},{"internalType":"address","name":"_one_to_n_address","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"msc_address","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"one_to_n_address","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"planWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract Token","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"total_deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"whole_balance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"whole_balance_limit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw_delay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"withdraw_plans","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"withdraw_block","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"constructor":{"params":{"_token_address":"The address of the token to use for rewards"}},"contractExists(address)":{"params":{"contract_address":"The address to check whether a contract is deployed or not"},"returns":{"_0":"True if a contract exists, false otherwise"}},"deposit(address,uint256)":{"params":{"beneficiary":"The account benefiting from the deposit","new_total_deposit":"The total sum of tokens that have been deposited by the user by calling this function."}},"effectiveBalance(address)":{"params":{"owner":"Address for which the balance should be returned"},"returns":{"remaining_balance":"The remaining balance after planned withdrawals"}},"init(address,address)":{"params":{"_msc_address":"Address of the MonitoringService contract","_one_to_n_address":"Address of the OneToN contract"}},"planWithdraw(uint256)":{"params":{"amount":"Maximum amount of tokens to be withdrawn"}},"transfer(address,address,uint256)":{"params":{"amount":"Amount of tokens to be transferred","receiver":"Account to which the amount will be credited","sender":"Account from which the amount will be deducted"},"returns":{"success":"true if transfer has been done successfully, otherwise false"}},"withdraw(uint256)":{"params":{"amount":"Amount of tokens to be withdrawn"}}}},"userdoc":{"methods":{"constructor":"Set the default values for the smart contract","contractExists(address)":{"notice":"Check if a contract exists"},"deposit(address,uint256)":{"notice":"Deposit tokens. The amount of transferred tokens will be `new_total_deposit - total_deposit[beneficiary]`. This makes the function behavior predictable and idempotent. Can be called several times and on behalf of other accounts."},"effectiveBalance(address)":{"notice":"The owner's balance with planned withdrawals deducted"},"init(address,address)":{"notice":"Specify trusted contracts. This has to be done outside of the constructor to avoid cyclic dependencies."},"planWithdraw(uint256)":{"notice":"Announce intention to withdraw tokens. Sets the planned withdraw amount and resets the withdraw_block. There is only one planned withdrawal at a time, the old one gets overwritten."},"transfer(address,address,uint256)":{"notice":"Internally transfer deposits between two addresses. Sender and receiver must be different or the transaction will fail."},"withdraw(uint256)":{"notice":"Execute a planned withdrawal Will only work after the withdraw_delay has expired. An amount lower or equal to the planned amount may be withdrawn. Removes the withdraw plan even if not the full amount has been withdrawn."}}}},"settings":{"compilationTarget":{"data/source/services/UserDeposit.sol":"UserDeposit"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[":.=.",":lib=data/source/lib",":raiden=data/source/raiden",":services=data/source/services",":test=data/source/test"]},"sources":{"data/source/raiden/Token.sol":{"keccak256":"0x0303b56024448cc6630edba30ee46c24506e59eae4c34eb9b2ad5ce0d6875754","urls":["bzz-raw://5df44e03dbd72c88dffc87647ddbfac256ba2292137ef07c437af2afc39ae58d","dweb:/ipfs/QmXiKVowMFKVPcyM8SojseFibuBoafnogLKszCaa5vvBpV"]},"data/source/raiden/Utils.sol":{"keccak256":"0x77283c23fd1ab314b8a772a040c0dd0f90c87c373a7b160a5f1accc016ebb6ad","urls":["bzz-raw://ffc004e12d718d5ab923e9633e6108c5fd82211cbd4198d31c26e2bca0094d77","dweb:/ipfs/QmViRSTtD8zhQhfpmFnvigirSXc3J3RZb3whpVDBD3RBQ5"]},"data/source/services/UserDeposit.sol":{"keccak256":"0x8f355ef6f67b2cfaafc3cf05adcc878fe00a7666975baeda22187584df7c217c","urls":["bzz-raw://d04a514cadd5943dd2c92d1431ad26aa5bc7fdbce03ac8a447f377f44aac0f2a","dweb:/ipfs/QmZ7AZvZpPE5Prozn3WTN3LJ2f3pWhoJd5kyMeQxN6jjST"]}},"version":1},"version":1,"checkPoints":[]}