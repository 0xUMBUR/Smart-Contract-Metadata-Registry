{"address":"0x395CeE958F302349Ce4a91EFa0A531Be938Fdb06","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_mdt","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"}],"name":"CancelOracleRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"specId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"requester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"},{"indexed":false,"internalType":"address","name":"callbackAddr","type":"address"},{"indexed":false,"internalType":"bytes4","name":"callbackFunctionId","type":"bytes4"},{"indexed":false,"internalType":"uint256","name":"cancelExpiration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dataVersion","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"OracleRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"EXPIRY_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_requestId","type":"bytes32"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"bytes4","name":"_callbackFunc","type":"bytes4"},{"internalType":"uint256","name":"_expiration","type":"uint256"}],"name":"cancelOracleRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_requestId","type":"bytes32"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"address","name":"_callbackAddress","type":"address"},{"internalType":"bytes4","name":"_callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"_expiration","type":"uint256"},{"internalType":"bytes32","name":"_data","type":"bytes32"}],"name":"fulfillOracleRequest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_node","type":"address"}],"name":"getAuthorizationStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMefiOraclePayment","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMefiToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_payment","type":"uint256"},{"internalType":"bytes32","name":"_specId","type":"bytes32"},{"internalType":"address","name":"_callbackAddress","type":"address"},{"internalType":"bytes4","name":"_callbackFunctionId","type":"bytes4"},{"internalType":"uint256","name":"_nonce","type":"uint256"},{"internalType":"uint256","name":"_dataVersion","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"oracleRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_node","type":"address"},{"internalType":"bool","name":"_allowed","type":"bool"}],"name":"setFulfillmentPermission","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_payment","type":"uint256"}],"name":"setMefiOraclePayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"cancelOracleRequest(bytes32,uint256,bytes4,uint256)":{"details":"Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.","params":{"_callbackFunc":"The requester's specified callback address","_expiration":"The time of the expiration for the request","_payment":"The amount of payment given (specified in wei)","_requestId":"The request ID"}},"constructor":{"details":"Sets the MDTToken address for the imported MDTTokenInterface","params":{"_mdt":"The address of the MDT"}},"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)":{"details":"Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.","params":{"_callbackAddress":"The callback address to call for fulfillment","_callbackFunctionId":"The callback function ID to use for fulfillment","_data":"The data to return to the consuming contract","_expiration":"The expiration that the node should respond by before the requester can cancel","_payment":"The payment amount that will be released for the oracle (specified in wei)","_requestId":"The fulfillment request ID that must match the requester's"},"returns":{"_0":"Status if the external call was successful"}},"getAuthorizationStatus(address)":{"params":{"_node":"The address of the Chainlink node"},"returns":{"_0":"The authorization status of the node"}},"getMefiToken()":{"details":"This is the public implementation for mefiTokenAddress, which is an internal method of the MefiClient contract"},"isOwner()":{"details":"Returns true if the caller is the current owner."},"onTokenTransfer(address,uint256,bytes)":{"details":"The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.","params":{"_amount":"Amount of MDT sent (specified in wei)","_data":"Payload of the transaction","_sender":"Address of the sender"}},"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)":{"details":"Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Mefi node to detect.","params":{"_callbackAddress":"The callback address for the response","_callbackFunctionId":"The callback function ID for the response","_data":"The CBOR payload of the request","_dataVersion":"The specified data version","_nonce":"The nonce sent by the requester","_payment":"The amount of payment given (specified in wei)","_sender":"The sender of the request","_specId":"The Job Specification ID"}},"owner()":{"details":"Returns the address of the current owner."},"setFulfillmentPermission(address,bool)":{"params":{"_allowed":"Bool value to determine if the node can fulfill requests","_node":"The address of the Chainlink node"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"withdraw(address,uint256)":{"details":"The owner of the contract can be another wallet and does not have to be a Mefi node","params":{"_amount":"The amount to send (specified in wei)","_recipient":"The address to send the MDT to"}},"withdrawable()":{"details":"We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage","returns":{"_0":"The amount of withdrawable MDT on the contract"}}},"title":"The Mefi Oracle contract"},"userdoc":{"methods":{"cancelOracleRequest(bytes32,uint256,bytes4,uint256)":{"notice":"Allows requesters to cancel requests sent to this oracle contract. Will transfer the MDT sent for the request back to the requester's address."},"constructor":"Deploy with the address of the MDT","fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)":{"notice":"Called by the Chainlink node to fulfill requests"},"getAuthorizationStatus(address)":{"notice":"Use this to check if a node is authorized for fulfilling requests"},"getMefiToken()":{"notice":"Returns the address of the MDT"},"onTokenTransfer(address,uint256,bytes)":{"notice":"Called when MDT is sent to the contract via `transferAndCall`"},"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)":{"notice":"Creates the Mefi request"},"setFulfillmentPermission(address,bool)":{"notice":"Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."},"withdraw(address,uint256)":{"notice":"Allows the node operator to withdraw earned MDT to a given address"},"withdrawable()":{"notice":"Displays the amount of MDT that is available for the node operator to withdraw"}},"notice":"Node operators can deploy this contract to fulfill requests sent to them"}},"settings":{"compilationTarget":{"mefi/MergedOracle.sol":"Oracle"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/Chainlink.sol":{"keccak256":"0x7bef34fd97f611103c6113025e3d6af755f326069767e72266698f64258e62b6","urls":["bzz-raw://82125916319b872093aa8599d2c00bd07d363386a74a4d0268c6edf25c366f82","dweb:/ipfs/QmXTnVy1XEw387NduvHHFQNmnzYTwFUhVz95kRvRrcwdHd"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/ChainlinkClient.sol":{"keccak256":"0x9f8883b8b5b76bba151e5f30d4c353b8a3f15ee3d97117deee4cccd91fe8640f","urls":["bzz-raw://ee9b132779ac24df4f8a5e45dfc256acc70eb5e43f715de36593e488f20a44ff","dweb:/ipfs/QmagJ1htVpP2ZYLAdHEpSEMx1Xd3csbUHAhLctryVDsNFg"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol":{"keccak256":"0xe513c0f60edf13da7d82625489cf2008c7b66170f3b1ed1606b84c73f95b17ad","urls":["bzz-raw://78e083ef252b80bb63a5aa126bc7283cd9b88767dfdf0190d46802bc32756ecf","dweb:/ipfs/QmdTyEQwX5ecoXR1rBh8DLDJpCYVDM85JjjR2sEJdE9wAA"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/interfaces/ENSInterface.sol":{"keccak256":"0xdef864af6e516477773ea246b73531b1836de5bea4ac1cfd8be6e7f4b3f3c3fd","urls":["bzz-raw://ad3346f5a393cd62d8de678a77d8dc323d8f9e21f0aaa504d0d0b990c8b61477","dweb:/ipfs/QmQ2n8329Fzb7Zbzk5wqYvAfKJ9QPwTdCUmm9zUqhL67a1"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/interfaces/LinkTokenInterface.sol":{"keccak256":"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68","urls":["bzz-raw://bd2c3165d949fc66fe407b96eb3dc2092c7e800f4c073b411bf7b96de3e156c9","dweb:/ipfs/QmcfJhR1Np4GsLWnww2Duqks2wEzYk8VDTvCAYy7MisG1r"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/interfaces/PointerInterface.sol":{"keccak256":"0x08aed19c3bef1ae2d90fc0d9d28a497fd7f312991ed08fedfe545de6b9a476e4","urls":["bzz-raw://b2e7b4acfbd4cfbd4c3e266011955954ec0f5a2323647e81b936c66cb35e1b5e","dweb:/ipfs/QmXVrpdo76r2WhxE7gJPj3dGycZYKKvK39VNVaB7HyhAbT"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/vendor/BufferChainlink.sol":{"keccak256":"0x14f13139229a2fef8f705f29f91de0bc81bcd5070ec75b4bd3fd82c1536ca685","urls":["bzz-raw://9a403d7f17b316c7b8837a25df0563de2a1c3121b7cd43473abce8ce6742bd29","dweb:/ipfs/QmWZYi4xJGjPt1pEM7mS7XsA1eF2zpcxiiuGHuiTndXHo7"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/vendor/CBORChainlink.sol":{"keccak256":"0xd4e84a8ade1a2dba213842fea48ca1c7ea5d0eb4105b06c603966b955834e105","urls":["bzz-raw://1d5dde29effbd8bc604215034a01c0f00957b666a016b9e5e478e01c789f1b1b","dweb:/ipfs/QmTepdEiHcoxDKmodo5zqaZNc68r1zrdEhb3PAaGG4dhv8"]},"https://raw.githubusercontent.com/smartcontractkit/chainlink/develop/evm-contracts/src/v0.6/vendor/ENSResolver.sol":{"keccak256":"0xfd992937d215ad669f69e91fefbe62cad8973ae329b4e810ca9b26a1ae0b6bb7","urls":["bzz-raw://afb189e69fb705795bf41dea9ff20bab191164fc4876803168372f9bf1a1a0f1","dweb:/ipfs/QmUBbNkFiJh9BrPepNVYMpxnEk1a5xqun8VT6Zb2jC3FtV"]},"mefi/MDTTokenReceiver.sol":{"keccak256":"0xa16f382d4ce77f7cba6a4ebc25f8fbb0707f88c75be25746a95fa7f0d50dac1b","urls":["bzz-raw://a50ca3a958ed83f34ce1a61fda79fb9ed1dd33b95b7a802ccfa8e957264e51cd","dweb:/ipfs/Qmf1j9no3QvN9W2GGyJ1zFgmoykWbo6HHtigsFLsQKm6Xq"]},"mefi/MergedOracle.sol":{"keccak256":"0x9563163409e8a1686f721d18c063ed01d56d7359353b9f45ab62981a38519068","urls":["bzz-raw://0b69c44d13ff174bfed9b68a6e75644b8786db4d3a342a898bef314c4fc0b845","dweb:/ipfs/QmU3yA5HXXXTVRwDBme5B9vWGCLFzjVrHeqTasy8gx6Dw4"]},"mefi/interfaces/MDTTokenInterface.sol":{"keccak256":"0x7553a0f6368cb6817466e73ab327973d53839d7d19e33ea4d1c197d80887c740","urls":["bzz-raw://e72c8d4f2552a5135824d6b5032463b56f0f4a30023a7e1a55e3463c3e6c05f7","dweb:/ipfs/Qmeu4mX1Zq3LvtdSTAjNbBiGUufJJNPEvYJqPAyGgu5TVm"]},"mefi/interfaces/MefiOracleInterface.sol":{"keccak256":"0xd1d09ebdccc47c75ee19f4ea3055942721ca3bbedf4d369595eb317ce64dfbec","urls":["bzz-raw://69404b4bfda18d5e2a06e3d3be2f403f6f751ac9583be4eb3069dd39052c1deb","dweb:/ipfs/QmWYYPkRH8PS1LsmGSgwgwy5EBPDo2DetgC4KFxRCvfqNZ"]},"mefi/interfaces/MefiRequestInterface.sol":{"keccak256":"0x2f5fe6dbf503b1cb78f7f912c08749cff77c7c5f34497e0b5b9cf92a8cb82e9b","urls":["bzz-raw://c46994ef328a69545e47426adc845a65e9527eb214b0ad982b16d24c7be63b78","dweb:/ipfs/QmRTsnQNwCL4FFdo41tXmB6TbiWF1CQjAM3jZEXX7naDpU"]},"mefi/interfaces/OracleInterface.sol":{"keccak256":"0xdede0c3679ac4e9ba46004a32d1c2b0a0f41a6eb6876e5409bc4b787fc210965","urls":["bzz-raw://cb475b4c916d6227851078c7030459dd4bd008c48c3396c4eb4f8ce8cbd01d3e","dweb:/ipfs/QmWGNg1hPFcA69UQrwLW3yzXWDLbpBPdnrdSRX7WJuSPvs"]},"mefi/interfaces/WithdrawalInterface.sol":{"keccak256":"0x48d52d175bc4e93cac5d5e82cb332b335ff2b3b15e5cdebc722c854831d8fba1","urls":["bzz-raw://d5909a889b15e894e7d580a56f50a42a00a6b88d0a179b3e6cc44af7cff310c9","dweb:/ipfs/QmRxL1x9dgxaYockUpXfD3zykutxiPM38vAVXsE8dBv6FB"]},"mefi/vendor/Ownable.sol":{"keccak256":"0x20a325da437d524570c833519481749e6e33018fe899dfdad66e59e1f60f6192","urls":["bzz-raw://921b292b3621c1728852040f7ce8853a827a0498517ea12c9f576959419f019a","dweb:/ipfs/QmXpqPMDshxmwfYMjcZiDNVJWecLz7ASnAQwHnmMgvxhXb"]},"mefi/vendor/SafeMathMefi.sol":{"keccak256":"0x17faaf171ee8b7fd76dc89487296b16f6d40e6eec06eb881b2abb21e3bbb0673","urls":["bzz-raw://79efdcc5edb58c81da3e2d8d0cd97b1800a791a56ff75df11463c9e892cdf63f","dweb:/ipfs/QmZhTUUAZReVmDXF6r3Rs86ki5fAXJCxQAAFZDG2Vbe3zZ"]}},"version":1},"version":1,"checkPoints":[]}