{"address":"0xe16cbD522286c65eC0893AB9Bf1262b72634b3B5","name":"","metadata":{"compiler":{"version":"0.7.0+commit.9e61f92b"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"target","type":"address"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DUMPER","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"receiver","type":"address"}],"name":"computeAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"receiver","type":"address"}],"name":"getByteCode","outputs":[{"internalType":"bytes","name":"bytecode","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"part1","type":"string"},{"internalType":"string","name":"part2","type":"string"},{"internalType":"string","name":"part3","type":"string"}],"name":"setCode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"salt","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"receiver","type":"address"}],"name":"withdraw","outputs":[{"internalType":"address","name":"wallet","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"davy42","details":"The DepositWalletFactory use the bytecode of the DepositWallet contract with dynamic token and receiver addresses","kind":"dev","methods":{"computeAddress(uint256,address,address)":{"details":"Compute address for depositing funds using salt, token and receivers","params":{"receiver":"The address which will get tokens when withdraw","salt":"The unique salt","token":"The address of the erc20 token which will be deposited"},"returns":{"_0":"wallet the address of the wallet"}},"getByteCode(address,address)":{"details":"Explain to a developer any extra details","params":{"receiver":"The address which will get tokens when withdraw","token":"The address of the erc20 token which will be deposited"},"returns":{"bytecode":"the bytecode of the wallet contract"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"withdraw(uint256,address,address)":{"params":{"receiver":"The address which will get tokens","salt":"The unique salt","token":"The address of the erc20 token which will be withdrawed"},"returns":{"wallet":"the address of the wallet"}}},"title":"The DepositWalletFactory allows withdrawing ERC20 tokens from a temporary DepositWallet","version":1},"userdoc":{"kind":"user","methods":{"computeAddress(uint256,address,address)":{"notice":"Returns the address of the wallet"},"getByteCode(address,address)":{"notice":"Generate the bytecode of wallet contract with token and receiver"},"withdraw(uint256,address,address)":{"notice":"Witdraws erc20 tokens from the deposit wallet and send to the receiver"}},"notice":"The DepositWalletFactory can compute the address for deposit and withdraw funds","version":1}},"settings":{"compilationTarget":{"contracts/DepositWalletFactory.sol":"DepositWalletFactory"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/AccessControl.sol":{"keccak256":"0x70d0d326867661dc3b77b268f19ba94b0536f5cad360ccd52fbf32cdbce42c74","license":"MIT","urls":["bzz-raw://5d3abd97b086e7790a676353a7936503a1926a68f798bd6687d2c872c0fd8c57","dweb:/ipfs/QmRUUvc89cFZbF1Ds5ydZM3tJLUXDC1W1KMmu7XK5mUHey"]},"contracts/Address.sol":{"keccak256":"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8","license":"MIT","urls":["bzz-raw://7c119bcaecfa853d564ac88d312777f75fa1126a3bca88a3371adb0ad9f35cb0","dweb:/ipfs/QmY9UPuXeSKq86Zh38fE43VGQPhKMN34mkuFSFqPcr6nvZ"]},"contracts/Context.sol":{"keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT","urls":["bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f","dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"]},"contracts/Create2.sol":{"keccak256":"0x3545c88fb28fb3934362d06c8dd5ccdfa951378c3be319a20c53f285520cace3","license":"MIT","urls":["bzz-raw://e8779accea1cd1a20d76884ba49de5fe521e441b56255d239a5f8022349008f9","dweb:/ipfs/QmPVbysSjqfwBLgKoMcmEULxsJCK9SxrFpQm5TaKRm13P8"]},"contracts/DepositWalletFactory.sol":{"keccak256":"0xd264b948a0614a56a1cbb12d35582147b7485265681264de9721d2d36ca33797","license":"MIT","urls":["bzz-raw://496a5d88cbfdb58b81eeff22b8878f8f73cdddd3fd052b67e7537af473affa5e","dweb:/ipfs/QmbLXheVzAsrhFDgjEiSo6q8v5bNxLoY9R3Mx7swnJfvHG"]},"contracts/EnumerableSet.sol":{"keccak256":"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2","license":"MIT","urls":["bzz-raw://3b61f99a64e999682ad7bfbb3a1c762a20a0a5b30f9f2011693fa857969af61f","dweb:/ipfs/QmZystFY76wkWCf7V3yKh3buZuKVKbswiE7y6yU62kk3zi"]},"contracts/IERC20.sol":{"keccak256":"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5","license":"MIT","urls":["bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08","dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC"]}},"version":1},"version":1,"checkPoints":[]}