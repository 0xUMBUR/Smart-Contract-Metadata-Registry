{"address":"0x0BeD1d32064a8837732e26197179c4A8ACA0eA66","name":"","metadata":{"compiler":{"version":"0.8.1+commit.df193b15"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner_","type":"address"},{"internalType":"uint256","name":"endOfTurn_","type":"uint256"}],"stateMutability":"payable","type":"constructor"},{"inputs":[],"name":"_price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimCrown","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claimPrice","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"king","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"kingPriceBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"remainingBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"claimCrown()":{"details":" This is the main and most important functionality of this game, to claim the crown by claiming the crown, we mean, of course, placing the highest bid,  you can only place twice as much as the latest bid place, this is controlled by the modifier  'costs' that is located in AccessControl, why did I choose to do so ?  For the main reason that, placing a bid twice as much as the latest one, means that you become a KING,  for that a ROLE is GRANTED to you, and another's player role is being REVOKED, to keep track of that is the main function of AccessControl.sol  Then, we assign the value sent to the variable price, the sender becomes the king, and we be track of his balance with the mapping. *"},"claimPrice()":{"details":" The second most important function of that game. When the block.numbers of the current turn ended, the game froze, until the king retrives his sendValue when she retrive her price, the price is reduced by 80% and stored into a new variable, then we take the remaining, and store it to the owner profit variable to send it to him.  finally, we set the balance of the king to zero the price is now ready for the next turn we send the profit to the owner we send the price to the King we reset the adress of the King we add a new turn with the _endOfTurn variable + the current block number + 8."},"remainingBlock()":{"details":"This function serves to see the remaining blocks before the end of the turn, it's like a clock tic-tacking before  no one can claim the crown anymore, and only the king can interract with the smart-contract, therefore reseting it for another turn. "}},"stateVariables":{"_endOfTurn":{"details":"The first one is a variable keep track of the blocknumber, it will store the block.number where our game will end and no more bids can be placed anymore."},"_kingPriceBalance":{"details":"It is better to track the balance of the king, as a way to give to caesar what belongs to caesar, and avoid rentrancy attack. This way, the King of each turn can claim their price, as oppose to a loosing player paying for the gas fees for his transaction.  "},"_price":{"details":" Storage Variables Monetary Values : These three following storage variables are there to keep track of the money that is flowing into  the smart-contract, the _price will track the highest bid. \"_ownerProfit\" will be used to send the profit earned in total, by the deployer and coder of the contract. the \"_tax\" is the immuable in percent, ammount of tax that the owner can apply, we set it as 10%"}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"The constructor takes two parameters, one requirement, one two modifiers, and sets up to three variables. The deployer can set the owner of the smart contract, and the number of block before the end of the first turn. To initialize the game, the deployer have to deploy to smart contract by storing more than 0 eth into it.  The tax will always be 10%  The end of one turn will always be block.number + the number of block the deployer chooses. "}},"version":1}},"settings":{"compilationTarget":{"contracts/KingOfTheHill.sol":"KingOfTheHill"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/AccessControl.sol":{"keccak256":"0xc6ff3fc60f5219649957b618bec1840f250d2f832de35d670b407125dc4090ec","license":"MIT","urls":["bzz-raw://7f6291e153fe4cd51cc291a90b395b2eefabadc1c77240c05a3b3b80e2d32944","dweb:/ipfs/QmT7rxX5hZA9Js7stxwwRfTS1nvLFxU82X6wwSRA9EZrTL"]},"contracts/KingOfTheHill.sol":{"keccak256":"0x1fc313dab5f537f673558969e1fc1f204d5a65a7dd20355359f38f4aca163287","license":"MIT","urls":["bzz-raw://bbdc61f0bac8a9dc9da7671f71ede570297249f41f3a3d54abefed57152c6df1","dweb:/ipfs/QmWZjJffWJ8SpdAxYZ4AqRWzT5NWXn6yTaENb49guT9KAR"]},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol":{"keccak256":"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45","license":"MIT","urls":["bzz-raw://6a4c96fafff76deda5697c3c5c98cade6e6e1b178254544c106bf360c079ce4e","dweb:/ipfs/QmXmxubE3jnatFgZuN8ay1VV6hZ8WRmhvUjNpeVjki15HX"]}},"version":1},"version":1,"checkPoints":[]}