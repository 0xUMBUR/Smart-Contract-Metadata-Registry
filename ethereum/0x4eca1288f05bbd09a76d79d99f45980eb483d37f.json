{"address":"0x4eCA1288F05bbd09A76D79d99F45980eb483D37F","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"address","name":"exchangeAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approveToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"address[]","name":"route","type":"address[]"}],"name":"arbitrage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"}],"name":"depositeWEI","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDeposite","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"weiDeposite","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawEthAmount","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"browser/arbitrageBot.sol":"ArbitrageBot"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/Context.sol":{"keccak256":"0x2072d5d662a7959f1bc192fcd1e1285934b8c22070f984422884e4e0440163e4","urls":["bzz-raw://0d9792cad478539afb3e00911d6ee094be8153fc55422046a44fa5cf40a7efbf","dweb:/ipfs/QmZVxawzWDKPqANWH8EXpT5DrH7rAPxCN6KTav5QDCbWhH"]},"browser/IERC20.sol":{"keccak256":"0x708ae901e214e044a5c922748462157b9be162b3620aa56d7c0e7258f66aee1d","urls":["bzz-raw://c287ed9989e5f16114553a30f4ba3794be657f90598f101f7b92ce5859f46978","dweb:/ipfs/QmeFeDCzfhhBTaY9NE9wREmrBRETvn4k3mo2FejqskVMtg"]},"browser/IUniswapV2Router.sol":{"keccak256":"0x0018f26a5a297ec80495210b2dc48b10576ebc7e065a4c66a4a3c79ed295b1b8","urls":["bzz-raw://d0e2a8865a96d8fc92faeac83c4a8bdee13a47b3ba28f9ef7956ef0a3f43a0fc","dweb:/ipfs/QmY21PcHsDJFTtSNbwQkeus44CheBmBXwv8yYxt5mvvtgW"]},"browser/SafeMath.sol":{"keccak256":"0xe4ed9d633e8e678e8ece3756e4002cc7989b72cd29a17ecdacdabf4fd48820a7","urls":["bzz-raw://03a55c81a7d4c93a1ca6d9b931830c1fde2799bfbbf5841321f67e7b056c36c2","dweb:/ipfs/QmbcgdfB278NvzVZKjA7Jf1NjSeCCQ2277mJGL4UskyS56"]},"browser/arbitrageBot.sol":{"keccak256":"0xd953d181d97ed198d1c23ed706be7525be023e31c2aec4c3389469ad0b6d9896","urls":["bzz-raw://c400b5cea2d633b167365ccb1bdf4b6aca1ddc04fa7dd6ffe691946c77706877","dweb:/ipfs/QmQVwTuMrN8PodugmF9nfA2Wk86CrkzZtaewn1Vbx5cnDG"]}},"version":1},"version":1,"checkPoints":[]}