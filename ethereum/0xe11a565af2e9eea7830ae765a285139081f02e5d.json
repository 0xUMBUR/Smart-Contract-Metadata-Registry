{"address":"0xE11A565aF2E9EEa7830aE765a285139081f02E5D","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"n","type":"uint256"}],"name":"getBlockhash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"n","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"storeEarliest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"n","type":"uint256"},{"internalType":"bytes","name":"header","type":"bytes"}],"name":"storeVerifyHeader","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"getBlockhash(uint256)":{"params":{"n":"the number of the block whose blockhash should be returned"}},"store(uint256)":{"params":{"n":"the number of the block whose blockhash should be stored"}},"storeVerifyHeader(uint256,bytes)":{"params":{"header":"the rlp-encoded blockheader of block n+1. We verify its correctness by checking  that it hashes to a stored blockhash, and then extract parentHash to get the n-th blockhash.","n":"the number of the block whose blockhash should be stored"}}},"title":"BlockhashStore"},"userdoc":{"methods":{"getBlockhash(uint256)":{"notice":"gets a blockhash from the store. If no hash is known, this function reverts."},"store(uint256)":{"notice":"stores blockhash of a given block, assuming it is available through BLOCKHASH"},"storeEarliest()":{"notice":"stores blockhash of the earliest block still available through BLOCKHASH."},"storeVerifyHeader(uint256,bytes)":{"notice":"stores blockhash after verifying blockheader of child/subsequent block"}},"notice":"This contract provides a way to access blockhashes older than  the 256 block limit imposed by the BLOCKHASH opcode.  You may assume that any blockhash stored by the contract is correct.  Note that the contract depends on the format of serialized Ethereum  blocks. If a future hardfork of Ethereum changes that format, the   logic in this contract may become incorrect and an updated version   would have to be deployed."}},"settings":{"compilationTarget":{"browser/BlochhashStore.sol":"BlockhashStore"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/BlochhashStore.sol":{"keccak256":"0x4e3cd72afc75c93c52868ed2bfb07f9614f2c9424c6c82db61493c6818ef8ad2","urls":["bzz-raw://33c941b83b744999420b3250c9508ad44529090e9dbf921dfb35984bc573e6b4","dweb:/ipfs/QmYw8NPdYn4zV5DUKTGqqSKM6tBWudrLVMAEEbFVTmEfqZ"]}},"version":1},"version":1,"checkPoints":[]}