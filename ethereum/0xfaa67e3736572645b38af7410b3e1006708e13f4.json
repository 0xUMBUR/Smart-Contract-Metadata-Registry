{"address":"0xfaa67e3736572645B38AF7410B3E1006708e13F4","name":"","metadata":{"compiler":{"version":"0.6.10+commit.00c0fcaf"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"collateral","type":"address"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"CollateralDustUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"productHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timeToExpiry","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"MaxPriceAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"productHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timeToExpiry","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldValue","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newValue","type":"uint256"}],"name":"MaxPriceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oracleDeviation","type":"uint256"}],"name":"OracleDeviationUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"product","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"spotShock","type":"uint256"}],"name":"SpotShockUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"productHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timeToExpiry","type":"uint256"}],"name":"TimeToExpiryAdded","type":"event"},{"inputs":[],"name":"AUCTION_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_collateral","type":"address"}],"name":"getCollateralDust","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"shortOtokens","type":"address[]"},{"internalType":"address[]","name":"longOtokens","type":"address[]"},{"internalType":"address[]","name":"collateralAssets","type":"address[]"},{"internalType":"uint256[]","name":"shortAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"longAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"collateralAmounts","type":"uint256[]"}],"internalType":"struct MarginVault.Vault","name":"_vault","type":"tuple"},{"internalType":"uint256","name":"_vaultType","type":"uint256"}],"name":"getExcessCollateral","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_otoken","type":"address"}],"name":"getExpiredPayoutRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"shortOtokens","type":"address[]"},{"internalType":"address[]","name":"longOtokens","type":"address[]"},{"internalType":"address[]","name":"collateralAssets","type":"address[]"},{"internalType":"uint256[]","name":"shortAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"longAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"collateralAmounts","type":"uint256[]"}],"internalType":"struct MarginVault.Vault","name":"_vault","type":"tuple"},{"internalType":"uint256","name":"_vaultType","type":"uint256"}],"name":"getMarginRequired","outputs":[{"components":[{"internalType":"int256","name":"value","type":"int256"}],"internalType":"struct FPI.FixedPointInt","name":"","type":"tuple"},{"components":[{"internalType":"int256","name":"value","type":"int256"}],"internalType":"struct FPI.FixedPointInt","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_strike","type":"address"},{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"bool","name":"_isPut","type":"bool"},{"internalType":"uint256","name":"_timeToExpiry","type":"uint256"}],"name":"getMaxPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_strike","type":"address"},{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"uint256","name":"_shortAmount","type":"uint256"},{"internalType":"uint256","name":"_strikePrice","type":"uint256"},{"internalType":"uint256","name":"_underlyingPrice","type":"uint256"},{"internalType":"uint256","name":"_shortExpiryTimestamp","type":"uint256"},{"internalType":"uint256","name":"_collateralDecimals","type":"uint256"},{"internalType":"bool","name":"_isPut","type":"bool"}],"name":"getNakedMarginRequired","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOracleDeviation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_strike","type":"address"},{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"bool","name":"_isPut","type":"bool"}],"name":"getSpotShock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_strike","type":"address"},{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"bool","name":"_isPut","type":"bool"}],"name":"getTimesToExpiry","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"shortOtokens","type":"address[]"},{"internalType":"address[]","name":"longOtokens","type":"address[]"},{"internalType":"address[]","name":"collateralAssets","type":"address[]"},{"internalType":"uint256[]","name":"shortAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"longAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"collateralAmounts","type":"uint256[]"}],"internalType":"struct MarginVault.Vault","name":"_vault","type":"tuple"},{"internalType":"uint256","name":"_vaultType","type":"uint256"},{"internalType":"uint256","name":"_vaultLatestUpdate","type":"uint256"},{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"isLiquidatable","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracle","outputs":[{"internalType":"contract OracleInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"uint256","name":"_dust","type":"uint256"}],"name":"setCollateralDust","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_deviation","type":"uint256"}],"name":"setOracleDeviation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_strike","type":"address"},{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"bool","name":"_isPut","type":"bool"},{"internalType":"uint256","name":"_shockValue","type":"uint256"}],"name":"setSpotShock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_strike","type":"address"},{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"bool","name":"_isPut","type":"bool"},{"internalType":"uint256[]","name":"_timesToExpiry","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"setUpperBoundValues","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_underlying","type":"address"},{"internalType":"address","name":"_strike","type":"address"},{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"bool","name":"_isPut","type":"bool"},{"internalType":"uint256","name":"_timeToExpiry","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"updateUpperBoundValue","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Opyn","methods":{"constructor":{"params":{"_oracle":"oracle module address"}},"getCollateralDust(address)":{"params":{"_collateral":"collateral asset address"},"returns":{"_0":"dust amount"}},"getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)":{"details":"return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault","params":{"_vault":"theoretical vault that needs to be checked","_vaultType":"vault type (0 for spread/max loss, 1 for naked margin)"},"returns":{"_0":"excessCollateral the amount by which the margin is above or below the required amount","_1":"isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault"}},"getExpiredPayoutRate(address)":{"params":{"_otoken":"oToken address"},"returns":{"_0":"how much collateral can be taken out by 1 otoken unit, scaled by 1e8, or how much collateral can be taken out for 1 (1e8) oToken"}},"getMarginRequired((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)":{"params":{"_vault":"theoretical vault that needs to be checked","_vaultType":"vault type"},"returns":{"_0":"the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault, scaled to 1e27"}},"getMaxPrice(address,address,address,bool,uint256)":{"params":{"_collateral":"otoken collateral asset","_isPut":"otoken type","_strike":"otoken strike asset","_timeToExpiry":"option time to expiry timestamp","_underlying":"otoken underlying asset"},"returns":{"_0":"option upper bound value (1e27)"}},"getNakedMarginRequired(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)":{"details":"_shortAmount, _strikePrice and _underlyingPrice should be scaled by 1e8","params":{"_collateral":"collateral asset address","_collateralDecimals":"otoken collateral asset decimals","_isPut":"otoken type","_shortAmount":"amount of short otoken","_shortExpiryTimestamp":"otoken expiry timestamp","_strike":"strike asset address","_strikePrice":"otoken strike price","_underlying":"underlying asset address","_underlyingPrice":"otoken underlying price"},"returns":{"_0":"collateral required for a naked margin vault, in collateral asset decimals"}},"getOracleDeviation()":{"returns":{"_0":"oracle deviation value (1e27)"}},"getSpotShock(address,address,address,bool)":{"params":{"_collateral":"otoken collateral asset","_isPut":"otoken type","_strike":"otoken strike asset","_underlying":"otoken underlying asset"},"returns":{"_0":"_shockValue spot shock value (1e27)"}},"getTimesToExpiry(address,address,address,bool)":{"params":{"_collateral":"otoken collateral asset","_isPut":"otoken type","_strike":"otoken strike asset","_underlying":"otoken underlying asset"},"returns":{"_0":"array of times to expiry"}},"isLiquidatable((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)":{"details":"if the vault is of type 0, the function will revert","params":{"_roundId":"chainlink round id","_vault":"vault struct","_vaultLatestUpdate":"vault latest update (timestamp when latest vault state change happened)","_vaultType":"vault type (0 for max loss/spread and 1 for naked margin vault)"},"returns":{"_0":"isLiquidatable, true if vault is undercollateralized, liquidation price and collateral dust amount"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setCollateralDust(address,uint256)":{"details":"can only be called by owner","params":{"_collateral":"collateral asset address","_dust":"dust amount, should be scaled by collateral asset decimals"}},"setOracleDeviation(uint256)":{"details":"can only be called by owner","params":{"_deviation":"deviation value"}},"setSpotShock(address,address,address,bool,uint256)":{"details":"can only be called by owner","params":{"_collateral":"otoken collateral asset","_isPut":"otoken type","_shockValue":"spot shock value","_strike":"otoken strike asset","_underlying":"otoken underlying asset"}},"setUpperBoundValues(address,address,address,bool,uint256[],uint256[])":{"details":"can only be called by owner","params":{"_collateral":"otoken collateral asset","_isPut":"otoken type","_strike":"otoken strike asset","_timesToExpiry":"array of times to expiry timestamp","_underlying":"otoken underlying asset","_values":"upper bound values array"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateUpperBoundValue(address,address,address,bool,uint256,uint256)":{"details":"can only be called by owner","params":{"_collateral":"otoken collateral asset","_isPut":"otoken type","_strike":"otoken strike asset","_timeToExpiry":"option time to expiry timestamp","_underlying":"otoken underlying asset","_value":"upper bound value"}}},"stateVariables":{"BASE":{"details":"decimals used by strike price and oracle price"},"SCALING_FACTOR":{"details":"decimals option upper bound value, spot shock and oracle deviation"},"ZERO":{"details":"FixedPoint 0"},"dust":{"details":"mapping to store dust amount per option collateral asset (scaled by collateral asset decimals)"},"maxPriceAtTimeToExpiry":{"details":"mapping to store option upper bound value at specific time to expiry for a given product (1e27)"},"oracle":{"details":"oracle module"},"oracleDeviation":{"details":"oracle deviation value (1e27)"},"spotShock":{"details":"mapping to store shock value for spot price of a given product (1e27)"},"timesToExpiryForProduct":{"details":"mapping to store array of time to expiry for a given product"}},"title":"MarginCalculator"},"userdoc":{"methods":{"AUCTION_TIME()":{"notice":"auction length"},"constructor":"constructor","getCollateralDust(address)":{"notice":"get dust amount for collateral asset"},"getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)":{"notice":"returns the amount of collateral that can be removed from an actual or a theoretical vault"},"getExpiredPayoutRate(address)":{"notice":"return the cash value of an expired oToken, denominated in collateral"},"getMarginRequired((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)":{"notice":"calculate required collateral margin for a vault"},"getMaxPrice(address,address,address,bool,uint256)":{"notice":"get option upper bound value for specific time to expiry"},"getNakedMarginRequired(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)":{"notice":"return the collateral required for naked margin vault, in collateral asset decimals"},"getOracleDeviation()":{"notice":"get oracle deviation"},"getSpotShock(address,address,address,bool)":{"notice":"get spot shock value"},"getTimesToExpiry(address,address,address,bool)":{"notice":"get times to expiry for a specific product"},"isLiquidatable((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)":{"notice":"check if a specific vault is undercollateralized at a specific chainlink round"},"setCollateralDust(address,uint256)":{"notice":"set dust amount for collateral asset"},"setOracleDeviation(uint256)":{"notice":"set oracle deviation (1e27)"},"setSpotShock(address,address,address,bool,uint256)":{"notice":"set spot shock value, scaled to 1e27"},"setUpperBoundValues(address,address,address,bool,uint256[],uint256[])":{"notice":"set product upper bound values"},"updateUpperBoundValue(address,address,address,bool,uint256,uint256)":{"notice":"set option upper bound value for specific time to expiry (1e27)"}},"notice":"Calculator module that checks if a given vault is valid, calculates margin requirements, and settlement proceeds"}},"settings":{"compilationTarget":{"contracts/MarginCalculator.sol":"MarginCalculator"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/MarginCalculator.sol":{"keccak256":"0x799cdd7166b766197e2dda53efa542c5dc4f4c3beeb6532f2741f21526602274","license":"UNLICENSED","urls":["bzz-raw://538bf63208b35b684c9e17e48ee4ee0a9ec812997765ed1cfd43a8f6e12efe53","dweb:/ipfs/Qmd3AGeCHSodY7oWt5e6s6XBKX1Z5cNL6feS5YnRSqhF9N"]}},"version":1},"version":1,"checkPoints":[]}