{"address":"0x2Ba15aD55B85d67407142E9A92503B945f729AEF","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IMilk2Token","name":"_milk","type":"address"},{"internalType":"uint256[5]","name":"_epochs","type":"uint256[5]"},{"internalType":"uint256[5]","name":"_multipliers","type":"uint256[5]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"keyHash","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"}],"name":"AddNewKey","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"pid","type":"uint256"}],"name":"AddNewPool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"Harvest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"poolPid","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"previusPoints","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPoints","type":"uint256"}],"name":"PoolUpdate","type":"event"},{"inputs":[{"internalType":"contract IERC20","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_newPoints","type":"uint256"}],"name":"addNewPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_lastBlockNumber","type":"uint256"},{"internalType":"uint256","name":"_currentBlockNumber","type":"uint256"},{"internalType":"bytes32","name":"_msgForSign","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"debug_harvest","outputs":[{"internalType":"address","name":"_signer","type":"address"},{"internalType":"bytes32","name":"_msg","type":"bytes32"},{"internalType":"bytes32","name":"_prefixedMsg","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_lastBlockNumber","type":"uint256"},{"internalType":"uint256","name":"_currentBlockNumber","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"}],"name":"getData","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getLastBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_lastBlockNumber","type":"uint256"},{"internalType":"uint256","name":"_currentBlockNumber","type":"uint256"},{"internalType":"address","name":"_sender","type":"address"}],"name":"getMsgForSign","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"f","type":"uint256"},{"internalType":"uint256","name":"t","type":"uint256"}],"name":"getMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_poolPid","type":"uint256"}],"name":"getPool","outputs":[{"internalType":"address","name":"_lpToken","type":"address"},{"internalType":"uint256","name":"_block","type":"uint256"},{"internalType":"uint256","name":"_weight","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPoolsCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getTotalRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_userId","type":"uint256"}],"name":"getUser","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUsersCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getValueEpoch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getValueMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_lastBlockNumber","type":"uint256"},{"internalType":"uint256","name":"_currentBlockNumber","type":"uint256"},{"internalType":"bytes32","name":"_msgForSign","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"harvest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"milk","outputs":[{"internalType":"contract IMilk2Token","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_msg","type":"bytes32"}],"name":"preSignMsg","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"registration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setEpoch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"setMultiplier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_poolPid","type":"uint256"},{"internalType":"uint256","name":"_newPoints","type":"uint256"}],"name":"setPoll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_signer","type":"address"},{"internalType":"bool","name":"_isValid","type":"bool"}],"name":"setTrustedSigner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"trustedSigner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"addNewPool(address,uint256)":{"details":"Add a new lp to the pool.","params":{"_lpToken":"- address of ERC-20 LP token","_newPoints":"- share in the total amount of rewards DO NOT add the same LP token more than once. Rewards will be messed up if you do. Can only be called by the current owner."}},"debug_harvest(uint256,uint256,uint256,bytes32,bytes)":{"details":"Check signature and mint tokens","params":{"_amount":"- subj","_currentBlockNumber":"- subj","_lastBlockNumber":"- subj","_msgForSign":"- hash for sign with Ethereum style prefix!!!","_signature":"- signature"}},"getLastBlock(address)":{"details":"- return info about user's last block with update","params":{"_user":"- user's address"}},"getMsgForSign(uint256,uint256,uint256,address)":{"details":"Prepare abi encoded message"},"getPoolsCount()":{"details":"- return Number of keys"},"getRewards(address)":{"details":"- return info about current user's reward","params":{"_user":"- user's address"}},"getTotalPoints()":{"details":"- return total allocation points"},"getTotalRewards(address)":{"details":"- return total rewards"},"getUser(uint256)":{"details":"- return address of user","params":{"":"- _userId - unique number of user in array"}},"getUsersCount()":{"details":"- return Number of users"},"getValueEpoch(uint256)":{"details":"- return value of epoch","params":{"":"- _id - epoch's id(0-4)"}},"getValueMultiplier(uint256)":{"details":"- return value of multiplier","params":{"":"- _id - multiplier's id (0-4)"}},"harvest(uint256,uint256,uint256,bytes32,bytes)":{"details":"Check signature and mint tokens","params":{"_amount":"- subj","_currentBlockNumber":"- subj","_lastBlockNumber":"- subj","_msgForSign":"- hash for sign with Ethereum style prefix!!!","_signature":"- signature"}},"owner()":{"details":"Returns the address of the current owner."},"preSignMsg(bytes32)":{"details":"prepare hash for sign with Ethereum comunity convention see links below https://ethereum.stackexchange.com/questions/24547/sign-without-x19ethereum-signed-message-prefix?rq=1 https://github.com/ethereum/EIPs/pull/712 https://programtheblockchain.com/posts/2018/02/17/signing-and-verifying-messages-in-ethereum/"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setPoll(uint256,uint256)":{"details":"Update lp address to the pool.","params":{"_newPoints":"- new amount of allocation points DO NOT add the same LP token more than once. Rewards will be messed up if you do. Can only be called by the current owner.","_poolPid":"- number of pool"}},"setTrustedSigner(address,bool)":{"details":"set address that can sign"},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"browser/Shadow.sol":"ShadowStakingV2"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/Shadow.sol":{"keccak256":"0xa76fc8c3f94468719614bb01f05b036746174c2076dd389866b6b8dcb90428de","license":"MIT","urls":["bzz-raw://2ad699e3860de7c3b5bae94b2c0facbb1d23b5d8587946ad3e16466b3a796b56","dweb:/ipfs/QmeD1ggUNZeY95PLdZjiCrCgG5wBvZKkfs5Gga6rAGQdji"]}},"version":1},"version":1,"checkPoints":[]}