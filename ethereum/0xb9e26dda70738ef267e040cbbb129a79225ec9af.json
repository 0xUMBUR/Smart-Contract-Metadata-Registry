{"address":"0xB9e26ddA70738eF267e040cbBb129A79225eC9af","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinator","type":"address"},{"internalType":"address","name":"link","type":"address"},{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"}],"name":"RequestRandomness","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"components":[{"internalType":"bool","name":"fullfilled","type":"bool"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"indexed":false,"internalType":"struct BancorVRFConsumer.Request","name":"request","type":"tuple"}],"name":"RequestRandomnessFullfilled","type":"event"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"address[]","name":"inputs","type":"address[]"}],"name":"draw","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"seed","type":"uint256"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"name":"requestRandomness","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawLink","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"RequestRandomness(bytes32)":{"details":"Triggered when a randomness request is needed.","params":{"requestId":"Request ID of the to-be generated randomness"}},"RequestRandomnessFullfilled(bytes32,(bool,bytes32,bytes32,uint256))":{"details":"Triggered when a randomness has been generated.","params":{"request":"Request fullfilled","requestId":"Request ID of a generation"}}},"kind":"dev","methods":{"constructor":{"details":"Initialize BancorVRFConsumer contract.","params":{"fee":"The amount of LINK to send with the request","keyHash":"ID of public key against which randomness is generated","link":"address of LINK token contract","vrfCoordinator":"address of VRFCoordinator contract"}},"draw(bytes32,address[])":{"details":"Function to draw from a set of inputs","params":{"inputs":"Array of addresses","requestId":"Request ID of a generation"},"returns":{"_0":"winner's address"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"requestRandomness(uint256,bytes32)":{"details":"Request VRF Coordinator for randomness and create a new Request structure for it in storage","params":{"name":"name of the requested randomness","seed":"seed mixed into the input of the VRF"},"returns":{"_0":"request id"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"withdrawLink()":{"details":"Withdraw LINK tokens"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/BancorVRF.sol":"BancorVRFConsumer"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/BancorVRF.sol":{"keccak256":"0xac5f0aa46b1cebeea5b7eb63ad88ed7e6ed73d316b231c165d71560d97cac2bf","license":"MIT","urls":["bzz-raw://055283adc087fef9070015efc1508e19bdd482a31bf985d9fd85ac83c4442b37","dweb:/ipfs/QmNukj9naZA7oP7G8NExtz4sPZYvegNoWFq45eB75yf7op"]}},"version":1},"version":1,"checkPoints":[]}