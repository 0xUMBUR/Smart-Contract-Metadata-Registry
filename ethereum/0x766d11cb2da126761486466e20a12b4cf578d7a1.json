{"address":"0x766D11CB2da126761486466e20a12B4CF578D7a1","name":"","metadata":{"compiler":{"version":"0.8.4+commit.c7e474f2"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bool","name":"frozen","type":"bool"}],"name":"FrozenAccounts","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"addCustodialToken","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxTransactionAmount","type":"uint256"}],"name":"changeMaxTransactionAmount","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"changeSafeguardStatus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"custodianTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"decrease_allowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receivingTokenAddress","type":"address"},{"internalType":"uint256","name":"dbcTokenAmount","type":"uint256"}],"name":"destroyToken","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"freeze","type":"bool"}],"name":"freezeAccount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"frozenAccount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"increase_allowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"paymentTokenAddress","type":"address"},{"internalType":"uint256","name":"dbcTokenAmount","type":"uint256"}],"name":"issueToken","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"manualWithdrawEther","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maxTransactionAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"safeguard","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"addCustodialToken(address)":{"details":"owner can add stable coin contract address which can be used as custodial to receive DBC coins These must be USD stable coins having the same value and their price must not fluctuate too much. Owner only can add tokens and can not remove it. This is to increase trust as owner also can not remove any custodian tokens. Owner must add ONLY reputable stable coins, and not any other tokens whose value can go down.. otherwise users will swap that low value tokens with other high value stable coins. "},"approve(address,uint256)":{"params":{"_spender":"The address authorized to spend","_value":"the max amount they can spend"}},"changeMaxTransactionAmount(uint256)":{"details":"owner can change max transaction amount."},"decrease_allowance(address,uint256)":{"details":"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) Emits an Approval event.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to decrease the allowance by."}},"destroyToken(address,uint256)":{"details":"destroy DBC tokens This will swap other stable coins as 1:1 ratio user need to put DBC token amount in 4 decimals If this smart contract does not have enought receiving tokens, then user must change to the one available."},"freezeAccount(address,bool)":{"params":{"freeze":"either to freeze it or not","target":"Address to be frozen"}},"increase_allowance(address,uint256)":{"details":"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) Emits an Approval event.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to increase the allowance by."}},"issueToken(address,uint256)":{"details":"generate new tokens and issue to users. User has to provide payment token wallet, which would be deducted as 1:1 ratio User has to approve this smart contract as spender before doing this transaction"},"transfer(address,uint256)":{"params":{"_to":"The address of the recipient","_value":"the amount to send"}},"transferFrom(address,address,uint256)":{"params":{"_from":"The address of the sender","_to":"The address of the recipient","_value":"the amount to send"}}},"version":1},"userdoc":{"kind":"user","methods":{"allowance(address,address)":{"notice":"Returns allowance of token "},"approve(address,uint256)":{"notice":"Set allowance for other address Allows `_spender` to spend no more than `_value` tokens in your behalf"},"balanceOf(address)":{"notice":"Returns balance of token "},"changeSafeguardStatus()":{"notice":"Change safeguard status on or off When safeguard is true, then all the non-owner functions will stop working. When safeguard is false, then all the functions will resume working back again!"},"decimals()":{"notice":"Returns decimals of token "},"freezeAccount(address,bool)":{"notice":"`freeze? Prevent | Allow` `target` from sending & receiving tokens"},"manualWithdrawEther()":{"notice":"Just in rare case, owner wants to transfer Ether from contract to owner address Incomeing ether is not expected.. and hence this function does not do any harm to tokenomics"},"name()":{"notice":"Returns name of token "},"symbol()":{"notice":"Returns symbol of token "},"totalSupply()":{"notice":"Returns totalSupply of token."},"transfer(address,uint256)":{"notice":"Transfer tokens Send `_value` tokens to `_to` from your account"},"transferFrom(address,address,uint256)":{"notice":"Transfer tokens from other address Send `_value` tokens to `_to` in behalf of `_from`"}},"version":1}},"settings":{"compilationTarget":{"contracts/New-Debit-Dollar.sol":"DebitCoinToken"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/New-Debit-Dollar.sol":{"keccak256":"0x278265586f2dd6311e18c0255d5adb28baddce977438842f1c94a5534ba0e902","license":"Affero GPLv3 Licence.","urls":["bzz-raw://052988ed4300401dd51b767089859828e59b848d00f83d7ca6776eee1f593f69","dweb:/ipfs/QmR2H5ZoDTYSQhDKqYFrjZn1TDqmpjPnoTeQqvfsPTWb3Y"]}},"version":1},"version":1,"checkPoints":[]}