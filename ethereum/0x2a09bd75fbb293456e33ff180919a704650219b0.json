{"address":"0x2a09bd75fbB293456E33fF180919a704650219b0","name":"","metadata":{"compiler":{"version":"0.6.4+commit.1dca32f3"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint8","name":"chainID","type":"uint8"},{"internalType":"address[]","name":"initialRelayers","type":"address[]"},{"internalType":"uint256","name":"initialRelayerThreshold","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint8","name":"destinationChainID","type":"uint8"},{"indexed":true,"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"depositNonce","type":"uint64"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint8","name":"originChainID","type":"uint8"},{"indexed":true,"internalType":"uint64","name":"depositNonce","type":"uint64"},{"indexed":true,"internalType":"enum NFTBridge.ProposalStatus","name":"status","type":"uint8"},{"indexed":false,"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"ProposalEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"relayer","type":"address"}],"name":"RelayerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"relayer","type":"address"}],"name":"RelayerRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"newThreshold","type":"uint256"}],"name":"RelayerThresholdChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_chainID","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint8","name":"","type":"uint8"}],"name":"_depositRecords","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint72","name":"","type":"uint72"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"name":"_hasVotedOnProposal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint72","name":"","type":"uint72"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"_proposals","outputs":[{"internalType":"bytes32","name":"_resourceID","type":"bytes32"},{"internalType":"bytes32","name":"_dataHash","type":"bytes32"},{"internalType":"enum NFTBridge.ProposalStatus","name":"_status","type":"uint8"},{"internalType":"uint256","name":"_proposedBlock","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_relayerThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_totalProposals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_totalRelayers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"relayerAddress","type":"address"}],"name":"adminAddRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newThreshold","type":"uint256"}],"name":"adminChangeRelayerThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"adminPauseTransfers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"relayerAddress","type":"address"}],"name":"adminRemoveRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"bridgeCounter_","type":"address"}],"name":"adminSetBridgeCounterContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"adminSetBurnable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"resourceId","type":"bytes32"},{"internalType":"address","name":"feeHandlerAddress_","type":"address"},{"internalType":"address","name":"feeTokenAddress","type":"address"}],"name":"adminSetFeeHandler","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"handlerAddress","type":"address"},{"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"internalType":"address","name":"tokenAddress","type":"address"}],"name":"adminSetResource","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"adminUnpauseTransfers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"handlerAddress","type":"address"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"adminWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"bridgeCounterAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"source","type":"bytes"}],"name":"bytesToBytes32","outputs":[{"internalType":"bytes32","name":"result","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint8","name":"chainID","type":"uint8"},{"internalType":"uint64","name":"depositNonce","type":"uint64"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"cancelProposal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"originChainID","type":"uint8"},{"internalType":"uint64","name":"depositNonce","type":"uint64"},{"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"internalType":"bytes","name":"asset","type":"bytes"},{"internalType":"bytes[]","name":"signs","type":"bytes[]"}],"name":"commitVotes","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"destinationChainID","type":"uint8"},{"internalType":"bytes32","name":"resourceID","type":"bytes32"},{"internalType":"bytes","name":"recipient","type":"bytes"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"depositNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"signHash","type":"bytes32"},{"internalType":"bytes","name":"sign","type":"bytes"}],"name":"ecrecoverDecode","outputs":[{"internalType":"address","name":"addr","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"feeHandlerAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"originChainID","type":"uint8"},{"internalType":"uint64","name":"depositNonce","type":"uint64"},{"internalType":"bytes32","name":"dataHash","type":"bytes32"}],"name":"getProposal","outputs":[{"components":[{"internalType":"bytes32","name":"_resourceID","type":"bytes32"},{"internalType":"bytes32","name":"_dataHash","type":"bytes32"},{"internalType":"address[]","name":"_yesVotes","type":"address[]"},{"internalType":"address[]","name":"_noVotes","type":"address[]"},{"internalType":"enum NFTBridge.ProposalStatus","name":"_status","type":"uint8"},{"internalType":"uint256","name":"_proposedBlock","type":"uint256"}],"internalType":"struct NFTBridge.Proposal","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"relayer","type":"address"}],"name":"isRelayer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"renounceAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"len","type":"uint256"}],"name":"slice","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"src721HandlerAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"ChainSafe Systems.","methods":{"adminAddRelayer(address)":{"params":{"relayerAddress":"Address of relayer to be added."}},"adminChangeRelayerThreshold(uint256)":{"params":{"newThreshold":"Value {_relayerThreshold} will be changed to."}},"adminRemoveRelayer(address)":{"params":{"relayerAddress":"Address of relayer to be removed."}},"adminSetBurnable(address)":{"params":{"tokenAddress":"Address of contract to be called when a deposit is made and a deposited is executed."}},"adminSetResource(address,bytes32,address)":{"params":{"handlerAddress":"Address of handler resource will be set for.","resourceID":"ResourceID to be used when making deposits.","tokenAddress":"Minimum amount of deposits."}},"adminWithdraw(address,address,address,uint256)":{"params":{"handlerAddress":"Address of handler to withdraw from.","recipient":"Address to withdraw tokens to.","tokenAddress":"Address of token to withdraw.","tokenId":"the amount of ERC20 tokens."}},"cancelProposal(uint8,uint64,bytes32)":{"params":{"chainID":"ID of chain deposit originated from.","dataHash":"Hash of data originally provided when deposit was made.","depositNonce":"ID of deposited generated by origin Bridge contract."}},"constructor":{"params":{"chainID":"ID of chain the Bridge contract exists on.","initialRelayerThreshold":"Number of votes needed for a deposit proposal to be considered passed.","initialRelayers":"Addresses that should be initially granted the relayer role."}},"getProposal(uint8,uint64,bytes32)":{"params":{"dataHash":"Hash of data to be provided when deposit proposal is executed.","depositNonce":"ID of proposal generated by proposal's origin Bridge contract.","originChainID":"Chain ID deposit originated from."},"returns":{"_0":"Proposal which consists of: - _dataHash Hash of data to be provided when deposit proposal is executed. - _yesVotes Number of votes in favor of proposal. - _noVotes Number of votes against proposal. - _status Current status of proposal."}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isRelayer(address)":{"params":{"relayer":"Address to check."}},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceAdmin(address)":{"params":{"newAdmin":"Address that admin role will be granted to."}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."}},"title":"Facilitates deposits, creation and votiing of deposit proposals, and deposit executions."},"userdoc":{"methods":{"adminAddRelayer(address)":{"notice":"Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event."},"adminChangeRelayerThreshold(uint256)":{"notice":"Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event."},"adminPauseTransfers()":{"notice":"Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role."},"adminRemoveRelayer(address)":{"notice":"Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event."},"adminSetBurnable(address)":{"notice":"Only callable by an address that currently has the admin role."},"adminSetResource(address,bytes32,address)":{"notice":"Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role."},"adminUnpauseTransfers()":{"notice":"Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role."},"adminWithdraw(address,address,address,uint256)":{"notice":"Used to manually withdraw funds from ERC safes."},"cancelProposal(uint8,uint64,bytes32)":{"notice":"Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}."},"constructor":"Initializes Bridge, creates and grants {msg.sender} the admin role, creates and grants {initialRelayers} the relayer role.","getProposal(uint8,uint64,bytes32)":{"notice":"Returns a proposal."},"isRelayer(address)":{"notice":"Returns true if {relayer} has the relayer role."},"renounceAdmin(address)":{"notice":"Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role."}}}},"settings":{"compilationTarget":{"browser/chainBridge/SXBridge.sol":"NFTBridge"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/chainBridge/SXBridge.sol":{"keccak256":"0xf66bfc64ca71785d9a4154bb944eb990e8c2eaa112c4839514948388a40870d8","urls":["bzz-raw://0c7e54ef24f9583792b8292dca022f55e38955f27c2081370d74a835fb878e29","dweb:/ipfs/QmdrJZcDAB5YvAccsT5AkJdCqQWu26tsPxh4q8n7DtNymx"]},"browser/chainBridge/interfaces/IBridge.sol":{"keccak256":"0xb53f47ab2c5f0897b834f45edb7d799b78b6ded84a08dc15f2d20406f273edf0","urls":["bzz-raw://3c2859a6062e2669328d8064795e9b8faa30ff2ecf173cb11773333b73976574","dweb:/ipfs/QmSJL68Mcxqch6X8wj4U8hytcvCHkwV9zxVoQCNTziYJC9"]},"browser/chainBridge/interfaces/IBridgeCounter.sol":{"keccak256":"0xab7f1556acf23159388d3019d7c64fe37e804e3e673719345bf7c868d966d1de","urls":["bzz-raw://f8b72544c2bd4dfadce397fb63518d0e1cf6ffe974e3c2408267091d9a13341b","dweb:/ipfs/QmUa1cWjfwirDeFrXLeUkWXQbYHKGo8QpmT2xBd1WzxKTd"]},"browser/chainBridge/interfaces/ICrossFee.sol":{"keccak256":"0x7d751e1507b5acca97d1529e69ff2499cace572a684df4eef07e611859fd2a74","urls":["bzz-raw://47018e163d7d16e21d3fbdecff37c44fa20c81b2391a426c681573247d2d0708","dweb:/ipfs/QmVdKXjo5LYmEShFMWdNrmiE9ZEodemzBPBQQMqf5g3a5G"]},"browser/chainBridge/interfaces/IDepositExecute.sol":{"keccak256":"0x2c35883d3311ef67d60c6016efb562eb534848b2fc81bd648c0a0d6b2580e7b1","urls":["bzz-raw://5a63dba5436975ad9d594ceefd74e498714544d5ca4adb7ec16c40a2822d91d3","dweb:/ipfs/QmZowxiFbxguZRaYRgv6ywUaToraCdfibHy37MyBtd2dFx"]},"browser/chainBridge/interfaces/IERCHandler.sol":{"keccak256":"0x5f68cb88ca1c0f26142f061d06c8e9a4c8a5171282e47754502aaec81094d130","urls":["bzz-raw://1367426cb732de4b4bc23cdf43d3aaa82dd78eaf1685e9d4c9b0e861da6e3e8b","dweb:/ipfs/QmZfuQyp21tyCGygbdSyrcm3CrHtsBFFttAgdTcomXaCSz"]},"browser/chainBridge/utils/Pausable.sol":{"keccak256":"0xd995bcc6b4067ac18db610e47a2a969e8009cb311b017cdd34fc2b46c3be7020","urls":["bzz-raw://53e0d1dc839eb40ba23a887d302f26764eed0fe035d0e519be6a1099a1237b33","dweb:/ipfs/QmbMhz1VEBxhRsz6par2rKgErxFphimiCqrmCREiusVDHv"]},"browser/chainBridge/utils/SafeMath.sol":{"keccak256":"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6","urls":["bzz-raw://7f8d45329fecbf0836ad7543330c3ecd0f8d0ffa42d4016278c3eb2215fdcdfe","dweb:/ipfs/QmXWLT7GcnHtA5NiD6MFi2CV3EWJY4wv5mLNnypqYDrxL3"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol":{"keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","urls":["bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f","dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/AccessControl.sol":{"keccak256":"0xa422a97a594ba31d6b172ddace9c9570bddc6b44709ab268af8062892f942e4d","urls":["bzz-raw://bae85377b6e0e3be77995ee88609d1ed91a97a29d676f6bb9ed523f2d5134c4b","dweb:/ipfs/QmbPezXQgnWdPR6Scdrmr2vrhyhMgkxRAuDCo9YJGWuj94"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x67bf2dd5a56395b107ec6ec049d3bc0be559bcd9800c11549fda9603368f4b1a","urls":["bzz-raw://1bd95d6f0a8757ca62a39b861b35a3b6e8166fcf8b83cbb65150436821b040e0","dweb:/ipfs/QmbfRNRR6cediYriyFQA4SmXTyj8prML12eNuhsbAZU85Q"]},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/EnumerableSet.sol":{"keccak256":"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2","urls":["bzz-raw://3b61f99a64e999682ad7bfbb3a1c762a20a0a5b30f9f2011693fa857969af61f","dweb:/ipfs/QmZystFY76wkWCf7V3yKh3buZuKVKbswiE7y6yU62kk3zi"]}},"version":1},"version":1,"checkPoints":[]}