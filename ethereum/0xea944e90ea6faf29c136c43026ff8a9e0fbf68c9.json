{"address":"0xeA944E90ea6faF29C136c43026fF8A9e0fBF68C9","name":"","metadata":{"compiler":{"version":"0.6.2+commit.bacdbe57"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_identityRegistry","type":"address"},{"internalType":"address","name":"_compliance","type":"address"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"string","name":"_version","type":"string"},{"internalType":"address","name":"_onchainID","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"addr","type":"address"},{"indexed":true,"internalType":"bool","name":"isFrozen","type":"bool"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"AddressFrozen","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_compliance","type":"address"}],"name":"ComplianceAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_identityRegistry","type":"address"}],"name":"IdentityRegistryAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"wallet_lostAddress","type":"address"},{"indexed":false,"internalType":"address","name":"wallet_newAddress","type":"address"},{"indexed":false,"internalType":"address","name":"onchainID","type":"address"}],"name":"RecoveryFails","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"wallet_lostAddress","type":"address"},{"indexed":false,"internalType":"address","name":"wallet_newAddress","type":"address"},{"indexed":false,"internalType":"address","name":"onchainID","type":"address"}],"name":"RecoverySuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensFrozen","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensUnfrozen","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"newName","type":"string"},{"indexed":false,"internalType":"string","name":"newSymbol","type":"string"},{"indexed":false,"internalType":"uint8","name":"newDecimals","type":"uint8"},{"indexed":false,"internalType":"string","name":"newVersion","type":"string"},{"indexed":false,"internalType":"address","name":"newOnchainID","type":"address"}],"name":"UpdatedTokenInformation","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"_identity","outputs":[{"internalType":"contract IIdentity","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"account","type":"address[]"},{"internalType":"uint256[]","name":"value","type":"uint256[]"}],"name":"batchBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_fromList","type":"address[]"},{"internalType":"address[]","name":"_toList","type":"address[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"batchForcedTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"addrList","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchFreezePartialTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_to","type":"address[]"},{"internalType":"uint256[]","name":"_amount","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"addrList","type":"address[]"},{"internalType":"bool[]","name":"freeze","type":"bool[]"}],"name":"batchSetAddressFrozen","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_toList","type":"address[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"batchTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"addrList","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchUnfreezePartialTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"compliance","outputs":[{"internalType":"contract ICompliance","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"forcedTransfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"freezePartialTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"frozen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"frozenTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"index","type":"uint16"}],"name":"getShareholderCountByCountry","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"holderAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"holderCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"identityRegistry","outputs":[{"internalType":"contract IIdentityRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isAgent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"onchainID","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet_lostAddress","type":"address"},{"internalType":"address","name":"wallet_newAddress","type":"address"},{"internalType":"address","name":"onchainID","type":"address"}],"name":"recoveryAddress","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bool","name":"freeze","type":"bool"}],"name":"setAddressFrozen","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_compliance","type":"address"}],"name":"setCompliance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_identityRegistry","type":"address"}],"name":"setIdentityRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"string","name":"_version","type":"string"},{"internalType":"address","name":"_onchainID","type":"address"}],"name":"setTokenInformation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"unfreezePartialTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"batchForcedTransfer(address[],address[],uint256[])":{"params":{"_fromList":"The addresses of the senders","_toList":"The addresses of the receivers","_values":"The number of tokens to transfer to the corresponding receiver   "}},"batchFreezePartialTokens(address[],uint256[])":{"params":{"addrList":"The addresses on which tokens need to be frozen","amounts":"the amount of tokens to freeze on the corresponding address     "}},"batchSetAddressFrozen(address[],bool[])":{"params":{"addrList":"The addresses for which to update frozen status","freeze":"Frozen status of the corresponding address     "}},"batchTransfer(address[],uint256[])":{"params":{"_toList":"The addresses of the receivers","_values":"The number of tokens to transfer to the corresponding receiver    "}},"batchUnfreezePartialTokens(address[],uint256[])":{"params":{"addrList":"The addresses on which tokens need to be unfrozen","amounts":"the amount of tokens to unfreeze on the corresponding address     "}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including balanceOf() and transfer()."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"forcedTransfer(address,address,uint256)":{"params":{"_from":"The address of the sender","_to":"The address of the receiver","_value":"The number of tokens to transfer"},"returns":{"_0":"`true` if successful and revert if unsuccessful"}},"freezePartialTokens(address,uint256)":{"params":{"addr":"The address for which to update frozen tokens","amount":"Amount of Tokens to be frozen"}},"holderAt(uint256)":{"params":{"index":"The zero-based index of the holder."},"returns":{"_0":"`address` the address of the token holder with the given index."}},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."},"isOwner()":{"details":"Returns true if the caller is the current owner."},"mint(address,uint256)":{"params":{"_amount":"Amount of tokens to mint.     ","_to":"Address to mint the tokens to."}},"name()":{"details":"Returns the name of the token."},"onchainID()":{"details":"Returns the address of the onchainID of the token. the onchainID of the token gives all the information available about the token and is managed by the token issuer or his agent."},"owner()":{"details":"Returns the address of the current owner."},"pause()":{"details":"Called by a pauser to pause, triggers stopped state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setAddressFrozen(address,bool)":{"params":{"addr":"The address for which to update frozen status","freeze":"Frozen status of the address"}},"setTokenInformation(string,string,uint8,string,address)":{"details":"Sets the values for `tokenName`, `tokenSymbol`, `tokenDecimals`, `tokenVersion` and `tokenOnchainID`"},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"params":{"_to":"The address of the receiver","_value":"The number of tokens to transfer"},"returns":{"_0":"`true` if successful and revert if unsuccessful"}},"transferFrom(address,address,uint256)":{"params":{"_from":"The address of the sender","_to":"The address of the receiver","_value":"The number of tokens to transfer"},"returns":{"_0":"`true` if successful and revert if unsuccessful"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unfreezePartialTokens(address,uint256)":{"params":{"addr":"The address for which to update frozen tokens","amount":"Amount of Tokens to be unfrozen"}},"unpause()":{"details":"Called by a pauser to unpause, returns to normal state."},"version()":{"details":"Returns the TREX version of the token. current version is 2.5.0"}}},"userdoc":{"methods":{"batchForcedTransfer(address[],address[],uint256[])":{"notice":"function allowing to issue forced transfers in batch Only Agent can call this function. Require that `value` should not exceed available balance of `_from`. Require that the `to` addresses are all verified addresses, If one of the `to` addresses is not currently a shareholder then it MUST become one. If the batchForcedTransfer will reduce `_from`'s balance to 0 then that address MUST be removed from the list of shareholders. IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH, USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION"},"batchFreezePartialTokens(address[],uint256[])":{"notice":"function allowing to freeze tokens partially in batch Only Agent can call this function. IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `addrList.length` IS TOO HIGH, USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION"},"batchSetAddressFrozen(address[],bool[])":{"notice":"function allowing to set frozen addresses in batch Only Agent can call this function. IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `addrList.length` IS TOO HIGH, USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION"},"batchTransfer(address[],uint256[])":{"notice":"function allowing to issue transfers in batch Require that the msg.sender and `to` addresses are not frozen. Require that the total value should not exceed available balance. Require that the `to` addresses are all verified addresses, If one of the `to` addresses is not currently a shareholder then it MUST become one. If the batchTransfer will reduce `msg.sender`'s balance to 0 then that address MUST be removed from the list of shareholders. IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH, USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION"},"batchUnfreezePartialTokens(address[],uint256[])":{"notice":"function allowing to unfreeze tokens partially in batch Only Agent can call this function. IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `addrList.length` IS TOO HIGH, USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION"},"forcedTransfer(address,address,uint256)":{"notice":"*  In case the `from` address has not enough free tokens (unfrozen tokens) but has a total balance higher or equal to the `value` amount the amount of frozen tokens is reduced in order to have enough free tokens to proceed the transfer, in such a case, the remaining balance on the `from` account is 100% composed of frozen tokens post-transfer. Require that the `to` address is a verified address, If the `to` address is not currently a shareholder then it MUST become one. If the transfer will reduce `from`'s balance to 0 then that address MUST be removed from the list of shareholders."},"freezePartialTokens(address,uint256)":{"notice":"Freezes token amount specified for given address."},"holderAt(uint256)":{"notice":"By counting the number of token holders using `holderCount` you can retrieve the complete list of token holders, one at a time. It MUST throw if `index >= holderCount()`."},"holderCount()":{"notice":"Holder count simply returns the total number of token holder addresses."},"mint(address,uint256)":{"notice":"Improved version of default mint method. Tokens can be minted to an address if only it is a verified address as per the security token. This check will be useful for a complaint crowdsale. Only owner can call."},"setAddressFrozen(address,bool)":{"notice":"Sets an address frozen status for this token."},"transfer(address,uint256)":{"notice":"ERC-20 overridden function that include logic to check for trade validity. Require that the msg.sender and to addresses are not frozen. Require that the value should not exceed available balance . Require that the to address is a verified address, If the `to` address is not currently a shareholder then it MUST become one. If the transfer will reduce `msg.sender`'s balance to 0 then that address MUST be removed from the list of shareholders."},"transferFrom(address,address,uint256)":{"notice":"ERC-20 overridden function that include logic to check for trade validity. Require that the from and to addresses are not frozen. Require that the value should not exceed available balance . Require that the to address is a verified address, If the `to` address is not currently a shareholder then it MUST become one. If the transfer will reduce `from`'s balance to 0 then that address MUST be removed from the list of shareholders."},"unfreezePartialTokens(address,uint256)":{"notice":"Unfreezes token amount specified for given address"}}}},"settings":{"compilationTarget":{"browser/oldtoken.sol":"Token"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/oldtoken.sol":{"keccak256":"0x7bc7351b98181e776090a4b99d002c1c947615ad742a1200a0613c64037ed77c","urls":["bzz-raw://341b7ab619a5084b1ff8a89b7fd64f74ac756f723ad061d0c48edb2b57412e6d","dweb:/ipfs/QmU1iFV5xuvVPNhmzeY7Qi12wFiG47r3oF7rCX8C52MrC8"]}},"version":1},"version":1,"checkPoints":[]}