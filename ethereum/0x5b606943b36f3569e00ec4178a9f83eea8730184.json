{"address":"0x5b606943b36F3569E00EC4178A9f83eea8730184","name":"","metadata":{"compiler":{"version":"0.6.4+commit.1dca32f3"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_token_address","type":"address"},{"internalType":"address","name":"_secret_registry","type":"address"},{"internalType":"uint256","name":"_chain_id","type":"uint256"},{"internalType":"uint256","name":"_settlement_timeout_min","type":"uint256"},{"internalType":"uint256","name":"_settlement_timeout_max","type":"uint256"},{"internalType":"address","name":"_deprecation_executor","type":"address"},{"internalType":"uint256","name":"_channel_participant_deposit_limit","type":"uint256"},{"internalType":"uint256","name":"_token_network_deposit_limit","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"indexed":true,"internalType":"address","name":"closing_participant","type":"address"},{"indexed":true,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"balance_hash","type":"bytes32"}],"name":"ChannelClosed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"indexed":true,"internalType":"address","name":"participant","type":"address"},{"indexed":false,"internalType":"uint256","name":"total_deposit","type":"uint256"}],"name":"ChannelNewDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"indexed":true,"internalType":"address","name":"participant1","type":"address"},{"indexed":true,"internalType":"address","name":"participant2","type":"address"},{"indexed":false,"internalType":"uint256","name":"settle_timeout","type":"uint256"}],"name":"ChannelOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"participant1_amount","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"participant1_locksroot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"participant2_amount","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"participant2_locksroot","type":"bytes32"}],"name":"ChannelSettled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"bytes32","name":"locksroot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"unlocked_amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"returned_tokens","type":"uint256"}],"name":"ChannelUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"indexed":true,"internalType":"address","name":"participant","type":"address"},{"indexed":false,"internalType":"uint256","name":"total_withdraw","type":"uint256"}],"name":"ChannelWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"new_value","type":"bool"}],"name":"DeprecationSwitch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"indexed":true,"internalType":"address","name":"closing_participant","type":"address"},{"indexed":true,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"balance_hash","type":"bytes32"}],"name":"NonClosingBalanceProofUpdated","type":"event"},{"inputs":[],"name":"MAX_SAFE_UINT256","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chain_id","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"channel_counter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"channel_participant_deposit_limit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"channels","outputs":[{"internalType":"uint256","name":"settle_block_number","type":"uint256"},{"internalType":"enum TokenNetwork.ChannelState","name":"state","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"non_closing_participant","type":"address"},{"internalType":"address","name":"closing_participant","type":"address"},{"internalType":"bytes32","name":"balance_hash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"additional_hash","type":"bytes32"},{"internalType":"bytes","name":"non_closing_signature","type":"bytes"},{"internalType":"bytes","name":"closing_signature","type":"bytes"}],"name":"closeChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contract_address","type":"address"}],"name":"contractExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deprecate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deprecation_executor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"participant","type":"address"},{"internalType":"address","name":"partner","type":"address"}],"name":"getChannelIdentifier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"participant1","type":"address"},{"internalType":"address","name":"participant2","type":"address"}],"name":"getChannelInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"enum TokenNetwork.ChannelState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"participant","type":"address"},{"internalType":"address","name":"partner","type":"address"}],"name":"getChannelParticipantInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"participant","type":"address"},{"internalType":"address","name":"partner","type":"address"}],"name":"getParticipantsHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"receiver","type":"address"}],"name":"getUnlockIdentifier","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"participant1","type":"address"},{"internalType":"address","name":"participant2","type":"address"},{"internalType":"uint256","name":"settle_timeout","type":"uint256"}],"name":"openChannel","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"participants_hash_to_channel_identifier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"safety_deprecation_switch","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"secret_registry","outputs":[{"internalType":"contract SecretRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"participant","type":"address"},{"internalType":"uint256","name":"total_deposit","type":"uint256"},{"internalType":"address","name":"partner","type":"address"}],"name":"setTotalDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"participant","type":"address"},{"internalType":"uint256","name":"total_withdraw","type":"uint256"},{"internalType":"uint256","name":"expiration_block","type":"uint256"},{"internalType":"bytes","name":"participant_signature","type":"bytes"},{"internalType":"bytes","name":"partner_signature","type":"bytes"}],"name":"setTotalWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"participant1","type":"address"},{"internalType":"uint256","name":"participant1_transferred_amount","type":"uint256"},{"internalType":"uint256","name":"participant1_locked_amount","type":"uint256"},{"internalType":"bytes32","name":"participant1_locksroot","type":"bytes32"},{"internalType":"address","name":"participant2","type":"address"},{"internalType":"uint256","name":"participant2_transferred_amount","type":"uint256"},{"internalType":"uint256","name":"participant2_locked_amount","type":"uint256"},{"internalType":"bytes32","name":"participant2_locksroot","type":"bytes32"}],"name":"settleChannel","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"settlement_timeout_max","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"settlement_timeout_min","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"signature_prefix","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract Token","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token_network_deposit_limit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"locks","type":"bytes"}],"name":"unlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"channel_identifier","type":"uint256"},{"internalType":"address","name":"closing_participant","type":"address"},{"internalType":"address","name":"non_closing_participant","type":"address"},{"internalType":"bytes32","name":"balance_hash","type":"bytes32"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes32","name":"additional_hash","type":"bytes32"},{"internalType":"bytes","name":"closing_signature","type":"bytes"},{"internalType":"bytes","name":"non_closing_signature","type":"bytes"}],"name":"updateNonClosingBalanceProof","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"closeChannel(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)":{"params":{"additional_hash":"Computed from the message. Used for message authentication","balance_hash":"Hash of (transferred_amount, locked_amount, locksroot)","channel_identifier":"Identifier for the channel on which this operation takes place","closing_participant":"Channel participant who closes the channel","closing_signature":"Closing participant's signature of the balance proof data","non_closing_participant":"Channel partner of the `closing_participant`, who provided the balance proof","non_closing_signature":"Non-closing participant's signature of the balance proof data","nonce":"Strictly monotonic value used to order transfers"}},"constructor":{"params":{"_chain_id":"EIP-155 Chain ID of the blockchain where this instance is being deployed","_channel_participant_deposit_limit":"The maximum amount of tokens that can be deposited by each participant of each channel. MAX_SAFE_UINT256 means no limits","_deprecation_executor":"The Ethereum address that can disable new deposits and channel creation","_secret_registry":"The address of SecretRegistry contract that witnesses the onchain secret reveals","_settlement_timeout_max":"The longest settlement period (in number of blocks) that can be chosen at the channel opening","_settlement_timeout_min":"The shortest settlement period (in number of blocks) that can be chosen at the channel opening","_token_address":"The address of the ERC20 token contract","_token_network_deposit_limit":"The maximum amount of tokens that this contract can hold MAX_SAFE_UINT256 means no limits"}},"contractExists(address)":{"params":{"contract_address":"The address to check whether a contract is deployed or not"},"returns":{"_0":"True if a contract exists, false otherwise"}},"getChannelIdentifier(address,address)":{"params":{"participant":"Address of a channel participant","partner":"Address of the other channel participant"},"returns":{"_0":"Unique identifier for the channel. It can be 0 if channel does not exist"}},"getChannelInfo(uint256,address,address)":{"details":"Returns the channel specific data.","params":{"channel_identifier":"Identifier for the channel on which this operation takes place","participant1":"Address of a channel participant","participant2":"Address of the other channel participant"},"returns":{"_0":"Channel settle_block_number and state"}},"getChannelParticipantInfo(uint256,address,address)":{"details":"Returns the channel specific data.","params":{"channel_identifier":"Identifier for the channel on which this operation takes place","participant":"Address of the channel participant whose data will be returned","partner":"Address of the channel partner"},"returns":{"_0":"Participant's deposit, withdrawn_amount, whether the participant has called `closeChannel` or not, balance_hash, nonce, locksroot, locked_amount"}},"getParticipantsHash(address,address)":{"details":"Get the hash of the participant addresses, ordered lexicographically","params":{"participant":"Address of a channel participant","partner":"Address of the other channel participant"}},"getUnlockIdentifier(uint256,address,address)":{"details":"Get the hash of the channel identifier and the participant addresses (whose ordering matters). The hash might be useful for the receiver to look up the appropriate UnlockData to claim","params":{"channel_identifier":"Identifier for the channel which the UnlockData is about","receiver":"Receiver of the pending transfers that the UnlockData represents","sender":"Sender of the pending transfers that the UnlockData represents"}},"openChannel(address,address,uint256)":{"params":{"participant1":"Ethereum address of a channel participant","participant2":"Ethereum address of the other channel participant","settle_timeout":"Number of blocks that need to be mined between a call to closeChannel and settleChannel"}},"setTotalDeposit(uint256,address,uint256,address)":{"params":{"channel_identifier":"Identifier for the channel on which this operation takes place","participant":"Channel participant whose deposit is being set","partner":"Channel partner address, needed to compute the total channel deposit","total_deposit":"The total amount of tokens that the participant will have as a deposit"}},"setTotalWithdraw(uint256,address,uint256,uint256,bytes,bytes)":{"params":{"channel_identifier":"Identifier for the channel on which this operation takes place","participant":"Channel participant, who will receive the withdrawn amount","participant_signature":"Participant's signature on the withdraw data","partner_signature":"Partner's signature on the withdraw data","total_withdraw":"Total amount of tokens that are marked as withdrawn from the channel during the channel lifecycle"}},"settleChannel(uint256,address,uint256,uint256,bytes32,address,uint256,uint256,bytes32)":{"params":{"channel_identifier":"Identifier for the channel on which this operation takes place","participant1":"Channel participant","participant1_locked_amount":"Amount of tokens owed by `participant1` to `participant2`, contained in locked transfers that will be retrieved by calling `unlock` after the channel is settled","participant1_locksroot":"The latest known hash of the pending hash-time locks of `participant1`, used to validate the unlocked proofs. If no balance_hash has been submitted, locksroot is ignored","participant1_transferred_amount":"The latest known amount of tokens transferred from `participant1` to `participant2`","participant2":"Other channel participant","participant2_locked_amount":"Amount of tokens owed by `participant2` to `participant1`, contained in locked transfers that will be retrieved by calling `unlock` after the channel is settled","participant2_locksroot":"The latest known hash of the pending hash-time locks of `participant2`, used to validate the unlocked proofs. If no balance_hash has been submitted, locksroot is ignored","participant2_transferred_amount":"The latest known amount of tokens transferred from `participant2` to `participant1`"}},"unlock(uint256,address,address,bytes)":{"params":{"channel_identifier":"Identifier for the channel on which this operation takes place","locks":"All pending locks concatenated in order of creation that `sender` sent to `receiver`","receiver":"Address who will receive the claimable unlocked tokens","sender":"Address who sent the pending transfers and will receive the unclaimable unlocked tokens"}},"updateNonClosingBalanceProof(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)":{"params":{"additional_hash":"Computed from the message. Used for message authentication","balance_hash":"Hash of (transferred_amount, locked_amount, locksroot)","channel_identifier":"Identifier for the channel on which this operation takes place","closing_participant":"Channel participant who closed the channel","closing_signature":"Closing participant's signature of the balance proof data","non_closing_participant":"Channel participant who needs to update the balance proof","non_closing_signature":"Non-closing participant signature of the balance proof data","nonce":"Strictly monotonic value used to order transfers"}}},"title":"TokenNetwork"},"userdoc":{"methods":{"closeChannel(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)":{"notice":"Close the channel defined by the two participant addresses. Anybody can call this function on behalf of a participant (called the closing participant), providing a balance proof signed by both parties. Callable only once"},"contractExists(address)":{"notice":"Check if a contract exists"},"getChannelIdentifier(address,address)":{"notice":"Returns the unique identifier for the channel given by the contract"},"getChannelInfo(uint256,address,address)":{"notice":"The contract cannot really distinguish Settled and Removed states, especially when wrong participants are given as input. The contract does not remember the participants of the channel"},"openChannel(address,address,uint256)":{"notice":"Opens a new channel between `participant1` and `participant2`. Can be called by anyone"},"setTotalDeposit(uint256,address,uint256,address)":{"notice":"Sets the channel participant total deposit value. Can be called by anyone."},"setTotalWithdraw(uint256,address,uint256,uint256,bytes,bytes)":{"notice":"Allows `participant` to withdraw tokens from the channel that he has with `partner`, without closing it. Can be called by anyone. Can only be called once per each signed withdraw message"},"settleChannel(uint256,address,uint256,uint256,bytes32,address,uint256,uint256,bytes32)":{"notice":"Settles the balance between the two parties. Note that arguments order counts: `participant1_transferred_amount + participant1_locked_amount` <= `participant2_transferred_amount + participant2_locked_amount`"},"unlock(uint256,address,address,bytes)":{"notice":"Unlocks all pending off-chain transfers from `sender` to `receiver` and sends the locked tokens corresponding to locks with secrets registered on-chain to the `receiver`. Locked tokens corresponding to locks where the secret was not revealed on-chain will return to the `sender`. Anyone can call unlock."},"updateNonClosingBalanceProof(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)":{"notice":"Called on a closed channel, the function allows the non-closing participant to provide the last balance proof, which modifies the closing participant's state. Can be called multiple times by anyone."}},"notice":"Stores and manages all the Raiden Network channels that use the token specified in this TokenNetwork contract."}},"settings":{"compilationTarget":{"data/source/raiden/TokenNetwork.sol":"TokenNetwork"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[":.=.",":lib=data/source/lib",":raiden=data/source/raiden",":services=data/source/services",":test=data/source/test"]},"sources":{"data/source/lib/ECVerify.sol":{"keccak256":"0x5d52accf83a9350c303d2195339280cbeb859d2c2e1d52fe21b588d446a7b6da","urls":["bzz-raw://b353d547998a37b0e74850b1d9be63344f601f9f412c0888abdb929b03d3ee4f","dweb:/ipfs/Qmca4bLFHGkJM2cXdejitp2oowZ1iVgLopQjoF13pBz71r"]},"data/source/raiden/SecretRegistry.sol":{"keccak256":"0xb3003341c597d5c7d12e59266ce3982b91d5e973533f69dfb0d8c774a9201e83","urls":["bzz-raw://54b56725d4ef15a03c2297a64540bb59449e646add51686a1de422581422af82","dweb:/ipfs/QmaZpnLzgLWkrUKPBedXruxEZxVTKZyWehfTtXxeG739eW"]},"data/source/raiden/Token.sol":{"keccak256":"0x0303b56024448cc6630edba30ee46c24506e59eae4c34eb9b2ad5ce0d6875754","urls":["bzz-raw://5df44e03dbd72c88dffc87647ddbfac256ba2292137ef07c437af2afc39ae58d","dweb:/ipfs/QmXiKVowMFKVPcyM8SojseFibuBoafnogLKszCaa5vvBpV"]},"data/source/raiden/TokenNetwork.sol":{"keccak256":"0xc0bac16b34d0a14fef3ee6ccae28ba55a0d2b164eb1435df3bc50240f4017f0b","urls":["bzz-raw://ca004b1c3b324bb4fa15bb4782afd34e56f2a0be49859082a1eeeade6ae42650","dweb:/ipfs/QmQUBiujhLizbintdQkjxFNRqekTM26KYsePDL7pmkcM9j"]},"data/source/raiden/Utils.sol":{"keccak256":"0x77283c23fd1ab314b8a772a040c0dd0f90c87c373a7b160a5f1accc016ebb6ad","urls":["bzz-raw://ffc004e12d718d5ab923e9633e6108c5fd82211cbd4198d31c26e2bca0094d77","dweb:/ipfs/QmViRSTtD8zhQhfpmFnvigirSXc3J3RZb3whpVDBD3RBQ5"]}},"version":1},"version":1,"checkPoints":[]}