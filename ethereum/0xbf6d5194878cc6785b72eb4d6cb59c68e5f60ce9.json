{"address":"0xBf6D5194878cC6785B72EB4D6Cb59c68E5f60CE9","name":"","metadata":{"compiler":{"version":"0.6.11+commit.5ef660b1"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"priorTimestamp","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"messageTimestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"blockTimestamp","type":"uint256"}],"name":"NotWritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"source","type":"address"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"uint64","name":"timestamp","type":"uint64"},{"indexed":false,"internalType":"uint64","name":"value","type":"uint64"}],"name":"Write","type":"event"},{"inputs":[{"internalType":"address","name":"source","type":"address"},{"internalType":"string","name":"key","type":"string"}],"name":"get","outputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"source","type":"address"},{"internalType":"string","name":"key","type":"string"}],"name":"getPrice","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"put","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"source","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"}],"devdoc":{"author":"Compound Labs, Inc.","kind":"dev","methods":{"get(address,string)":{"params":{"key":"The selector for the value to return","source":"The verifiable author of the data"},"returns":{"_0":"The claimed Unix timestamp for the data and the price value (defaults to (0, 0))"}},"getPrice(address,string)":{"params":{"key":"The selector for the value to return","source":"The verifiable author of the data"},"returns":{"_0":"The price value (defaults to 0)"}},"put(bytes,bytes)":{"params":{"message":"The payload containing the timestamp, and (key, value) pairs","signature":"The cryptographic signature of the message payload, authorizing the source to write"},"returns":{"_0":"The keys that were written"}},"source(bytes,bytes)":{"details":"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.","params":{"message":"The data that was presumably signed","signature":"The fingerprint of the data + private key"},"returns":{"_0":"The source address which signed the message, presumably"}}},"stateVariables":{"data":{"details":"The most recent authenticated data from all sources.  This is private because dynamic mapping keys preclude auto-generated getters."}},"title":"The Open Oracle Price Data Contract","version":1},"userdoc":{"events":{"NotWritten(uint64,uint256,uint256)":{"notice":"The event emitted when the timestamp on a price is invalid and it is not written to storage"},"Write(address,string,uint64,uint64)":{"notice":"The event emitted when a source writes to its storage"}},"kind":"user","methods":{"get(address,string)":{"notice":"Read a single key from an authenticated source"},"getPrice(address,string)":{"notice":"Read only the value for a single key from an authenticated source"},"put(bytes,bytes)":{"notice":"Write a bunch of signed datum to the authenticated storage mapping"},"source(bytes,bytes)":{"notice":"Recovers the source address which signed a message"}},"notice":"Values stored in this contract should represent a USD price with 6 decimals precision","version":1}},"settings":{"compilationTarget":{"oraclePrice.sol":"OpenOraclePriceData"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"oraclePrice.sol":{"keccak256":"0x9439cf1c00d99596462d7b2fee0ca826166c35df800238e735d85a5701094207","license":"GPL-3.0","urls":["bzz-raw://77a2a80db702e3b4aa41c100cb2cb972e18849aebfe3afefb87eb504ef7a4f02","dweb:/ipfs/QmUppUKo66rGaNCrJPiZCR6v89a7HF3eN8LQhFKGT5SCWs"]}},"version":1},"version":1,"checkPoints":[]}