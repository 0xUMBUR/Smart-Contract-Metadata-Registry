{"address":"0xc94Fc462e8fe00e8913730a167dcB9d7430D8B15","name":"","metadata":{"compiler":{"version":"0.8.4+commit.c7e474f2"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"payable","type":"constructor"},{"inputs":[],"name":"InvalidState","type":"error"},{"inputs":[],"name":"OnlyBuyer","type":"error"},{"inputs":[],"name":"OnlySeller","type":"error"},{"inputs":[],"name":"ValueNotEven","type":"error"},{"anonymous":false,"inputs":[],"name":"Aborted","type":"event"},{"anonymous":false,"inputs":[],"name":"ItemReceived","type":"event"},{"anonymous":false,"inputs":[],"name":"PurchaseConfirmed","type":"event"},{"anonymous":false,"inputs":[],"name":"SellerRefunded","type":"event"},{"inputs":[],"name":"abort","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"buyer","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"confirmPurchase","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"confirmReceived","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"refundSeller","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"seller","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"state","outputs":[{"internalType":"enum Purchase.State","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"value","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"errors":{"InvalidState()":[{"notice":"The function cannot be called at the current state."}],"OnlyBuyer()":[{"notice":"Only the buyer can call this function."}],"OnlySeller()":[{"notice":"Only the seller can call this function."}],"ValueNotEven()":[{"notice":"The provided value has to be even."}]},"kind":"user","methods":{"abort()":{"notice":"Abort the purchase and reclaim the ether. Can only be called by the seller before the contract is locked."},"confirmPurchase()":{"notice":"Confirm the purchase as buyer. Transaction has to include `2 * value` ether. The ether will be locked until confirmReceived is called."},"confirmReceived()":{"notice":"Confirm that you (the buyer) received the item. This will release the locked ether."},"refundSeller()":{"notice":"This function refunds the seller, i.e. pays back the locked funds of the seller."}},"version":1}},"settings":{"compilationTarget":{"tests/safe_remote_purchase.sol":"Purchase"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"tests/safe_remote_purchase.sol":{"keccak256":"0x825e5a2ecfae3e25709b400977bdce45daa78cfc7532630b9a6f7e70563754f7","license":"GPL-3.0","urls":["bzz-raw://8362ba0aafb89162866bc669299b55cf867b1f180a8cdc9c0549f7ef9d4b9b20","dweb:/ipfs/QmWTGUg1vS1pkC85Cx5qRByYsyLUVJuz9RhZ4g7UHeWtTX"]}},"version":1},"version":1,"checkPoints":[]}