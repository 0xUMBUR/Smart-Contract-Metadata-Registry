{"address":"0x9558d5D258866f814e7a4190262A9255f5ACdcD9","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"hash","type":"bytes32"},{"indexed":false,"internalType":"string","name":"description","type":"string"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"proofId","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"ProofAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"proofId","type":"uint256"},{"indexed":false,"internalType":"address","name":"confirmer","type":"address"}],"name":"ProofConfirmed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"CONFIRM_WHITELISTED","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROOF_WHITELISTED","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"addConfirmation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes32","name":"proofHash","type":"bytes32"},{"internalType":"string","name":"description","type":"string"}],"name":"addProof","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"batchGrantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"deleteProof","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getProofConfirmationCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getProofData","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"proofHash","type":"bytes32"}],"name":"getProofIdByHash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"confirmer","type":"address"}],"name":"isConfirmedBy","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"addConfirmation(uint256)":{"details":"Adds a confirmation to a proof. Address needs to be whitelisted for it. Can only confirm once.","params":{"tokenId":"uint256 id of the ERC721 token"}},"addProof(address,bytes32,string)":{"details":"Mints a new token and adds provided metadata","params":{"description":"string description of the proof","proofHash":"bytes32 the proof has to store. Must not be 0 or already exist."},"returns":{"_0":"uint256 id of the new proof/token"}},"approve(address,uint256)":{"details":"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.","params":{"to":"address to be approved for the given token ID","tokenId":"uint256 ID of the token to be approved"}},"balanceOf(address)":{"details":"Gets the balance of the specified address.","params":{"owner":"address to query the balance of"},"returns":{"_0":"uint256 representing the amount owned by the passed address"}},"batchGrantRole(bytes32,address[])":{"details":"Batch role assignment","params":{"accounts":"address[] array of recipients of the role","role":"bytes32 The role to grant"}},"deleteProof(uint256)":{"details":"Burns a specific ERC721 token.","params":{"tokenId":"uint256 id of the ERC721 token to be burned."}},"getApproved(uint256)":{"details":"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.","params":{"tokenId":"uint256 ID of the token to query the approval of"},"returns":{"_0":"address currently approved for the given token ID"}},"getProofConfirmationCount(uint256)":{"details":"Returns number of confirmations of a proof","params":{"tokenId":"uint256 id of the ERC721 token."},"returns":{"_0":"uint256 number of confirmations on the proof"}},"getProofData(uint256)":{"details":"Returns metadata of a proof","params":{"tokenId":"uint256 id of the ERC721 token."},"returns":{"_0":"(bytes32, uint256, string memory)(bytes32, uint256, string) hash, timestamp, description of the proof"}},"getProofIdByHash(bytes32)":{"details":"Finds ID of a proof by its hash.","params":{"proofHash":"bytes32 the proof hash the find."},"returns":{"_0":"uint256 token ID. 0 if it does not exist."}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.      * To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.      * Role bearers are not sorted in any particular way, and their ordering may change at any point.      * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`.      * If `account` had not been already granted `role`, emits a {RoleGranted} event.      * Requirements:      * - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isApprovedForAll(address,address)":{"details":"Tells whether an operator is approved by a given owner.","params":{"operator":"operator address which you want to query the approval of","owner":"owner address which you want to query the approval of"},"returns":{"_0":"bool whether the given operator is approved by the given owner"}},"isConfirmedBy(uint256,address)":{"details":"Check whether an address confirmed given proof","params":{"confirmer":"address the address being inquired about","tokenId":"uint256 id of the ERC721 token"},"returns":{"_0":"bool true if address confirmed proof with tokenId"}},"ownerOf(uint256)":{"details":"Gets the owner of the specified token ID.","params":{"tokenId":"uint256 ID of the token to query the owner of"},"returns":{"_0":"address currently marked as the owner of the given token ID"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account.      * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).      * If the calling account had been granted `role`, emits a {RoleRevoked} event.      * Requirements:      * - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`.      * If `account` had been granted `role`, emits a {RoleRevoked} event.      * Requirements:      * - the caller must have ``role``'s admin role."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator","params":{"_data":"bytes data to send along with a safe transfer check","from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}},"setApprovalForAll(address,bool)":{"details":"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.","params":{"approved":"representing the status of the approval to be set","operator":"operator address to set the approval"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}.      * Time complexity O(1), guaranteed to always use less than 30 000 gas."},"tokenByIndex(uint256)":{"details":"Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.","params":{"index":"uint256 representing the index to be accessed of the tokens list"},"returns":{"_0":"uint256 token ID at the given index of the tokens list"}},"tokenOfOwnerByIndex(address,uint256)":{"details":"Gets the token ID at a given index of the tokens list of the requested owner.","params":{"index":"uint256 representing the index to be accessed of the requested tokens list","owner":"address owning the tokens list to be accessed"},"returns":{"_0":"uint256 token ID at the given index of the tokens list owned by the requested address"}},"totalSupply()":{"details":"Gets the total amount of tokens stored by the contract.","returns":{"_0":"uint256 representing the total amount of tokens"}},"transferFrom(address,address,uint256)":{"details":"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.","params":{"from":"current owner of the token","to":"address to receive the ownership of the given token ID","tokenId":"uint256 ID of the token to be transferred"}}},"title":"Proof of existence by storing hashes. Based on ERC721. The proof record is an ERC721 token, therefore it is referred to as token or proof."},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"localhost/VerifiedExistence/VerifiedExistenceFlat.sol":"VerifiedExistence"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"localhost/VerifiedExistence/VerifiedExistenceFlat.sol":{"keccak256":"0x97dd3537bd3a6f999b032f1465b7498f501358cf1997e27238178f6f196b4026","urls":["bzz-raw://53b0c6e56e46c1fa7dd585c97355b67e0a3c1b405a1ee637e334570fbe02fd29","dweb:/ipfs/QmaNWWCcPT3Vno1tavgH7QbooZPQKN2cKAeW3zC3ZXxSkF"]}},"version":1},"version":1,"checkPoints":[]}