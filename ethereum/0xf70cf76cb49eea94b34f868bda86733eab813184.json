{"address":"0xF70cF76cb49EeA94B34F868BDa86733EaB813184","name":"","metadata":{"compiler":{"version":"0.6.2+commit.bacdbe57"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint256","name":"cap","type":"uint256"},{"internalType":"uint256","name":"initialSupply","type":"uint256"},{"internalType":"bool","name":"transferEnabled","type":"bool"},{"internalType":"bool","name":"mintingFinished","type":"bool"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address payable","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address payable","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[],"name":"TransferEnabled","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RATE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"changeCrowdsaleRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finishCrowdsale","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finishMinting","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"mintingFinished","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"recoverERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transferEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"Implementation of the BaseToken","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."},"approveAndCall(address,uint256)":{"details":"Approve spender to transfer tokens and then execute a callback on recipient.","params":{"spender":"The address allowed to transfer to","value":"The amount allowed to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"approveAndCall(address,uint256,bytes)":{"details":"Approve spender to transfer tokens and then execute a callback on recipient.","params":{"data":"Additional data with no specified format.","spender":"The address allowed to transfer to.","value":"The amount allowed to be transferred."},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller.     * See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance.     * See {ERC20-_burn} and {ERC20-allowance}.     * Requirements:     * - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"cap()":{"details":"Returns the cap on the token's total supply."},"constructor":{"params":{"cap":"Maximum number of tokens mintable","decimals":"Number of decimals. All the operations are done using the smallest and indivisible token unit","initialSupply":"Initial token supply","mintingFinished":"If minting is finished after token creation","name":"Name of the token","symbol":"A symbol to be used as ticker","transferEnabled":"If transfer is enabled on token creation"}},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"enableTransfer()":{"details":"Function to enable transfers."},"finishMinting()":{"details":"Function to stop minting new tokens."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."},"mint(address,uint256)":{"details":"Function to mint tokens.","params":{"to":"The address that will receive the minted tokens","value":"The amount of tokens to mint"}},"name()":{"details":"Returns the name of the token."},"owner()":{"details":"Returns the address of the current owner."},"recoverERC20(address,uint256)":{"details":"Remember that only owner can call so be careful when use on contracts generated from other contracts.","params":{"tokenAddress":"The token contract address","tokenAmount":"Number of tokens to be sent"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 3000000 gas."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"Transfer tokens to a specified address.","params":{"to":"The address to transfer to","value":"The amount to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferAndCall(address,uint256)":{"details":"Transfer tokens to a specified address and then execute a callback on recipient.","params":{"to":"The address to transfer to.","value":"The amount to be transferred."},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferAndCall(address,uint256,bytes)":{"details":"Transfer tokens to a specified address and then execute a callback on recipient.","params":{"data":"Additional data with no specified format","to":"The address to transfer to","value":"The amount to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFrom(address,address,uint256)":{"details":"Transfer tokens from one address to another.","params":{"from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"the amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFromAndCall(address,address,uint256)":{"details":"Transfer tokens from one address to another and then execute a callback on recipient.","params":{"from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"The amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Transfer tokens from one address to another and then execute a callback on recipient.","params":{"data":"Additional data with no specified format","from":"The address which you want to send tokens from","to":"The address which you want to transfer to","value":"The amount of tokens to be transferred"},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"BaseToken"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"contracts/BaseToken.sol":"BaseToken"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/BaseToken.sol":{"keccak256":"0x2e47d29f9fe73d4ede8ef753271da5698434797906cd2c0643ffb9acf8b8de92","urls":["bzz-raw://131c752352f9f71318895693babd2709a91e501fc744efb74d4adff9de8a69c3","dweb:/ipfs/QmZuHfZMaRJpnDtoMDVtgXWy397Uq5BkKh2C52YTiqXrkW"]},"contracts/GSN/Context.sol":{"keccak256":"0xc9ee5c596e5d961a1c0e24b32d1d0143bcae30fba182acff209b40e887db7fce","urls":["bzz-raw://68aee61e9c893d09674f5b44a138286bcdc4e155ec117ef5118e6b7c673522d7","dweb:/ipfs/QmQvRgctoB8TxrRpsBhWfLSh4S6CvMkeDjGSMDZtN4cYtR"]},"contracts/access/AccessControl.sol":{"keccak256":"0x8cb8869c2b4c3a272e8d73b8c6505cee1b0896110e709e24ddd2a1d8a0efee77","urls":["bzz-raw://769ede5a51e9f5b02b2f290d61383d70c83de1fea06d4ca2f93f3df88f3c74a9","dweb:/ipfs/QmXigLeg2GJytYdgGhJAg39ZxDhBRrN8hph6mpkPpfP8p9"]},"contracts/access/Ownable.sol":{"keccak256":"0xb22339808139f2911379d88940c06f8df98d1604113535828ea9a28f5679bb96","urls":["bzz-raw://da89916300bf01b17e0270af59d8a92a3d85c96a6dc8d4b864f9708dd121b48b","dweb:/ipfs/QmSiT3vSFTXttDK1tW7muzRMdKMTaudT7K7RMyFQe3e9JA"]},"contracts/access/Roles.sol":{"keccak256":"0x68b2f6e15c4cf748609e0f1f51a412cabce0215d732becda1397158a413bce96","urls":["bzz-raw://6c7526fa3cd0008372cde6faea5522b0fcf6627fcd34528e8510bca47d893ebd","dweb:/ipfs/QmNqUmeW7gcjnsCCyNJAGaBkhD6AQcvtAWoRX7LgioMp95"]},"contracts/eth-token-recover/contracts/TokenRecover.sol":{"keccak256":"0x794394466eedf77bf1ab7bcf914819a61274adf6d899d10d559d048d799e91ca","urls":["bzz-raw://399632c95dd318f5e82f1315cd94c2af9ab391654c576be4d4a1694bf6c8d4ff","dweb:/ipfs/QmPhkLr3Ni2mMoeWczjhkH3geutwwdG6bCSm3haTRJBX6E"]},"contracts/introspection/ERC165.sol":{"keccak256":"0x4ccb36352d061391a50a31c0c04f423f33dc746f903ce18491bc32132d609736","urls":["bzz-raw://ecc61b11149134abdb9ebf75ad9135e025a8d05f9aaf6b3c2bccc840a72f6312","dweb:/ipfs/QmaF5bBDyaPZuND2xRnU1Dc1N9icuzrS35BKsZw7fQLWd5"]},"contracts/introspection/IERC165.sol":{"keccak256":"0x5ce4ffd47149a924465cd32f903c8b8893c6b7e5d60d43564f6be8578d94925c","urls":["bzz-raw://400b72e8c11e8824f2b2440d4d17598ab7b5539875331da21db6bb5ecfd76034","dweb:/ipfs/QmNnF6jx2Fh9K3P3wexoBYKAiowk3YMXioE1WjAimrskgJ"]},"contracts/math/SafeMath.sol":{"keccak256":"0x9efb2bb65daca0d37f951703fbea21e10cf35f6f522d9828507ab4641b0b5546","urls":["bzz-raw://093479e188b82af5f002934142fdb46ea2d73cc4f21b0967d44a537ee383ca85","dweb:/ipfs/Qmf6mBKm69ENACpeBSQs1YTXfuQEZosXucGJa5qHUAbPN9"]},"contracts/token/ERC1363/ERC1363.sol":{"keccak256":"0x14f23aaa5524cc2c01318642cb8472552e29e75d0367a3058d2137042c9ea639","urls":["bzz-raw://e443a36325650094c43604ee845568b9c394352318ebcb1ae3b5e3598b9ab69b","dweb:/ipfs/QmYJGb9kHaq9uExy9TyMLrej7Ug3qBfD8RBdyELNqSaoib"]},"contracts/token/ERC1363/IERC1363.sol":{"keccak256":"0x883df05619fc33120465324df6d1ae57491f3538e92c1b8bb0eaefccc3de0aa9","urls":["bzz-raw://c378452f994444ea5266bd41aa8372000977081e5ececb6c760ce62af60c01c3","dweb:/ipfs/QmaYrbMsiECgKe59HZY5N8b6YcSiHo6g9RzphZkRqVW1oy"]},"contracts/token/ERC1363/IERC1363Receiver.sol":{"keccak256":"0x971a5828a5a7863665d727ed2fe72d0594f69000a47983d9782ffd1ba3d17b43","urls":["bzz-raw://34ebb4d131480dac5c4194c650080f225d591a5fec1b8b01c806866a309c186f","dweb:/ipfs/QmXrLHrspLrMNgggdby7oy4Tt9PdZtVNGNQVxoDTL8N7UY"]},"contracts/token/ERC1363/IERC1363Spender.sol":{"keccak256":"0xce49ca8abd7893c865e63ef9f61479ef3f0e34b2503731d9032df378dc1175ce","urls":["bzz-raw://cc224734f4b288f1e0a11946f2070b835078945e20673a17037b17aede48acf2","dweb:/ipfs/QmS5Phwe7pRodtdjdzMEjbAcZFSz1iMKgdVkQ3gBHJyTMg"]},"contracts/token/ERC20/ERC20.sol":{"keccak256":"0x3e25436e33c3ce0f8e4b4767e2b0aa4eb4be2c414e888c5ea0bb82f1d2c3fa25","urls":["bzz-raw://8ad3b8017c5f344bd8dd9fe5b2ab3c8db7bbc5cee3d2ceb710fbbbea7f33889a","dweb:/ipfs/QmVb9V2dTKic2jJXC8iwC3LjbF7FeiLVV9mnQYa64T1pP2"]},"contracts/token/ERC20/ERC20Burnable.sol":{"keccak256":"0xdb6bc155d6e10133bb3badbd3f7821c86b45d3c6c525aca17e90adb9a274e27f","urls":["bzz-raw://2845cb304f6c27a538c9d5e2069fe408b85bc08741711a7fb642686ebbf7620f","dweb:/ipfs/QmY6dobeJUDhQe7xqNoZTRD2zVwRN9m2EQpbKhdNqQP1dU"]},"contracts/token/ERC20/ERC20Capped.sol":{"keccak256":"0x210b69238cce3629bca329e9ad0348b5c70c207ce114b7c03cf45cbb5eca334c","urls":["bzz-raw://4a84672b6f3aa0a655a5c3f48830768e9c5e48dd684c4555f60cf7b21f2bbb13","dweb:/ipfs/QmeD4ojPKR3PgC28TjWZgc3Lg6GmErVwhFNTTSsRczFWZT"]},"contracts/token/ERC20/IERC20.sol":{"keccak256":"0xa0b86ac0ae54393494d9ea42c27a4495428daf673f61c2177809e4d2f3b4eaf4","urls":["bzz-raw://27bce85a40b283d500f20405f5c10ef44c1a725f983229e8126c60ed23df6fb3","dweb:/ipfs/QmXZ49QtC98b9Fa9UR7GLBHL7Ay8Nrw8Hn7dKqkTbUVCx7"]},"contracts/utils/Address.sol":{"keccak256":"0x023e7808dc91257ebf7541143515fe2640b7e79d5bc476b496f659365c374c34","urls":["bzz-raw://a22d72b44c1a305c16659ad60ecd14dee67ae35c164c74247622f729e3170d7d","dweb:/ipfs/QmQsdgjhiayVoQPRBXtGyfjqhvQ86guYHTprBX2F3ZNNor"]},"contracts/utils/EnumerableSet.sol":{"keccak256":"0x88527471b1fca2fb31afc3a60914e6b41dac489b4ea4e8882d808609e695463a","urls":["bzz-raw://a50226fdaf6df78acbed37ade8cb2edd24083bf61f1ca1b0edaab0f9e469df18","dweb:/ipfs/QmePEx7of3HbuMHFFwvyKMfZtywTA6Uqq4kWHYZ8fSKUZR"]}},"version":1},"version":1,"checkPoints":[]}