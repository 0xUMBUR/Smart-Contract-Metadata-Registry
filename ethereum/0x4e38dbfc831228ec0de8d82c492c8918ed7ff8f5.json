{"address":"0x4e38DBfc831228EC0dE8d82C492c8918Ed7fF8f5","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"usdwei","type":"uint256"},{"internalType":"address payable","name":"wallet","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"tokenSalePrice","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"purchaser","type":"address"},{"indexed":true,"internalType":"address","name":"beneficiary","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensPurchased","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"uint256","name":"weiAmount","type":"uint256"}],"name":"_getTokenAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_tokenprice_in_cents","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_usdwei","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_wallet","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"beneficiary","type":"address"}],"name":"buyTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSaleActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenprice_in_cents","type":"uint256"}],"name":"updateTokenSalePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"usdwei","type":"uint256"}],"name":"updateUSDWeiRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"weiRaised","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"Crowdsale is a base contract for managing a token crowdsale, allowing investors to purchase tokens with ether. This contract implements such functionality in its most fundamental form and can be extended to provide additional functionality and/or custom behavior. The external interface represents the basic interface for purchasing tokens, and conforms the base architecture for crowdsales. It is *not* intended to be modified / overridden. The internal interface conforms the extensible and modifiable surface of crowdsales. Override the methods to add functionality. Consider using 'super' where appropriate to concatenate behavior.","events":{"TokensPurchased(address,address,uint256,uint256)":{"params":{"amount":"amount of tokens purchased","beneficiary":"who got the tokens","purchaser":"who paid for the tokens","value":"weis paid for purchase"}}},"kind":"dev","methods":{"_getTokenAmount(uint256)":{"details":"Override to extend the way in which ether is converted to tokens.","params":{"weiAmount":"Value in wei to be converted into tokens"},"returns":{"_0":"Number of tokens that can be purchased with the specified _weiAmount"}},"buyTokens(address)":{"details":"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.","params":{"beneficiary":"Recipient of the token purchase"}},"constructor":{"params":{"token":"Address of the token being sold","tokenSalePrice":"price of 1 token in USD cents, e.g. 90 = $0.90","usdwei":"Wei price of 1 USD","wallet":"Address where collected funds will be forwarded to"}},"isOwner()":{"returns":{"_0":"true if `msg.sender` is the owner of the contract."}},"owner()":{"returns":{"_0":"the address of the owner."}},"renounceOwnership()":{"details":"Allows the current owner to relinquish control of the contract."},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"newOwner":"The address to transfer ownership to."}},"updateTokenSalePrice(uint256)":{"params":{"tokenprice_in_cents":"Price of one token in USD cents"}},"updateUSDWeiRate(uint256)":{"params":{"usdwei":"Wei price of 1 USD"}}},"title":"Crowdsale","version":1},"userdoc":{"events":{"TokensPurchased(address,address,uint256,uint256)":{"notice":"Event for token purchase logging"}},"kind":"user","methods":{"isSaleActive()":{"notice":"Returns 'true' if there are tokens left in the allowance."},"renounceOwnership()":{"notice":"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."}},"version":1}},"settings":{"compilationTarget":{"browser/IAmTokenPresale.sol":"Crowdsale"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/IAmTokenPresale.sol":{"keccak256":"0x2077203fcac878aac132228dda9726d7f13bc964c14782729bf4559a5226b229","license":"MIT","urls":["bzz-raw://20411e5a22e8750de41cec1b072b7665a5704ee5ac72351554cd7d4dc3d82786","dweb:/ipfs/QmRepkCY9UKMczCA71feP2C4di4kyCaDEyUUZC4zrpNBu8"]}},"version":1},"version":1,"checkPoints":[]}