{"address":"0x9a970C0f93E27AAC2b7859d4D741174549E92B36","name":"","metadata":{"compiler":{"version":"0.8.5+commit.a4f2e591"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Guillaume Gonnaud 2021","kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"_id":"ID of the token","_owner":"The address of the token holder"},"returns":{"_0":"The _owner's balance of the token type requested"}},"balanceOfBatch(address[],uint256[])":{"params":{"_ids":"ID of the tokens","_owners":"The addresses of the token holders"},"returns":{"_0":"The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)"}},"constructor":{"details":"Please change the values in here if you want more specific values, or make the constructor takes arguments"},"isApprovedForAll(address,address)":{"params":{"_operator":"Address of authorized operator","_owner":"The owner of the tokens"},"returns":{"_0":"True if the operator is approved, false if not"}},"mint(uint256,uint256)":{"params":{"_id":"The tokens ID","_value":"Minted amount"}},"mint(uint256[],uint256[])":{"params":{"_ids":"The tokens IDs","_values":"Minted amounts. length must match _ids"}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error.         MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).                      ","params":{"_data":"Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`","_from":"Source address","_ids":"IDs of each token type (order and length must match _values array)","_to":"Target address","_values":"Transfer amounts per token type (order and length must match _ids array)"}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. UST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).        ","params":{"_data":"Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`","_from":"Source address","_id":"ID of the token type","_to":"Target address","_value":"Transfer amount"}},"setApprovalForAll(address,bool)":{"details":"MUST emit the ApprovalForAll event on success.","params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"supportsInterface(bytes4)":{"details":"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.","params":{"interfaceID":"The interface identifier, as specified in ERC-165"},"returns":{"_0":"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"}}},"title":"ERC1155 Generic placeholder smart contract for testing and ABI","version":1},"userdoc":{"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Get the balance of an account's tokens."},"balanceOfBatch(address[],uint256[])":{"notice":"Get the balance of multiple account/token pairs"},"constructor":{"notice":"Constructor"},"isApprovedForAll(address,address)":{"notice":"Queries the approval status of an operator for a given owner."},"mint(uint256,uint256)":{"notice":"Mint tokens for message.sender"},"mint(uint256[],uint256[])":{"notice":"Mint tokens for message.sender"},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call)."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call)."},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens."},"supportsInterface(bytes4)":{"notice":"Query if a contract implements an interface"}},"version":1}},"settings":{"compilationTarget":{"src/contracts/tokens/ERC1155Generic.sol":"ERC1155Generic"},"evmVersion":"berlin","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"src/contracts/tokens/ERC1155Generic.sol":{"keccak256":"0x972af051210524fbb07579fca958e0b307bc0db9ff35766094d9a5975c359fe4","license":"UNLICENSED","urls":["bzz-raw://77966a20ba100de4e7d229e59db0250957d85972da47bbb9aa0232d9aefe4509","dweb:/ipfs/QmWQRXXBpB5wm2XtRvdnPXTd82QAtY7ypRvSA49NdTJ4YD"]},"src/contracts/tokens/IERC1155.sol":{"keccak256":"0xd62fa1aeac6f6f5da24e535ea3bd5488ce276a439719687682d6276294781a92","license":"CC0-1.0","urls":["bzz-raw://35bbccb4e7f8b70814910bf77fc3ac173c0459061b4f624d31f9389d0561e33c","dweb:/ipfs/QmckhMQnCP8Zgzw3vokDgtjKzACJxR5UBM2KGH1sQq6TtN"]},"src/contracts/tokens/IERC1155TokenReceiver.sol":{"keccak256":"0xbd64dad981afd878f7322986edbd4c0d62e15d6a33b19899d87409ad2d56ed86","license":"CC0-1.0","urls":["bzz-raw://eb1d780c7ad9b7e3e518e82f12de0780b0089cd6c3b12447470b1605e7833a46","dweb:/ipfs/QmUosWYBY1N1RPRhPbJyUXjU7tD3JbSAHivuBmw4KQhx6J"]},"src/contracts/tokens/IERC165.sol":{"keccak256":"0xaa373f95d370ff17a0e64a4c5bd2c8be72339b9670ac62313237e2758763a58e","license":"CC0-1.0","urls":["bzz-raw://24cb4dba1880f7c7904a2448a2f1f92b3817fab5332efd0366a653540cc09454","dweb:/ipfs/QmSi8GyeZmhUmNc93rXXeBbQ7DLmeMiQ1NxMivAFMpoYbF"]}},"version":1},"version":1,"checkPoints":[]}