{"address":"0x6588Cf61Afd83226F2642DA450e4Bbd82798F108","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_link","type":"address"},{"internalType":"uint128","name":"_paymentAmount","type":"uint128"},{"internalType":"uint32","name":"_timeout","type":"uint32"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"string","name":"_description","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"AddedToWhitelist","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"int256","name":"current","type":"int256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AnswerUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AvailableFundsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":true,"internalType":"address","name":"startedBy","type":"address"},{"indexed":false,"internalType":"uint256","name":"startedAt","type":"uint256"}],"name":"NewRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oracle","type":"address"},{"indexed":false,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"OracleAdminUpdateRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oracle","type":"address"},{"indexed":true,"internalType":"address","name":"newAdmin","type":"address"}],"name":"OracleAdminUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oracle","type":"address"},{"indexed":true,"internalType":"bool","name":"whitelisted","type":"bool"}],"name":"OraclePermissionsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"RemovedFromWhitelist","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"requester","type":"address"},{"indexed":false,"internalType":"bool","name":"authorized","type":"bool"},{"indexed":false,"internalType":"uint32","name":"delay","type":"uint32"}],"name":"RequesterPermissionsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint128","name":"paymentAmount","type":"uint128"},{"indexed":true,"internalType":"uint32","name":"minSubmissionCount","type":"uint32"},{"indexed":true,"internalType":"uint32","name":"maxSubmissionCount","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"restartDelay","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"timeout","type":"uint32"}],"name":"RoundDetailsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"int256","name":"submission","type":"int256"},{"indexed":true,"internalType":"uint32","name":"round","type":"uint32"},{"indexed":true,"internalType":"address","name":"oracle","type":"address"}],"name":"SubmissionReceived","type":"event"},{"anonymous":false,"inputs":[],"name":"WhitelistDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"WhitelistEnabled","type":"event"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"acceptAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_oracles","type":"address[]"},{"internalType":"address[]","name":"_admins","type":"address[]"},{"internalType":"uint32","name":"_minSubmissions","type":"uint32"},{"internalType":"uint32","name":"_maxSubmissions","type":"uint32"},{"internalType":"uint32","name":"_restartDelay","type":"uint32"}],"name":"addOracles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"addToWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"allocatedFunds","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"availableFunds","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"disableWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"getAdmin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOracles","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getRoundData","outputs":[{"internalType":"uint256","name":"roundId","type":"uint256"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint256","name":"answeredInRound","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint256","name":"roundId","type":"uint256"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint256","name":"answeredInRound","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"latestSubmission","outputs":[{"internalType":"int256","name":"","type":"int256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"linkToken","outputs":[{"internalType":"contract LinkTokenInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxSubmissionCount","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minSubmissionCount","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"oracleCount","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"uint32","name":"_queriedRoundId","type":"uint32"}],"name":"oracleRoundState","outputs":[{"internalType":"bool","name":"_eligibleToSubmit","type":"bool"},{"internalType":"uint32","name":"_roundId","type":"uint32"},{"internalType":"int256","name":"_latestSubmission","type":"int256"},{"internalType":"uint64","name":"_startedAt","type":"uint64"},{"internalType":"uint64","name":"_timeout","type":"uint64"},{"internalType":"uint128","name":"_availableFunds","type":"uint128"},{"internalType":"uint32","name":"_oracleCount","type":"uint32"},{"internalType":"uint128","name":"_paymentAmount","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paymentAmount","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"removeFromWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_oracles","type":"address[]"},{"internalType":"uint32","name":"_minSubmissions","type":"uint32"},{"internalType":"uint32","name":"_maxSubmissions","type":"uint32"},{"internalType":"uint32","name":"_restartDelay","type":"uint32"}],"name":"removeOracles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"reportingRound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"requestNewRound","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"restartDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_requester","type":"address"},{"internalType":"bool","name":"_authorized","type":"bool"},{"internalType":"uint32","name":"_delay","type":"uint32"}],"name":"setRequesterPermissions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"},{"internalType":"int256","name":"_submission","type":"int256"}],"name":"submit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"timeout","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"address","name":"_newAdmin","type":"address"}],"name":"transferAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updateAvailableFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint128","name":"_paymentAmount","type":"uint128"},{"internalType":"uint32","name":"_minSubmissions","type":"uint32"},{"internalType":"uint32","name":"_maxSubmissions","type":"uint32"},{"internalType":"uint32","name":"_restartDelay","type":"uint32"},{"internalType":"uint32","name":"_timeout","type":"uint32"}],"name":"updateFutureRounds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"whitelistEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawPayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"withdrawablePayment","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"acceptAdmin(address)":{"params":{"_oracle":"is the address of the oracle whose admin is being transfered"}},"acceptOwnership()":{"details":"Allows an ownership transfer to be completed by the recipient."},"addOracles(address[],address[],uint32,uint32,uint32)":{"params":{"_admins":"is the admin addresses of the new respective _oracles list. Only this address is allowed to access the respective oracle's funds.","_maxSubmissions":"is the new maximum submission count for each round","_minSubmissions":"is the new minimum submission count for each round","_oracles":"is the list of addresses of the new Oracles being added","_restartDelay":"is the number of rounds an Oracle has to wait before they can initiate a round"}},"addToWhitelist(address)":{"params":{"_user":"The address to whitelist"}},"getAdmin(address)":{"params":{"_oracle":"is the address of the oracle whose admin is being queried"}},"getAnswer(uint256)":{"details":"overridden funcion to add the isWhitelisted() modifierdeprecated. Use getRoundData instead.","params":{"_roundId":"the round number to retrieve the answer for"}},"getRoundData(uint256)":{"details":"Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.","params":{"_roundId":"the round ID to retrieve the round data for"},"returns":{"answer":"is the answer for the given round","answeredInRound":"is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answerInRound is equal to roundId when the round didn't time out and was completed regularly.","roundId":"is the round ID for which data was retrieved","startedAt":"is the timestamp when the round was started. This is 0 if the round hasn't been started yet.","updatedAt":"is the timestamp when the round last was updated (i.e. answer was last computed)"}},"getTimestamp(uint256)":{"details":"overridden funcion to add the isWhitelisted() modifierdeprecated. Use getRoundData instead.","params":{"_roundId":"the round number to retrieve the updated timestamp for"}},"latestAnswer()":{"details":"overridden funcion to add the isWhitelisted() modifierdeprecated. Use latestRoundData instead."},"latestRound()":{"details":"deprecated. Use latestRoundData instead."},"latestRoundData()":{"details":"Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.","returns":{"answer":"is the answer for the given round","answeredInRound":"is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answerInRound is equal to roundId when the round didn't time out and was completed regularly.","roundId":"is the round ID for which data was retrieved","startedAt":"is the timestamp when the round was started. This is 0 if the round hasn't been started yet.","updatedAt":"is the timestamp when the round last was updated (i.e. answer was last computed)"}},"latestSubmission(address)":{"params":{"_oracle":"is the address to lookup the latest submission for"}},"latestTimestamp()":{"details":"overridden funcion to add the isWhitelisted() modifierdeprecated. Use latestRoundData instead."},"onTokenTransfer(address,uint256,bytes)":{"params":{"_data":"is mostly ignored. It is checked for length, to be sure nothing strange is passed in."}},"oracleRoundState(address,uint32)":{"params":{"_oracle":"the address to look up information for."}},"removeFromWhitelist(address)":{"params":{"_user":"The address to remove"}},"removeOracles(address[],uint32,uint32,uint32)":{"params":{"_maxSubmissions":"is the new maximum submission count for each round","_minSubmissions":"is the new minimum submission count for each round","_oracles":"is the address of the Oracles being removed","_restartDelay":"is the number of rounds an Oracle has to wait before they can initiate a round"}},"setRequesterPermissions(address,bool,uint32)":{"params":{"_authorized":"is a boolean specifying whether they can start new rounds or not","_delay":"is the number of rounds the requester must wait before starting another round","_requester":"is the address to set permissions for"}},"submit(uint256,int256)":{"params":{"_roundId":"is the ID of the round this submission pertains to","_submission":"is the updated data that the oracle is submitting"}},"transferAdmin(address,address)":{"params":{"_newAdmin":"is the new admin address","_oracle":"is the address of the oracle whose admin is being transfered"}},"transferOwnership(address)":{"details":"Allows an owner to begin transferring ownership to a new address, pending."},"updateFutureRounds(uint128,uint32,uint32,uint32,uint32)":{"params":{"_maxSubmissions":"is the new maximum submission count for each round","_minSubmissions":"is the new minimum submission count for each round","_paymentAmount":"is the payment amount for subsequent rounds","_restartDelay":"is the number of rounds an Oracle has to wait before they can initiate a round"}},"withdrawFunds(address,uint256)":{"params":{"_amount":"is the amount of LINK to send","_recipient":"is the address to send the LINK to"}},"withdrawPayment(address,address,uint256)":{"params":{"_amount":"is the amount of LINK to send","_oracle":"is the oracle whose LINK is transferred","_recipient":"is the address to send the LINK to"}}},"title":"Whitelisted Prepaid Aggregator contract"},"userdoc":{"methods":{"acceptAdmin(address)":{"notice":"accept the admin address transfer for an oracle"},"addOracles(address[],address[],uint32,uint32,uint32)":{"notice":"called by the owner to add new Oracles and update the round related parameters"},"addToWhitelist(address)":{"notice":"Adds an address to the whitelist"},"disableWhitelist()":{"notice":"makes the whitelist check unenforced"},"enableWhitelist()":{"notice":"makes the whitelist check enforced"},"getAdmin(address)":{"notice":"get the admin address of an oracle"},"getAnswer(uint256)":{"notice":"get past rounds answers"},"getOracles()":{"notice":"returns an array of addresses containing the oracles on contract"},"getRoundData(uint256)":{"notice":"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values."},"getTimestamp(uint256)":{"notice":"get timestamp when an answer was last updated"},"latestAnswer()":{"notice":"get the most recently reported answer"},"latestRound()":{"notice":"get the ID of the last updated round"},"latestRoundData()":{"notice":"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Consumers are encouraged to use this more fully featured method over the \"legacy\" getAnswer/ latestAnswer/getTimestamp/latestTimestamp functions. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values."},"latestSubmission(address)":{"notice":"get the latest submission for any oracle"},"latestTimestamp()":{"notice":"get the most recent updated at timestamp"},"onTokenTransfer(address,uint256,bytes)":{"notice":"called through LINK's transferAndCall to update available funds in the same transaction as the funds were transfered to the aggregator"},"oracleCount()":{"notice":"returns the number of oracles"},"oracleRoundState(address,uint32)":{"notice":"a method to provide all current info oracles need. Intended only only to be callable by oracles. Not for use by contracts to read state."},"removeFromWhitelist(address)":{"notice":"Removes an address from the whitelist"},"removeOracles(address[],uint32,uint32,uint32)":{"notice":"called by the owner to remove Oracles and update the round related parameters"},"reportingRound()":{"notice":"get the ID of the round most recently reported on"},"requestNewRound()":{"notice":"allows non-oracles to request a new round"},"setRequesterPermissions(address,bool,uint32)":{"notice":"allows the owner to specify new non-oracles to start new rounds"},"submit(uint256,int256)":{"notice":"called by oracles when they have witnessed a need to update"},"transferAdmin(address,address)":{"notice":"transfer the admin address for an oracle"},"updateAvailableFunds()":{"notice":"recalculate the amount of LINK available for payouts"},"updateFutureRounds(uint128,uint32,uint32,uint32,uint32)":{"notice":"update the round and payment related parameters for subsequent rounds"},"withdrawFunds(address,uint256)":{"notice":"transfers the owner's LINK to another address"},"withdrawPayment(address,address,uint256)":{"notice":"transfers the oracle's LINK to another address. Can only be called by the oracle's admin."},"withdrawablePayment(address)":{"notice":"query the available amount of LINK for an oracle to withdraw"}},"notice":"This contract requires addresses to be added to a whitelist in order to read the answers stored in the FluxAggregator contract"}},"settings":{"compilationTarget":{"browser/WhitelistedAggregator.sol":"WhitelistedAggregator"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/WhitelistedAggregator.sol":{"keccak256":"0x0f0d793f063e664308352955e0a1c141d4189af153a39d52649c8646008c6fd8","urls":["bzz-raw://17b36283e62f24462b2bf1dcdec3744a6b1fe8ae2ade76c6101b37eec08d82d7","dweb:/ipfs/QmSyQqyXquRmweeMo7BZfqcDenJnaP65YLf5bWtHxzBnW3"]}},"version":1},"version":1,"checkPoints":[]}