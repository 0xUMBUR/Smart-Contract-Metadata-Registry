{"address":"0xa1c7dc815DBC0CF2C3bE42aD15880e2613cD8546","name":"","metadata":{"compiler":{"version":"0.5.16+commit.9c3226ce"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bool","name":"frozen","type":"bool"}],"name":"FrozenAccounts","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"constant":false,"inputs":[],"name":"acceptOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"tokenAmount","type":"uint256[]"}],"name":"airdropACTIVE","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"airdropAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"airdropClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"airdropFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_spender","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"burn","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"buyTokens","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"newAmount","type":"uint256"}],"name":"changePassiveAirdropAmount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"changeSafeguardStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"changeWhitelistingStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimPassiveAirdrop","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"decrease_allowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"freeze","type":"bool"}],"name":"freezeAccount","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"frozenAccount","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"increase_allowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isContract","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"manualWithdrawEther","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"manualWithdrawTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"mintedAmount","type":"uint256"}],"name":"mintToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"passiveAirdropStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"passiveAirdropTokensAllocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"passiveAirdropTokensSold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"safeguard","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"sellTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"newSellPrice","type":"uint256"},{"internalType":"uint256","name":"newBuyPrice","type":"uint256"}],"name":"setPrices","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"passiveAirdropTokensAllocation_","type":"uint256"},{"internalType":"uint256","name":"airdropAmount_","type":"uint256"}],"name":"startNewPassiveAirDrop","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"stopPassiveAirDropCompletely","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address payable","name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"updateAirdropFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address[]","name":"userAddresses","type":"address[]"}],"name":"whitelistManyUsers","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"whitelistUser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"whitelistingStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"approve(address,uint256)":{"params":{"_spender":"The address authorized to spend","_value":"the max amount they can spend"}},"burn(uint256)":{"params":{"_value":"the amount of money to burn"}},"burnFrom(address,uint256)":{"params":{"_from":"the address of the sender","_value":"the amount of money to burn"}},"decrease_allowance(address,uint256)":{"details":"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) Emits an Approval event.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to decrease the allowance by."}},"freezeAccount(address,bool)":{"params":{"freeze":"either to freeze it or not","target":"Address to be frozen"}},"increase_allowance(address,uint256)":{"details":"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) Emits an Approval event.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to increase the allowance by."}},"mintToken(address,uint256)":{"params":{"mintedAmount":"the amount of tokens it will receive","target":"Address to receive the tokens"}},"transfer(address,uint256)":{"params":{"_to":"The address of the recipient","_value":"the amount to send"}},"transferFrom(address,address,uint256)":{"params":{"_from":"The address of the sender","_to":"The address of the recipient","_value":"the amount to send"}}}},"userdoc":{"methods":{"airdropACTIVE(address[],uint256[])":{"notice":"Run an ACTIVE Air-Drop      * It requires an array of all the addresses and amount of tokens to distribute It will only process first 150 recipients. That limit is fixed to prevent gas limit"},"allowance(address,address)":{"notice":"Returns allowance of token "},"approve(address,uint256)":{"notice":"Set allowance for other address         * Allows `_spender` to spend no more than `_value` tokens in your behalf "},"balanceOf(address)":{"notice":"Returns balance of token "},"burn(uint256)":{"notice":"Destroy tokens         * Remove `_value` tokens from the system irreversibly "},"burnFrom(address,uint256)":{"notice":"Destroy tokens from other account         * Remove `_value` tokens from the system irreversibly on behalf of `_from`. "},"buyTokens()":{"notice":"Buy tokens from contract by sending ether buyPrice is 1 ETH = ?? Tokens"},"changePassiveAirdropAmount(uint256)":{"notice":"This function allows admin to change the amount users will be getting while claiming air drop"},"changeSafeguardStatus()":{"notice":"Change safeguard status on or off         * When safeguard is true, then all the non-owner functions will stop working. When safeguard is false, then all the functions will resume working back again!"},"changeWhitelistingStatus()":{"notice":"Change whitelisting status on or off      * When whitelisting is true, then crowdsale will only accept investors who are whitelisted."},"claimPassiveAirdrop()":{"notice":"This function called by user who want to claim passive air drop. He can only claim air drop once, for current air drop. If admin stop an air drop and start fresh, then users can claim again (once only)."},"decimals()":{"notice":"Returns decimals of token "},"freezeAccount(address,bool)":{"notice":"`freeze? Prevent | Allow` `target` from sending & receiving tokens"},"isContract(address)":{"notice":"This function checks if given address is contract address or normal wallet"},"manualWithdrawTokens(uint256)":{"notice":"Owner can transfer tokens from contract to owner address         * When safeguard is true, then all the non-owner functions will stop working. When safeguard is false, then all the functions will resume working back again!"},"mintToken(address,uint256)":{"notice":"Create `mintedAmount` tokens and send it to `target`"},"name()":{"notice":"Returns name of token "},"sellTokens(uint256)":{"notice":"Sell `amount` tokens to contract amount amount of tokens to be sold"},"setPrices(uint256,uint256)":{"notice":"Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth newSellPrice Price the users can sell to the contract newBuyPrice Price users can buy from the contract"},"startNewPassiveAirDrop(uint256,uint256)":{"notice":"This function to start a passive air drop by admin only Admin have to put airdrop amount (in wei) and total toens allocated for it. Admin must keep allocated tokens in the contract"},"stopPassiveAirDropCompletely()":{"notice":"This function will stop any ongoing passive airdrop"},"symbol()":{"notice":"Returns symbol of token "},"totalSupply()":{"notice":"Returns totalSupply of token."},"transfer(address,uint256)":{"notice":"Transfer tokens         * Send `_value` tokens to `_to` from your account "},"transferFrom(address,address,uint256)":{"notice":"Transfer tokens from other address         * Send `_value` tokens to `_to` in behalf of `_from` "},"updateAirdropFee(uint256)":{"notice":"This function allows admin to update airdrop fee. He can put zero as well if no fee to be charged."},"whitelistManyUsers(address[])":{"notice":"Whitelist Many user address at once - only Owner can do this It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack It will add user address in whitelisted mapping"},"whitelistUser(address)":{"notice":"Whitelist any user address - only Owner can do this      * It will add user address in whitelisted mapping"}}}},"settings":{"compilationTarget":{"browser/Untitled2.sol":"EAToken"},"evmVersion":"istanbul","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/Untitled2.sol":{"keccak256":"0x010e349aa5da3572cfe1101be631b0438cf7f3c4ada82aba2b9812514ffd8194","urls":["bzz-raw://9e569c5d9853fd73d0ce455eab5ed6d4d9f60a939374326985058a52ad9f33c2","dweb:/ipfs/QmTGe2FgSnZnfakUoeGZ7nuGgQi9umJw75vuhkU8FQjVEn"]}},"version":1},"version":1,"checkPoints":[]}