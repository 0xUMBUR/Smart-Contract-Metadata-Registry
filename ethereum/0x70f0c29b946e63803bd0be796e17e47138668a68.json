{"address":"0x70f0c29b946E63803BD0Be796E17E47138668A68","name":"","metadata":{"compiler":{"version":"0.6.4+commit.1dca32f3"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"secrethash","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"secret","type":"bytes32"}],"name":"SecretRevealed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"secrethash","type":"bytes32"}],"name":"getSecretRevealBlockHeight","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"secret","type":"bytes32"}],"name":"registerSecret","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"secrets","type":"bytes32[]"}],"name":"registerSecretBatch","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"getSecretRevealBlockHeight(bytes32)":{"params":{"secrethash":"The hash of the registered secret `keccak256(secret)`"},"returns":{"_0":"The block number at which the secret was revealed"}},"registerSecret(bytes32)":{"params":{"secret":"The secret used to lock the hash time lock"},"returns":{"_0":"true if secret was registered, false if the secret was already registered"}},"registerSecretBatch(bytes32[])":{"params":{"secrets":"The array of secrets to be registered"},"returns":{"_0":"true if all secrets could be registered, false otherwise"}}},"title":"SecretRegistry"},"userdoc":{"methods":{"getSecretRevealBlockHeight(bytes32)":{"notice":"Get the stored block number at which the secret was revealed"},"registerSecret(bytes32)":{"notice":"Registers a hash time lock secret and saves the block number. This allows the lock to be unlocked after the expiration block"},"registerSecretBatch(bytes32[])":{"notice":"Registers multiple hash time lock secrets and saves the block number"}},"notice":"SecretRegistry contract for registering secrets from Raiden Network clients."}},"settings":{"compilationTarget":{"data/source/raiden/SecretRegistry.sol":"SecretRegistry"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[":.=.",":lib=data/source/lib",":raiden=data/source/raiden",":services=data/source/services",":test=data/source/test"]},"sources":{"data/source/raiden/SecretRegistry.sol":{"keccak256":"0xb3003341c597d5c7d12e59266ce3982b91d5e973533f69dfb0d8c774a9201e83","urls":["bzz-raw://54b56725d4ef15a03c2297a64540bb59449e646add51686a1de422581422af82","dweb:/ipfs/QmaZpnLzgLWkrUKPBedXruxEZxVTKZyWehfTtXxeG739eW"]}},"version":1},"version":1,"checkPoints":[]}