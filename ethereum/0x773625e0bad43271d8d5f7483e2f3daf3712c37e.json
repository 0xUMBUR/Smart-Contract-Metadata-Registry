{"address":"0x773625e0BAd43271d8d5F7483E2f3dAF3712c37e","name":"","metadata":{"compiler":{"version":"0.8.0+commit.c7dfd78e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"chain_id","type":"uint256"},{"internalType":"uint256","name":"fee_pct","type":"uint256"},{"internalType":"address","name":"fee_recipient","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"_chain_id","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"_fee_pct","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDomainTypehash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"string","name":"contractName","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"}],"name":"getEIP712DomainHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"artist","type":"address"},{"internalType":"address","name":"keypassToken","type":"address"},{"internalType":"string","name":"uri","type":"string"},{"internalType":"uint256","name":"maxCopies","type":"uint256"},{"internalType":"uint256","name":"expirationBlock","type":"uint256"},{"internalType":"address","name":"currencyToken","type":"address"},{"internalType":"uint256","name":"currencyAmount","type":"uint256"}],"name":"getPacketHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getPacketTypehash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"artist","type":"address"},{"internalType":"address","name":"keypassToken","type":"address"},{"internalType":"string","name":"uri","type":"string"},{"internalType":"uint256","name":"maxCopies","type":"uint256"},{"internalType":"uint256","name":"expirationBlock","type":"uint256"},{"internalType":"address","name":"currencyToken","type":"address"},{"internalType":"uint256","name":"currencyAmount","type":"uint256"}],"name":"getTypedDataHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"address","name":"artist","type":"address"},{"internalType":"address","name":"keypassToken","type":"address"},{"internalType":"string","name":"uri","type":"string"},{"internalType":"uint256","name":"maxCopies","type":"uint256"},{"internalType":"uint256","name":"expirationBlock","type":"uint256"},{"internalType":"address","name":"currencyToken","type":"address"},{"internalType":"uint256","name":"currencyAmount","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"projectIdToArtist","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"projectId","type":"uint256"}],"name":"projectIdToMaxCopies","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"projectIdToUri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"projectUriBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"recover","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenArtist","outputs":[{"internalType":"address","name":"artist","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdToProjectId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokensMinted","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Set or reaffirm the approved address for an NFT. This function can be changed to payable.","params":{"_approved":"Address to be approved for the given NFT ID.","_tokenId":"ID of the token to be approved."}},"balanceOf(address)":{"details":"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.","params":{"_owner":"Address for whom to query the balance."},"returns":{"_0":"Balance of _owner."}},"getApproved(uint256)":{"details":"Get the approved address for a single NFT.","params":{"_tokenId":"ID of the NFT to query the approval of."},"returns":{"_0":"Address that _tokenId is approved for."}},"isApprovedForAll(address,address)":{"details":"Checks if `_operator` is an approved operator for `_owner`.","params":{"_operator":"The address that acts on behalf of the owner.","_owner":"The address that owns the NFTs."},"returns":{"_0":"True if approved for all, false otherwise."}},"mint(address,address,address,string,uint256,uint256,address,uint256,bytes)":{"details":"Mints a new NFT.","params":{"_to":"The address that will own the minted NFT."}},"name()":{"details":"Returns a descriptive name for a collection of NFTokens.","returns":{"_name":"Representing name."}},"ownerOf(uint256)":{"details":"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.","params":{"_tokenId":"The identifier for an NFT."},"returns":{"_owner":"Address of _tokenId owner."}},"recover(bytes32,bytes)":{"details":"Recover signer address from a message by using his signature","params":{"hash":"bytes32 message, the hash is the signed message. What is recovered is the signer address.","sig":"bytes signature, the signature is generated using web3.eth.sign()"}},"safeTransferFrom(address,address,uint256)":{"details":"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.","params":{"_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.","params":{"_data":"Additional data with no specified format, sent in call to `_to`.","_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"setApprovalForAll(address,bool)":{"details":"Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.","params":{"_approved":"True if the operators is approved, false to revoke approval.","_operator":"Address to add to the set of authorized operators."}},"supportsInterface(bytes4)":{"details":"Function to check which interfaces are suported by this contract.","params":{"_interfaceID":"Id of the interface."},"returns":{"_0":"True if _interfaceID is supported, false otherwise."}},"symbol()":{"details":"Returns an abbreviated name for NFTokens.","returns":{"_symbol":"Representing symbol."}},"tokenURI(uint256)":{"details":"A distinct URI (RFC 3986) for a given NFT.","params":{"_tokenId":"Id for which we want uri."},"returns":{"_0":"URI of _tokenId."}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.","params":{"_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}}},"version":1},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."},"getApproved(uint256)":{"notice":"Throws if `_tokenId` is not a valid NFT."},"safeTransferFrom(address,address,uint256)":{"notice":"This works identically to the other function with an extra data parameter, except this function just sets data to \"\""},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."},"setApprovalForAll(address,bool)":{"notice":"This works even if sender doesn't own any tokens at the time."},"transferFrom(address,address,uint256)":{"notice":"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."}},"notice":"   NFT contract with offchain-mintable tokens    EIP712 ","version":1}},"settings":{"compilationTarget":{"DigitalNFT.sol":"DigitalNFT"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"DigitalNFT.sol":{"keccak256":"0x97785ebce506c6ae373c204f8669838e04112f82a677a74542e57f9bfc4e8cca","urls":["bzz-raw://d759fb152d39ecff23849da17ca938afee2f908aa8486b0d53943f2328be35c7","dweb:/ipfs/QmXx8dc9kLnvgjQDyhWGCz9d5CTsfbiy86y2HososnqtNS"]}},"version":1},"version":1,"checkPoints":[]}