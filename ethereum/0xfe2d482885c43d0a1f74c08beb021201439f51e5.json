{"address":"0xFe2d482885c43D0a1F74C08BEB021201439f51E5","name":"","metadata":{"compiler":{"version":"0.8.2+commit.661d1103"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"msgSender","type":"address"},{"indexed":false,"internalType":"address","name":"otherSigner","type":"address"},{"indexed":false,"internalType":"bytes32","name":"operation","type":"bytes32"},{"indexed":false,"internalType":"address","name":"toAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Transacted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"vaultAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"minSig","type":"uint256"}],"name":"VaultCreated","type":"event"},{"inputs":[{"internalType":"address","name":"vaultAddress","type":"address"},{"internalType":"address[]","name":"toAddress","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"},{"internalType":"address[]","name":"tokenContractAddress","type":"address[]"}],"name":"createERC20Operation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"vaultAddress","type":"address"},{"internalType":"address[]","name":"toAddress","type":"address[]"},{"internalType":"uint256[]","name":"amount","type":"uint256[]"}],"name":"createOperation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"minSig","type":"uint256"}],"name":"createVault","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_operationId","type":"uint256"}],"name":"getOperationInfos","outputs":[{"internalType":"address","name":"vaultAddress","type":"address"},{"internalType":"uint256","name":"signatures","type":"uint256"},{"internalType":"uint256","name":"minimumSignature","type":"uint256"},{"internalType":"uint256","name":"transactionCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_operationId","type":"uint256"}],"name":"getOperationSignatures","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"vaultAddress","type":"address"}],"name":"getVaultBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"signer","type":"address"}],"name":"isSigner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_operationId","type":"uint256"}],"name":"signOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"signers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isSigner(address)":{"params":{"signer":"address to check returns boolean indicating whether address is signer or not"}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet. 2 signers will be required to send a transaction from this wallet. Note: The sender is NOT automatically added to the list of signers. Signers CANNOT be changed once they are set "},"createERC20Operation(address,address[],uint256[],address[])":{"notice":"Create a new Multisignature Operation for an ERC20 transfer returns id of the operation"},"createOperation(address,address[],uint256[])":{"notice":"Create a new Multisignature Operation returns id of the operation"},"createVault(uint256)":{"notice":"Create a new contract (VaultContract) that will store funds returns address of newly created VaultContract address and store it"},"getOperationInfos(uint256)":{"notice":"Get the number of signatures for an Operation returns id of the operation To update with new Transaction Structure"},"getOperationSignatures(uint256)":{"notice":"Get the number of signatures for an Operation returns id of the operation"},"isSigner(address)":{"notice":"Determine if an address is a signer on this wallet"},"signOperation(uint256)":{"notice":"Sign a Multisignature Operation returns id of the operation"}},"notice":"MultisigProxy ============ [\"0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\", \"0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2\", \"0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db\"] [\"b8bab56cf2f0f7a3066ca23367e178087f10cae9\", \"ca6343957c3ce4eb220f263149a1144d169d0460\", \"35e7f9fbcc4d2df94ae31ded7cf6425c718f8a21\"] BFI Multisignature proxy wallet designed which will allow creating Vaults and unlocking their funds. Quorum is configurable The first signature is created on the operation hash (see Data Formats) and passed to sendMultiSig/sendMultiSigToken The signer is determined by verifyMultiSig(). The second signature is created by the submitter of the transaction and determined by msg.signer. Data Formats ============ The signature is created with ethereumjs-util.ecsign(operationHash). Like the eth_sign RPC call, it packs the values as a 65-byte array of [r, s, v]. Unlike eth_sign, the message is not prefixed. The operationHash the result of keccak256(prefix, toAddress, value, data, expireTime). For ether transactions, `prefix` is \"ETHER\". For token transaction, `prefix` is \"ERC20\" and `data` is the tokenContractAddress.","version":1}},"settings":{"compilationTarget":{"BFI/MultisigProxy.sol":"MultisigProxy"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"BFI/MultisigProxy.sol":{"keccak256":"0x0476a3a8cfd3b6741a65a229a259d02c880507705ffbe60f42e1e4eec714ea04","urls":["bzz-raw://1c51bd8fbac859d6ed8960268656f2da457d8b0c5f6a2658a11f73598be7aaf9","dweb:/ipfs/QmcjuKDeH8xxUMfD8szA5jMKDM4f9ExmY1npm4WvkfUvZg"]}},"version":1},"version":1,"checkPoints":[]}