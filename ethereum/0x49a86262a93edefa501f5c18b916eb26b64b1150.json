{"address":"0x49A86262a93EDEFA501f5c18B916EB26b64B1150","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_aggregator","type":"address"},{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"string","name":"_description","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"int256","name":"current","type":"int256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedAt","type":"uint256"}],"name":"AnswerUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":true,"internalType":"address","name":"startedBy","type":"address"},{"indexed":false,"internalType":"uint256","name":"startedAt","type":"uint256"}],"name":"NewRound","type":"event"},{"inputs":[],"name":"aggregator","outputs":[{"internalType":"contract AggregatorInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"_roundId","type":"uint80"}],"name":"getRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"getAnswer(uint256)":{"details":"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.","params":{"_roundId":"the answer number to retrieve the answer for"}},"getRoundData(uint80)":{"details":"Note that for rounds that haven't yet received responses from all oracles, answer and updatedAt may change between queries.","params":{"_roundId":"the round ID to retrieve the round data for"},"returns":{"answer":"is the answer for the given round","answeredInRound":"is always equal to roundId because the underlying Aggregator contract does not expose this information.","roundId":"is the round ID for which data was retrieved","startedAt":"is always equal to updatedAt because the underlying Aggregator contract does not expose this information.","updatedAt":"is the timestamp when the round last was updated (i.e. answer was last computed)"}},"getTimestamp(uint256)":{"details":"#[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.","params":{"_roundId":"the answer number to retrieve the updated timestamp for"}},"latestAnswer()":{"details":"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."},"latestRound()":{"details":"#[deprecated]. Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."},"latestRoundData()":{"details":"Note that for rounds that haven't yet received responses from all oracles, answer and updatedAt may change between queries.","returns":{"answer":"is the answer for the given round","answeredInRound":"is always equal to roundId because the underlying Aggregator contract does not expose this information.","roundId":"is the round ID for which data was retrieved","startedAt":"is always equal to updatedAt because the underlying Aggregator contract does not expose this information.","updatedAt":"is the timestamp when the round last was updated (i.e. answer was last computed)"}},"latestTimestamp()":{"details":"#[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information."}},"title":"A facade forAggregator versions to conform to the new v0.6 Aggregator V3 interface."},"userdoc":{"methods":{"getAnswer(uint256)":{"notice":"get past rounds answers"},"getRoundData(uint80)":{"notice":"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt value."},"getTimestamp(uint256)":{"notice":"get block timestamp when an answer was last updated"},"latestAnswer()":{"notice":"Reads the current answer from aggregator delegated to."},"latestRound()":{"notice":"get the latest completed round where the answer was updated"},"latestRoundData()":{"notice":"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt value."},"latestTimestamp()":{"notice":"Reads the last updated height from aggregator delegated to."}}}},"settings":{"compilationTarget":{"browser/AggregatorFacade1.sol":"AggregatorFacade"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/AggregatorFacade1.sol":{"keccak256":"0xfd7c15eebf7caa462bbc986c462c35d38d00060921a079bca1f2431baab8983b","urls":["bzz-raw://7494fa4804105bdfce79e1b4daf1bc7eefa44033c2de41a31e3fab817e089bfd","dweb:/ipfs/QmNuDpu9Bhrpy7fo8x46oyzU3p4y3jLsf4wxqYwST7GGzV"]}},"version":1},"version":1,"checkPoints":[]}