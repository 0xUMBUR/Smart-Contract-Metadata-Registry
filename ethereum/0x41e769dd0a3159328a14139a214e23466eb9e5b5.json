{"address":"0x41e769dd0a3159328A14139a214e23466eb9E5b5","name":"","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"string","name":"_root","type":"string"},{"internalType":"string","name":"_timestamp","type":"string"}],"name":"recordProof","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"retrieveProof","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"isOwner()":{"details":"Returns true if the caller is the current owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"userdoc":{"methods":{"recordProof(bytes32,string,string)":{"notice":"Record a new proof to the smart contract.     *"},"retrieveProof(bytes32)":{"notice":"Retrieve a proof from the smart contract.     *"}}}},"settings":{"compilationTarget":{"browser/ProofHolder.sol":"ProofHolder"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/Context.sol":{"keccak256":"0x0f428ede8714c68131f946ea2325e17377242b9594a832c5bf335602a81fa4cf","urls":["bzz-raw://6cd96a1c4715f5eda4d02772d1761c485301c48317a82a5bc655c9d6a4e53ed7","dweb:/ipfs/QmeLZD9LvUUCnEtgYw8CDubSQpa53XTekPFj321BRMksmm"]},"browser/Ownable.sol":{"keccak256":"0x04f50461c46171f3287d3bce9d4fbde96dbc5dedaf6144dbf984679f06a4275b","urls":["bzz-raw://aacb3837f3863b4659c23e9e48bb01c99dc28b82a949e422b1606a3c93cd2159","dweb:/ipfs/QmZGTEATAmZPjGM3Wpz8WfGnzczcZ9qm3kenm7Z1sQdcGq"]},"browser/ProofHolder.sol":{"keccak256":"0xea00ad4da292fb42fab9dcb1145741af21ae1d7d3e45237a91b567634875d155","urls":["bzz-raw://b4f153d0cf4a1c618ccdf14d18459b5fb5f89a008fd935c72ace241a3bb3b8b2","dweb:/ipfs/QmQ4AnH6hNoXmDCViCLF63BWXSfcc8PM2iP7CgxCN3vFZe"]}},"version":1},"version":1,"checkPoints":[]}