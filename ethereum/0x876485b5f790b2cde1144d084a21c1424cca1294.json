{"address":"0x876485B5F790B2cDe1144D084a21C1424CCA1294","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"bytes32","name":"guestRoot","type":"bytes32"}],"name":"ProveInvitation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"geyser","type":"address"}],"name":"SetGeyser","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"guestRoot","type":"bytes32"}],"name":"SetGuestRoot","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"cap","type":"uint256"}],"name":"SetTotalDepositCap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"cap","type":"uint256"}],"name":"SetUserDepositCap","type":"event"},{"inputs":[{"internalType":"address","name":"_guest","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32[]","name":"_merkleProof","type":"bytes32[]"}],"name":"authorized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"geyser","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"geyserBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"guestRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"guests","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wrapper_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"proveInvitation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"remainingTotalDepositAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"remainingUserDepositAllowed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"geyser_","type":"address"}],"name":"setGeyser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"guestRoot_","type":"bytes32"}],"name":"setGuestRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_guests","type":"address[]"},{"internalType":"bool[]","name":"_invited","type":"bool[]"}],"name":"setGuests","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"cap_","type":"uint256"}],"name":"setTotalDepositCap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"cap_","type":"uint256"}],"name":"setUserDepositCap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalDepositCap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"userDepositCap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"vaultBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wrapper","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"wrapperBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"For a Vyper implementation of this contract containing additional functionality, see https://github.com/banteg/guest-list/blob/master/contracts/GuestList.vy The owner can invite arbitrary guests A guest can be added permissionlessly with proof of inclusion in current merkle set The owner can change the merkle root at any time Merkle-based permission that has been claimed cannot be revoked permissionlessly. Any guests can be revoked by the owner at-will The TVL cap is based on the number of want tokens in the underlying vaults. This can only be made more permissive over time. If decreased, existing TVL is maintained and no deposits are possible until the TVL has gone below the threshold A variant of the yearn AffiliateToken that supports guest list control of deposits A guest list that gates access by merkle root and a TVL cap","kind":"dev","methods":{"authorized(address,uint256,bytes32[])":{"details":"Note that `_amount` isn't checked to keep test setup simple, since from the wrapper tests' perspective this is a pass/fail call anyway.","params":{"_guest":"The guest's address to check."}},"initialize(address)":{"details":"Note that since this is just for testing, you're unable to change `owner`."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setGuests(address[],bool[])":{"params":{"_guests":"The guests to add or update.","_invited":"A flag for each guest at the matching index, inviting or uninviting the guest."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{"authorized(address,uint256,bytes32[])":{"notice":"Check if a guest with a bag of a certain size is allowed into the party."},"initialize(address)":{"notice":"Create the test guest list, setting the message sender as `owner`."},"proveInvitation(address,bytes32[])":{"notice":"Permissionly prove an address is included in the current merkle root, thereby granting accessNote that the list is designed to ONLY EXPAND in future instancesThe admin does retain the ability to ban individual addresses"},"setGuestRoot(bytes32)":{"notice":"Set the merkle root to verify invitation proofs against.Note that accounts not included in the root will still be invited if their inviation was previously approved.Setting to 0 removes proof verification versus the root, opening access"},"setGuests(address[],bool[])":{"notice":"Invite guests or kick them from the party."}},"notice":"A basic guest list contract for testing.","version":1}},"settings":{"compilationTarget":{"contracts/VipCapped.sol":"VipCappedGuestListWrapperUpgradeable"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/VipCapped.sol":{"keccak256":"0x69c06534ed2754396c847edd6306adaf7927ff1d22439c2387d509a61938a4a6","license":"MIT","urls":["bzz-raw://badc86cd766c18662c3238535cbe810d3cd47a4c7fb31d2179ecb421e2bc8a01","dweb:/ipfs/Qme7EDRFwXf8XRa5zk4C4k5QDN7A9RaoVLhQ2QUBpd7uE8"]}},"version":1},"version":1,"checkPoints":[]}