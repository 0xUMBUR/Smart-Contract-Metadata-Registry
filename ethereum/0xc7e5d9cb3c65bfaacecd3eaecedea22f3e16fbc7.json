{"address":"0xc7E5D9cB3c65bFaAcECD3eAecEDEa22F3e16FbC7","name":"","metadata":{"compiler":{"version":"0.7.4+commit.3f05b770"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"signer","type":"address"},{"indexed":false,"internalType":"uint256","name":"newNonce","type":"uint256"}],"name":"NonceChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token_address","type":"address"},{"indexed":false,"internalType":"uint256","name":"token_id","type":"uint256"}],"name":"TokenRegistration","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"TransferSingle","type":"event"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getIdAddress","outputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_signer","type":"address"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"getTokenID","outputs":[{"internalType":"uint256","name":"tokenID","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"isOperator","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_signerAddress","type":"address"},{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes","name":"_sig","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bool","name":"isValid","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"},{"internalType":"bool","name":"_isGasFee","type":"bool"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"metaSafeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_isGasFee","type":"bool"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"metaSafeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"},{"internalType":"bool","name":"_isGasFee","type":"bool"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"metaSetApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address payable","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address payable","name":"_from","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address payable","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"_id":"ID of the Token","_owner":"The address of the token holder"},"returns":{"_0":"The _owner's balance of the Token type requested"}},"balanceOfBatch(address[],uint256[])":{"params":{"_ids":"ID of the Tokens","_owners":"The addresses of the token holders"},"returns":{"_0":"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"}},"deposit(address,address,uint256)":{"details":"Deposit ERC20 tokens or ETH in this contract to receive wrapped ERC20s","params":{"_recipient":"Address that will receive the ERC-1155 tokens","_token":"The addess of the token to deposit in this contract","_value":"The amount of token to deposit in this contract Note: Users must first approve this contract addres on the contract of the ERC20 to be deposited"}},"getIdAddress(uint256)":{"params":{"_id":"Meta-ERC20 token ID to get the corresponding ERC-20 token address"},"returns":{"token":"ERC-20 token address"}},"getNonce(address)":{"params":{"_signer":"Address to query signature nonce for"}},"getTokenID(address)":{"params":{"_token":"ERC-20 token address to get the corresponding Meta-ERC20 token ID"},"returns":{"tokenID":"Meta-ERC20 token ID"}},"isApprovedForAll(address,address)":{"params":{"_operator":"Address of authorized operator","_owner":"The owner of the Tokens"},"returns":{"isOperator":"True if the operator is approved, false if not"}},"isValidSignature(address,bytes32,bytes,bytes)":{"details":"Verifies that a hash has been signed by the given signer.","params":{"_data":"Full EIP-712 data structure that was hashed and signed","_hash":"Hash of the EIP-712 encoded data","_sig":"Proof that the hash has been signed by signer.      For non wallet signatures, _sig is expected to be an array tightly encoded as      (bytes32 r, bytes32 s, uint8 v, uint256 nonce, SignatureType sigType)","_signerAddress":"Address that should have signed the given hash."},"returns":{"isValid":"True if the address recovered from the provided signature matches the input signer address."}},"metaSafeBatchTransferFrom(address,address,uint256[],uint256[],bool,bytes)":{"params":{"_amounts":"Transfer amounts per token type","_data":"Encodes a meta transfer indicator, signature, gas payment receipt and extra transfer data   _data should be encoded as (   (bytes32 r, bytes32 s, uint8 v, uint256 nonce, SignatureType sigType),   (GasReceipt g, ?bytes transferData) )   i.e. high level encoding should be (bytes, bytes), where the latter bytes array is a nested bytes array","_from":"Source addresses","_ids":"IDs of each token type","_isGasFee":"Whether gas is reimbursed to executor or not","_to":"Target addresses"}},"metaSafeTransferFrom(address,address,uint256,uint256,bool,bytes)":{"params":{"_amount":"Transfered amount","_data":"Encodes a meta transfer indicator, signature, gas payment receipt and extra transfer data   _data should be encoded as (   (bytes32 r, bytes32 s, uint8 v, uint256 nonce, SignatureType sigType),   (GasReceipt g, ?bytes transferData) )   i.e. high level encoding should be (bytes, bytes), where the latter bytes array is a nested bytes array","_from":"Source address","_id":"ID of the token type","_isGasFee":"Whether gas is reimbursed to executor or not","_to":"Target address"}},"metaSetApprovalForAll(address,address,bool,bool,bytes)":{"params":{"_approved":"True if the operator is approved, false to revoke approval","_data":"Encodes signature and gas payment receipt   _data should be encoded as (     (bytes32 r, bytes32 s, uint8 v, uint256 nonce, SignatureType sigType),     (GasReceipt g)   )   i.e. high level encoding should be (bytes, bytes), where the latter bytes array is a nested bytes array","_isGasFee":"Whether gas will be reimbursed or not, with vlid signature","_operator":"Address to add to the set of authorized operators","_owner":"Address that wants to set operator status  _spender"}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"params":{"_from":"The address which previously owned the token","_ids":"An array containing ids of each token being transferred","_values":"An array containing amounts of each token being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"params":{"_from":"The address which previously owned the token","_id":"The id of the token being transferred","_value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`"}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"params":{"_amounts":"Transfer amounts per token type","_data":"Additional data with no specified format, sent in call to `_to`","_from":"Source addresses","_ids":"IDs of each token type","_to":"Target addresses"}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"params":{"_amount":"Transfered amount","_data":"Additional data with no specified format, sent in call to `_to`","_from":"Source address","_id":"ID of the token type","_to":"Target address"}},"setApprovalForAll(address,bool)":{"params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"supportsInterface(bytes4)":{"details":"This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.      This function MUST NOT consume more than 5,000 gas.","params":{"interfaceID":"The ERC-165 interface ID that is queried for support.s"},"returns":{"_0":"Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported."}},"withdraw(address,address,uint256)":{"details":"Withdraw wrapped ERC20 tokens in this contract to receive the original ERC20s or ETH","params":{"_to":"The address where the withdrawn tokens will go to","_token":"The addess of the token to withdrww from this contract","_value":"The amount of tokens to withdraw"}}},"version":1},"userdoc":{"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Get the balance of an account's Tokens"},"balanceOfBatch(address[],uint256[])":{"notice":"Get the balance of multiple account/token pairs"},"getIdAddress(uint256)":{"notice":"Return the ERC-20 token address for the given Meta-ERC20 token ID"},"getNTokens()":{"notice":"Returns number of tokens currently registered"},"getNonce(address)":{"notice":"Returns the current nonce associated with a given address"},"getTokenID(address)":{"notice":"Return the Meta-ERC20 token ID for the given ERC-20 token address"},"isApprovedForAll(address,address)":{"notice":"Queries the approval status of an operator for a given owner"},"metaSafeBatchTransferFrom(address,address,uint256[],uint256[],bool,bytes)":{"notice":"Allows anyone with a valid signature to transfer multiple types of tokens on the bahalf of _from"},"metaSafeTransferFrom(address,address,uint256,uint256,bool,bytes)":{"notice":"Allows anyone with a valid signature to transfer _amount amount of a token _id on the bahalf of _from"},"metaSetApprovalForAll(address,address,bool,bool,bytes)":{"notice":"Approve the passed address to spend on behalf of _from if valid signature is provided"},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart"},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Withdraw ERC-20 tokens when receiving their ERC-1155 counterpart"},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Send multiple types of Tokens from the _from address to the _to address (with safety call)"},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Transfers amount amount of an _id from the _from address to the _to address specified"},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens"},"supportsInterface(bytes4)":{"notice":"Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types."}},"notice":"Allows users to wrap any amount of any ERC-20 token with a 1:1 ratio   of corresponding ERC-1155 tokens with native metaTransaction methods. Each   ERC-20 is assigned an ERC-1155 id for more efficient CALLDATA usage when   doing transfers.","version":1}},"settings":{"compilationTarget":{"hypertokenwrapper_flat.sol":"HyperTokenWrapper"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"hypertokenwrapper_flat.sol":{"keccak256":"0x28f4e3610c000d8c43e1bfee79eb4db53b19ac02fce80af3dfbcfc64e46983a7","license":"Apache-2.0","urls":["bzz-raw://a41bea765b9702af98b82ab0511cfb65f71998790cb98e2a3031204b6e07a886","dweb:/ipfs/QmY2UVBwY52pokgjnGkHHCmJFnsE2JbHbDvc2MEnBEhpeb"]}},"version":1},"version":1,"checkPoints":[]}