{"address":"0x2ee2bf09A6e559047D26df6F690435E746072e73","name":"","metadata":{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"borrowProxy","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amountToBorrow","type":"uint256"},{"internalType":"uint256","name":"_amountOfProfitToReturn","type":"uint256"}],"name":"hello","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amountBorrowed","type":"uint256"},{"internalType":"uint256","name":"_amountOfProfitToReturn","type":"uint256"}],"name":"helloCallback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquidityPool","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"sendERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_address","type":"address"}],"name":"sendETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newBorrowProxy","type":"address"}],"name":"setBorrowProxy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_newLiquidityPool","type":"address"}],"name":"setLiquidityPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_newOwner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract implements a simple keeper. It borrows ETH from the KeeperDAO liquidity pool, and immediately returns all of the borrowed ETH, plus some amount of \"profit\" from its own balance. Instead of returning profits from their own balances, keeper contracts will usually engage in arbitrage or liquidations to earn profits that can be returned.","kind":"dev","methods":{"hello(address,uint256,uint256)":{"details":"This function is the entry point of this keeper. An off-chain bot will call this function whenever it decides that it wants to borrow from this KeeperDAO liquidity pool. This function is similar to what you would expect in a \"real\" keeper implementation: it accepts paramters telling it what / how much to borrow, and which callback on this contract should be called once the borrowed funds have been transferred."},"helloCallback(uint256,uint256)":{"details":"This is the callback function that implements our custom keeper logic. We do not need to call this function directly; it will be called by the KeeperDAO borrow proxy when we call borrow on the KeeperDAO liquidity pool. In fact, usually, this function should be restricted so that is can only be called by the KeeperDAO borrow proxy. Just before this callback is called by the KeeperDAO borrow proxy, all of the assets that we want to borrow will be transferred to this contract. In this callback, we can do whatever we want with these assets; we can arbitrage between DEXs, liquidity positions on Compound, and so on. The only requirement is that at least more than the borrowed assets is returned. For example, imagine that we wanted borrowed 1 ETH. Before this callback is called, the KeeperDAO liquidity pool will have transferred 1 ETH to this contract. This callback can then do whatever it wants with that ETH. However, before the callback returns, it must return at least more than 1 ETH to the KeeperDAO liquidity pool (even if it is only returning 1 ETH + 1 WEI). In our example, we will not implement a complicated keeper strategy. We will simply return all of the borrowed ETH, plus a non-zero amount of profit. The amount of profit is explicitly specified by the owner of this contract when they initiate the borrow. Of course, this strategy does not generate profit by interacting with other protocols (like most keepers do). Instead, it just uses its own balance to return profits to KeeperDAO."},"setBorrowProxy(address)":{"details":"Set the borrow proxy expected by this contract. This function can only be called by the current owner.","params":{"_newBorrowProxy":"The new borrow proxy expected by this contract."}},"setLiquidityPool(address)":{"details":"Set the liquidity pool used by this contract. This function can only be called by the current owner.","params":{"_newLiquidityPool":"The new liquidity pool used by this contract. It must be a payable address, because this contract needs to be able to return borrowed assets and profits to the liquidty pool."}},"setOwner(address)":{"details":"Set the owner of this contract. This function can only be called by the current owner.","params":{"_newOwner":"The new owner of this contract."}}},"stateVariables":{"borrowProxy":{"details":"Address of the KeeperDAO borrow proxy. This will be the `msg.sender` for calls to the `helloCallback` function."},"liquidityPool":{"details":"Address of the KeeperDAO liquidity pool. This is will be the address to which the `helloCallback` function must return all bororwed assets (and all excess profits)."},"owner":{"details":"Owner of the contract."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"browser/rooktest.sol":"HelloKeeperDAO"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/rooktest.sol":{"keccak256":"0x7307e5ac20e8895d2918bdfa37599a05b6fd8d080d1aa9b45a210a40d3525a51","license":"Unlicense","urls":["bzz-raw://e050b5c2880132dc2dcceeab0650bc679b89f5ceef8d22d052cfa7dc9edf7ac9","dweb:/ipfs/QmdeFmB8n5441F4U73psFX4KHeSJiUnZvuw8Fwfmj3BAiu"]}},"version":1},"version":1,"checkPoints":[]}