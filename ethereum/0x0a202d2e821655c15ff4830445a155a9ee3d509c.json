{"address":"0x0A202d2E821655C15ff4830445a155A9EE3D509c","name":"","metadata":{"compiler":{"version":"0.6.2+commit.bacdbe57"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_aggregator","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"AddedToWhitelist","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"int256","name":"current","type":"int256"},{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AnswerUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"roundId","type":"uint256"},{"indexed":true,"internalType":"address","name":"startedBy","type":"address"},{"indexed":false,"internalType":"uint256","name":"startedAt","type":"uint256"}],"name":"NewRound","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"RemovedFromWhitelist","type":"event"},{"anonymous":false,"inputs":[],"name":"WhitelistDisabled","type":"event"},{"anonymous":false,"inputs":[],"name":"WhitelistEnabled","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"addToWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"aggregator","outputs":[{"internalType":"contract AggregatorInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"disableWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enableWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getRoundData","outputs":[{"internalType":"uint256","name":"roundId","type":"uint256"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint256","name":"answeredInRound","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_roundId","type":"uint256"}],"name":"getTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"latestAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"latestRound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint256","name":"roundId","type":"uint256"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint256","name":"answeredInRound","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"latestTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"removeFromWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_aggregator","type":"address"}],"name":"setAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"whitelistEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"methods":{"acceptOwnership()":{"details":"Allows an ownership transfer to be completed by the recipient."},"addToWhitelist(address)":{"params":{"_user":"The address to whitelist"}},"getAnswer(uint256)":{"details":"overridden function to add the isWhitelisted() modifier","params":{"_roundId":"the answer number to retrieve the answer for"}},"getRoundData(uint256)":{"details":"Note that answer and updatedAt may change between queries.","params":{"_roundId":"the round ID to retrieve the round data for"},"returns":{"answer":"is the answer for the given round","answeredInRound":"is the round ID of the round in which the answer was computed. (Only some AggregatorInterface implementations return meaningful values)","roundId":"is the round ID for which data was retrieved","startedAt":"is the timestamp when the round was started. (Only some AggregatorInterface implementations return meaningful values)","updatedAt":"is the timestamp when the round last was updated (i.e. answer was last computed)"}},"getTimestamp(uint256)":{"details":"overridden function to add the isWhitelisted() modifier","params":{"_roundId":"the answer number to retrieve the updated timestamp for"}},"latestAnswer()":{"details":"overridden function to add the isWhitelisted() modifier"},"latestRound()":{"details":"overridden function to add the isWhitelisted() modifier"},"latestRoundData()":{"details":"Note that answer and updatedAt may change between queries.","returns":{"answer":"is the answer for the given round","answeredInRound":"is the round ID of the round in which the answer was computed. (Only some AggregatorInterface implementations return meaningful values)","roundId":"is the round ID for which data was retrieved","startedAt":"is the timestamp when the round was started. (Only some AggregatorInterface implementations return meaningful values)","updatedAt":"is the timestamp when the round last was updated (i.e. answer was last computed)"}},"latestTimestamp()":{"details":"overridden function to add the isWhitelisted() modifier"},"removeFromWhitelist(address)":{"params":{"_user":"The address to remove"}},"setAggregator(address)":{"params":{"_aggregator":"The new address for the aggregator contract"}},"transferOwnership(address)":{"details":"Allows an owner to begin transferring ownership to a new address, pending."}}},"userdoc":{"methods":{"addToWhitelist(address)":{"notice":"Adds an address to the whitelist"},"decimals()":{"notice":"represents the number of decimals the aggregator responses represent."},"disableWhitelist()":{"notice":"makes the whitelist check unenforced"},"enableWhitelist()":{"notice":"makes the whitelist check enforced"},"getAnswer(uint256)":{"notice":"get past rounds answers"},"getRoundData(uint256)":{"notice":"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorInterface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."},"getTimestamp(uint256)":{"notice":"get block timestamp when an answer was last updated"},"latestAnswer()":{"notice":"Reads the current answer from aggregator delegated to."},"latestRound()":{"notice":"get the latest completed round where the answer was updated"},"latestRoundData()":{"notice":"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorInterface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them."},"latestTimestamp()":{"notice":"Reads the last updated height from aggregator delegated to."},"removeFromWhitelist(address)":{"notice":"Removes an address from the whitelist"},"setAggregator(address)":{"notice":"Allows the owner to update the aggregator address."}}}},"settings":{"compilationTarget":{"browser/WhitelistedAggregatorProxy.sol":"WhitelistedAggregatorProxy"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/WhitelistedAggregatorProxy.sol":{"keccak256":"0x5ddd4f843419e6d83c7e298602585b6a550574e06ea497678fb8383e9931e92b","urls":["bzz-raw://b7268fbe2a507c3aa6da9784a37260ed8c1c93b55f3613f642011e80c8937974","dweb:/ipfs/QmaK7cpB5do2pjn6XKYR6mDxMFaVm771d2Cnbb3scsUEQd"]}},"version":1},"version":1,"checkPoints":[]}