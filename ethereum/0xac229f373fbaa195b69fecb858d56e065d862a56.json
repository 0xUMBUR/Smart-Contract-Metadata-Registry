{"address":"0xAC229F373FbAa195b69FEcb858d56e065D862a56","name":"","metadata":{"compiler":{"version":"0.8.2+commit.661d1103"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"fees_","type":"uint256"},{"internalType":"address","name":"safe_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"SafeEx","outputs":[{"internalType":"contract SafeExContract","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"buy","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"fees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isLocked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"fees_","type":"uint256"}],"name":"setFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract SafeExContract","name":"safe_","type":"address"}],"name":"setSafeEx","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"LiquidityProvider contract. This contract is able to mint SafeExToken for users. To get tokens the users have to send ether to the contract. Then, according to the {fees} the corresponding amount of SafeEx tokens is minted and sent to the user. The {buy} method can also be called to mint a specific amount of tokens.","kind":"dev","methods":{"SafeEx()":{"details":"Sets the SafeExToken contract address Requirements:  - the caller must be the contract owner  - `safe_` cannot be the 0x0 address"},"buy(uint256)":{"details":"Buys a specific `amount` of SAFE token, remaining eth is sent back to `msg.sender`. Requirements:  - the contract cannot be locked  - enough eth must be send"},"fees()":{"details":"Returns the number of eth wei to pay for 1 SAFE token"},"isLocked()":{"details":"Returns `true` if the contract is locked. When the contract is locked, the user is not able to send eth or use the {buy} method"},"lock()":{"details":"Locks the contract Requirements:  - the caller must be the contract owner"},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. By doing this, the contract is locked and so becomes a zoombi Requirements:  - the caller must be the contract owner"},"setFees(uint256)":{"details":"Set the fees See {fees} for more information Requirements:  - the caller must be the contract owner  - fees must be strictly positive"},"setSafeEx(address)":{"details":"Sets the SafeExToken contract address Requirements:  - the caller must be the contract owner  - `safe_` cannot be the 0x0 address"},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unlock()":{"details":"Un-locks the contract Requirements:  - the caller must be the contract owner"},"withdraw()":{"details":"Sends the eth contained at the contract address to the caller Requirements:  - the caller must be the contract owner"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"browser/contracts/LiquidityProvider.sol":"LiquidityProvider"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"browser/contracts/LiquidityProvider.sol":{"keccak256":"0x4d0b124a8f1f48cff5a66a5cf8fb540e8d002b735a1f9f678f690da0e9e69433","license":"MIT","urls":["bzz-raw://dd6ef538233b96c6509c7539bc9020a753b315df23a51eea0bcd80c53622d34f","dweb:/ipfs/QmaRZvwnCNZucaZmYYNujaNqCfNCpnrLxWqHN1uLV3peYT"]}},"version":1},"version":1,"checkPoints":[]}