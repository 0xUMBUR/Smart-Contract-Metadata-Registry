{"address":"0xD35839a6cB94F3eb8Cae298c802624D5fF67D3E1","name":"","metadata":{"compiler":{"version":"0.5.11+commit.c082d0b4"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mintToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"LastTokenId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"tokenURI","type":"string"}],"name":"setTokenURI","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"tokenURI","type":"string"}],"name":"mintWithTokenURI","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"_nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes4","name":"tokenHash","type":"bytes4"}],"name":"checkKey","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getTokenKey","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"}],"devdoc":{"methods":{"LastTokenId()":{"details":"Return last id token\r","return":"Last token id\r"},"approve(address,uint256)":{"details":"Approves another address to transfer the given token ID\r The zero address indicates there is no approved address.\r There can only be one approved address per token at a given time.\r Can only be called by the token owner or an approved operator.\r","params":{"to":"address to be approved for the given token ID\r","tokenId":"uint256 ID of the token to be approved\r"}},"balanceOf(address)":{"details":"Gets the balance of the specified address.\r","params":{"owner":"address to query the balance of\r"},"return":"uint256 representing the amount owned by the passed address\r"},"checkKey(uint256,bytes4)":{"details":"Test tokenId and TokenHash\r","params":{"tokenHash":"The token URI of the minted token.\r","tokenId":"The token id to mint.\r"},"return":"A boolean that indicates if the operation was successful.\r"},"getApproved(uint256)":{"details":"Gets the approved address for a token ID, or zero if no address set\r Reverts if the token ID does not exist.\r","params":{"tokenId":"uint256 ID of the token to query the approval of\r"},"return":"address currently approved for the given token ID\r"},"getTokenKey(uint256)":{"details":"Function to get a hash of tokenId\r","params":{"tokenId":"The token id to mint.\r"},"return":"A boolean that indicates if the operation was successful.\r"},"isApprovedForAll(address,address)":{"details":"Tells whether an operator is approved by a given owner.\r","params":{"operator":"operator address which you want to query the approval of\r","owner":"owner address which you want to query the approval of\r"},"return":"bool whether the given operator is approved by the given owner\r"},"mintToken(address)":{"details":"Function to set TokenUri only owner contract.\r","params":{"to":"The address that will receive the minted tokens.\r"},"return":"A TokenId that indicates if the operation was successful.\r"},"mintWithTokenURI(address,string)":{"details":"Function to mint tokens.\r","params":{"to":"The address that will receive the minted tokens\r","tokenURI":"The token URI of the minted token.\r"},"return":"A TokenId that indicates if the operation was successful.\r"},"name()":{"details":"Gets the token name.\r","return":"string representing the token name\r"},"ownerOf(uint256)":{"details":"Gets the owner of the specified token ID.\r","params":{"tokenId":"uint256 ID of the token to query the owner of\r"},"return":"address currently marked as the owner of the given token ID\r"},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers the ownership of a given token ID to another address\r If the target address is a contract, it must implement `onERC721Received`,\r which is called upon a safe transfer, and return the magic value\r `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r the transfer is reverted.\r Requires the msg.sender to be the owner, approved, or operator\r","params":{"from":"current owner of the token\r","to":"address to receive the ownership of the given token ID\r","tokenId":"uint256 ID of the token to be transferred\r"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers the ownership of a given token ID to another address\r If the target address is a contract, it must implement `onERC721Received`,\r which is called upon a safe transfer, and return the magic value\r `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r the transfer is reverted.\r Requires the msg.sender to be the owner, approved, or operator\r","params":{"_data":"bytes data to send along with a safe transfer check\r","from":"current owner of the token\r","to":"address to receive the ownership of the given token ID\r","tokenId":"uint256 ID of the token to be transferred\r"}},"setApprovalForAll(address,bool)":{"details":"Sets or unsets the approval of a given operator\r An operator is allowed to transfer all tokens of the sender on their behalf.\r","params":{"approved":"representing the status of the approval to be set\r","to":"operator address to set the approval\r"}},"setTokenURI(uint256,string)":{"details":"Function to mint tokens only owner contract.\r","params":{"tokenId":"The token id to mint.\r","tokenURI":"The token URI of the minted token.\r"},"return":"A boolean that indicates if the operation was successful.\r"},"supportsInterface(bytes4)":{"details":"See `IERC165.supportsInterface`.\r      * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r"},"symbol()":{"details":"Gets the token symbol.\r","return":"string representing the token symbol\r"},"tokenByIndex(uint256)":{"details":"Gets the token ID at a given index of all the tokens in this contract\r Reverts if the index is greater or equal to the total number of tokens.\r","params":{"index":"uint256 representing the index to be accessed of the tokens list\r"},"return":"uint256 token ID at the given index of the tokens list\r"},"tokenOfOwnerByIndex(address,uint256)":{"details":"Gets the token ID at a given index of the tokens list of the requested owner.\r","params":{"index":"uint256 representing the index to be accessed of the requested tokens list\r","owner":"address owning the tokens list to be accessed\r"},"return":"uint256 token ID at the given index of the tokens list owned by the requested address\r"},"tokenURI(uint256)":{"details":"Returns an URI for a given token ID.\r Throws if the token ID does not exist. May return an empty string.\r","params":{"tokenId":"uint256 ID of the token to query\r"}},"totalSupply()":{"details":"Gets the total amount of tokens stored by the contract.\r","return":"uint256 representing the total amount of tokens\r"},"transferFrom(address,address,uint256)":{"details":"Transfers the ownership of a given token ID to another address.\r Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\r Requires the msg.sender to be the owner, approved, or operator.\r","params":{"from":"current owner of the token\r","to":"address to receive the ownership of the given token ID\r","tokenId":"uint256 ID of the token to be transferred\r"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"browser/flattened.sol":"Authentica"},"evmVersion":"petersburg","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"browser/flattened.sol":{"keccak256":"0x4f0f193b78147fc1780597a5f07c43698d06987298cf4a5bc89a096a29021056","urls":["bzz-raw://e05f1c525b06436ef8bc6cd645613f4c652235d9a71d6c762b4144f41106c5f4","dweb:/ipfs/QmUDnj8f8gthe1NGxhtJxoFdsyiCAxmcWYUJeW64QNqSQo"]}},"version":1},"version":1,"checkPoints":[]}