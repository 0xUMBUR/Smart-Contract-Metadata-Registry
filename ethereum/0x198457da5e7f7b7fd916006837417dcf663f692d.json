{"address":"0x198457dA5e7f7B7FD916006837417dcf663f692D","name":"","metadata":{"compiler":{"version":"0.8.1+commit.df193b15"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"to_value","type":"uint256"},{"indexed":false,"internalType":"address","name":"token_address","type":"address"}],"name":"ClaimSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"address","name":"token_address","type":"address"},{"indexed":false,"internalType":"uint256","name":"remaining_balance","type":"uint256"},{"indexed":false,"internalType":"uint128[]","name":"exchanged_values","type":"uint128[]"}],"name":"DestructSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"total","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"creation_time","type":"uint256"},{"indexed":false,"internalType":"address","name":"token_address","type":"address"},{"indexed":false,"internalType":"string","name":"message","type":"string"}],"name":"FillSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"address","name":"swapper","type":"address"},{"indexed":false,"internalType":"address","name":"from_address","type":"address"},{"indexed":false,"internalType":"address","name":"to_address","type":"address"},{"indexed":false,"internalType":"uint256","name":"from_value","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"to_value","type":"uint256"}],"name":"SwapSuccess","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":false,"internalType":"address","name":"token_address","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdraw_balance","type":"uint256"}],"name":"WithdrawSuccess","type":"event"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"check_availability","outputs":[{"internalType":"address[]","name":"exchange_addrs","type":"address[]"},{"internalType":"uint256","name":"remaining","type":"uint256"},{"internalType":"bool","name":"started","type":"bool"},{"internalType":"bool","name":"expired","type":"bool"},{"internalType":"bool","name":"unlocked","type":"bool"},{"internalType":"uint256","name":"unlock_time","type":"uint256"},{"internalType":"uint256","name":"swapped","type":"uint256"},{"internalType":"uint128[]","name":"exchanged_tokens","type":"uint128[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"ito_ids","type":"bytes32[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"contract_creator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"destruct","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"uint256","name":"_start","type":"uint256"},{"internalType":"uint256","name":"_end","type":"uint256"},{"internalType":"string","name":"message","type":"string"},{"internalType":"address[]","name":"_exchange_addrs","type":"address[]"},{"internalType":"uint128[]","name":"_ratios","type":"uint128[]"},{"internalType":"uint256","name":"_unlock_time","type":"uint256"},{"internalType":"address","name":"_token_addr","type":"address"},{"internalType":"uint256","name":"_total_tokens","type":"uint256"},{"internalType":"uint256","name":"_limit","type":"uint256"},{"internalType":"address","name":"_qualification","type":"address"}],"name":"fill_pool","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"_unlock_time","type":"uint256"}],"name":"setUnlockTime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"bytes32","name":"verification","type":"bytes32"},{"internalType":"bytes32","name":"validation","type":"bytes32"},{"internalType":"uint256","name":"exchange_addr_i","type":"uint256"},{"internalType":"uint128","name":"input_total","type":"uint128"}],"name":"swap","outputs":[{"internalType":"uint256","name":"swapped","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"addr_i","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"fill_pool(bytes32,uint256,uint256,string,address[],uint128[],uint256,address,uint256,uint256,address)":{"details":" fill_pool() creates a swap pool with specific parameters from input _hash                sha3-256(password) _start               start time delta, real start time = base_time + _start _end                 end time delta, real end time = base_time + _end message              swap pool creation message, only stored in FillSuccess event _exchange_addrs      swap token list (0x0 for ETH, only supports ETH and ERC20 now) _ratios              swap pair ratio list _unlock_time         unlock time delta real unlock time = base_time + _unlock_time _token_addr          swap target token address _total_tokens        target token total swap amount _limit               target token single swap limit _qualification       the qualification contract address based on IQLF to determine qualification This function takes the above parameters and creates the pool. _total_tokens of the target token will be successfully transferred to this contract securely on a successful run of this function.*"},"swap(bytes32,bytes32,bytes32,uint256,uint128)":{"details":"swap() allows users to swap tokens in a swap pool id                   swap pool id verification         sha3-256(sha3-256(password)[:40]+swapper_address) validation           sha3-256(swapper_address) exchange_addr_i     the index of the exchange address of the list input_total          the input amount of the specific token This function is called by the swapper who approves the specific ERC20 or directly transfer the ETH first and wants to swap the desired amount of the target token. The swapped amount is calculated based on the pool ratio. After swap successfully, the same account can not swap the same pool again.*"}},"version":1},"userdoc":{"kind":"user","methods":{"check_availability(bytes32)":{"notice":"check_availability() returns a bunch of pool info given a pool id id                    swap pool id this function returns 1. exchange_addrs that can be used to determine the index                       2. remaining target tokens                       3. if started                       4. if ended                       5. swapped amount of the query address                       5. exchanged amount of each token*"},"destruct(bytes32)":{"notice":"destruct() destructs the given pool given the pool id id                    swap pool id this function can only be called by the pool creator. after validation, it transfers all the remaining token  (if any) and all the swapped tokens to the pool creator. it will then destruct the pool by reseting almost  all the variables to zero to get the gas refund. note that this function may not work if a pool needs to transfer over ~200 tokens back to the address due to  the block gas limit. we have another function withdraw() to help the pool creator to withdraw a single token *"},"withdraw(bytes32,uint256)":{"notice":"withdraw() transfers out a single token after a pool is expired or empty  id                    swap pool id addr_i                withdraw token index this function can only be called by the pool creator. after validation, it transfers the addr_i th token  out to the pool creator address.*"}},"version":1}},"settings":{"compilationTarget":{"ito.sol":"HappyTokenPool"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"ito.sol":{"keccak256":"0x8ad1bdcd88124e5b1b87250506ff6c2ade13b63f9702204c4a32c5f78e6a2a84","urls":["bzz-raw://80bd8f24fdda7f3d966ab32fa21386baa5df18e16b39e9d5d062e6afb5100da7","dweb:/ipfs/QmTT5CF5mtrQV9d6nFoWB4iNEuCpoLARTQijVzm4URVynx"]}},"version":1},"version":1,"checkPoints":[]}